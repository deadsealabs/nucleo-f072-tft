
nucleo-f072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004528  08004528  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004528  08004528  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  08004540  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08004540  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b7  00000000  00000000  0002a2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017def  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088a9  00000000  00000000  00044bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000937d1  00000000  00000000  0004d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0c71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  000e0cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004490 	.word	0x08004490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004490 	.word	0x08004490

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f002 fe8a 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e6 	bl	80003fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f876 	bl	8000320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ID = readID();
 8000234:	f001 f948 	bl	80014c8 <readID>
 8000238:	0003      	movs	r3, r0
 800023a:	001a      	movs	r2, r3
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <main+0x78>)
 800023e:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000240:	2064      	movs	r0, #100	; 0x64
 8000242:	f002 fedf 	bl	8003004 <HAL_Delay>

  tft_init (ID);
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <main+0x78>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	0018      	movs	r0, r3
 800024c:	f001 f8de 	bl	800140c <tft_init>

  setRotation(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f001 f949 	bl	80014e8 <setRotation>

  fillScreen(BLACK);
 8000256:	2000      	movs	r0, #0
 8000258:	f001 fca0 	bl	8001b9c <fillScreen>

  testFillScreen();
 800025c:	f002 fc66 	bl	8002b2c <testFillScreen>
  testLines(CYAN);
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0x7c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fc7a 	bl	8002b5c <testLines>
  testFastLines(RED, BLUE);
 8000268:	23f8      	movs	r3, #248	; 0xf8
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	211f      	movs	r1, #31
 800026e:	0018      	movs	r0, r3
 8000270:	f002 fd7a 	bl	8002d68 <testFastLines>
  testFilledCircles(10, MAGENTA);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0x80>)
 8000276:	0019      	movs	r1, r3
 8000278:	200a      	movs	r0, #10
 800027a:	f002 fdb3 	bl	8002de4 <testFilledCircles>
  testCircles(10, WHITE);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x84>)
 8000280:	0019      	movs	r1, r3
 8000282:	200a      	movs	r0, #10
 8000284:	f002 fded 	bl	8002e62 <testCircles>

  fillScreen(BLACK);
 8000288:	2000      	movs	r0, #0
 800028a:	f001 fc87 	bl	8001b9c <fillScreen>

  setRotation(1);
 800028e:	2001      	movs	r0, #1
 8000290:	f001 f92a 	bl	80014e8 <setRotation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x74>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000002c 	.word	0x2000002c
 800029c:	000007ff 	.word	0x000007ff
 80002a0:	0000f81f 	.word	0x0000f81f
 80002a4:	0000ffff 	.word	0x0000ffff

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f004 f8e1 	bl	8004480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f004 f8da 	bl	8004480 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2220      	movs	r2, #32
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 f8fb 	bl	80034dc <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ea:	f000 f915 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2203      	movs	r2, #3
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f003 fc6c 	bl	8003be8 <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000314:	f000 f900 	bl	8000518 <Error_Handler>
  }
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b013      	add	sp, #76	; 0x4c
 800031e:	bd90      	pop	{r4, r7, pc}

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	2310      	movs	r3, #16
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	2310      	movs	r3, #16
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f004 f8a5 	bl	8004480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	2308      	movs	r3, #8
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2308      	movs	r3, #8
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f004 f89d 	bl	8004480 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __TIM1_CLK_ENABLE();
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_TIM1_Init+0xcc>)
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0109      	lsls	r1, r1, #4
 8000350:	430a      	orrs	r2, r1
 8000352:	619a      	str	r2, [r3, #24]
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000356:	699a      	ldr	r2, [r3, #24]
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <MX_TIM1_Init+0xd4>)
 8000366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800036a:	222f      	movs	r2, #47	; 0x2f
 800036c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000376:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <MX_TIM1_Init+0xd8>)
 8000378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800038e:	0018      	movs	r0, r3
 8000390:	f003 fd82 	bl	8003e98 <HAL_TIM_Base_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000398:	f000 f8be 	bl	8000518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	2110      	movs	r1, #16
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	0152      	lsls	r2, r2, #5
 80003a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a6:	187a      	adds	r2, r7, r1
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003aa:	0011      	movs	r1, r2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f003 fe0d 	bl	8003fcc <HAL_TIM_ConfigClockSource>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f8af 	bl	8000518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2108      	movs	r1, #8
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 ffd4 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80003d8:	f000 f89e 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f003 fdaa 	bl	8003f38 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b008      	add	sp, #32
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	20000030 	.word	0x20000030
 80003f4:	40012c00 	.word	0x40012c00
 80003f8:	0000fffe 	.word	0x0000fffe

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 f837 	bl	8004480 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b3c      	ldr	r3, [pc, #240]	; (8000504 <MX_GPIO_Init+0x108>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <MX_GPIO_Init+0x108>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0309      	lsls	r1, r1, #12
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b38      	ldr	r3, [pc, #224]	; (8000504 <MX_GPIO_Init+0x108>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	031b      	lsls	r3, r3, #12
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <MX_GPIO_Init+0x108>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b34      	ldr	r3, [pc, #208]	; (8000504 <MX_GPIO_Init+0x108>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <MX_GPIO_Init+0x108>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <MX_GPIO_Init+0x108>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <MX_GPIO_Init+0x108>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	02c9      	lsls	r1, r1, #11
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <MX_GPIO_Init+0x108>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	02db      	lsls	r3, r3, #11
 8000460:	4013      	ands	r3, r2
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D1_Pin, GPIO_PIN_RESET);
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_GPIO_Init+0x10c>)
 8000468:	2200      	movs	r2, #0
 800046a:	2182      	movs	r1, #130	; 0x82
 800046c:	0018      	movs	r0, r3
 800046e:	f003 f817 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RD_Pin|WR_Pin|RS_Pin|D7_Pin
 8000472:	4926      	ldr	r1, [pc, #152]	; (800050c <MX_GPIO_Init+0x110>)
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f003 f810 	bl	80034a0 <HAL_GPIO_WritePin>
                          |D0_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000480:	4923      	ldr	r1, [pc, #140]	; (8000510 <MX_GPIO_Init+0x114>)
 8000482:	4b24      	ldr	r3, [pc, #144]	; (8000514 <MX_GPIO_Init+0x118>)
 8000484:	2200      	movs	r2, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f003 f80a 	bl	80034a0 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D1_Pin;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2282      	movs	r2, #130	; 0x82
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	4a18      	ldr	r2, [pc, #96]	; (8000508 <MX_GPIO_Init+0x10c>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f002 fe80 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin WR_Pin RS_Pin D7_Pin
                           D0_Pin D2_Pin */
  GPIO_InitStruct.Pin = RD_Pin|WR_Pin|RS_Pin|D7_Pin
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <MX_GPIO_Init+0x110>)
 80004b4:	601a      	str	r2, [r3, #0]
                          |D0_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2201      	movs	r2, #1
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	193a      	adds	r2, r7, r4
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fe6d 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004d6:	0021      	movs	r1, r4
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <MX_GPIO_Init+0x114>)
 80004dc:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2201      	movs	r2, #1
 80004e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <MX_GPIO_Init+0x118>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	0010      	movs	r0, r2
 80004f8:	f002 fe5a 	bl	80031b0 <HAL_GPIO_Init>

}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b009      	add	sp, #36	; 0x24
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800
 800050c:	00000713 	.word	0x00000713
 8000510:	00000439 	.word	0x00000439
 8000514:	48000400 	.word	0x48000400

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	619a      	str	r2, [r3, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	69da      	ldr	r2, [r3, #28]
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0549      	lsls	r1, r1, #21
 800054c:	430a      	orrs	r2, r1
 800054e:	61da      	str	r2, [r3, #28]
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_MspInit+0x44>)
 8000552:	69da      	ldr	r2, [r3, #28]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	055b      	lsls	r3, r3, #21
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_TIM_Base_MspInit+0x38>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d10d      	bne.n	800059a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	430a      	orrs	r2, r1
 800058a:	619a      	str	r2, [r3, #24]
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_TIM_Base_MspInit+0x3c>)
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40012c00 	.word	0x40012c00
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f002 fcfa 	bl	8002fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <delay>:
#define  HEIGHT   ((uint16_t)480)

/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <delay+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <delay+0x28>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	d8f9      	bhi.n	80005fa <delay+0x12>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000030 	.word	0x20000030

08000614 <PIN_INPUT>:
#include "functions.h"
#include "user_setting.h"
#include "stdlib.h"

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	000a      	movs	r2, r1
 800061e:	1cbb      	adds	r3, r7, #2
 8000620:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000622:	1cbb      	adds	r3, r7, #2
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	210c      	movs	r1, #12
 8000628:	187b      	adds	r3, r7, r1
 800062a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000638:	187a      	adds	r2, r7, r1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fdb6 	bl	80031b0 <HAL_GPIO_Init>
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b008      	add	sp, #32
 800064a:	bd80      	pop	{r7, pc}

0800064c <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cbb      	adds	r3, r7, #2
 8000658:	801a      	strh	r2, [r3, #0]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800065a:	1cbb      	adds	r3, r7, #2
 800065c:	881a      	ldrh	r2, [r3, #0]
 800065e:	210c      	movs	r1, #12
 8000660:	187b      	adds	r3, r7, r1
 8000662:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2203      	movs	r2, #3
 8000674:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000676:	187a      	adds	r2, r7, r1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f002 fd97 	bl	80031b0 <HAL_GPIO_Init>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b008      	add	sp, #32
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <width+0x10>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000004 	.word	0x20000004

080006a0 <height>:

uint16_t height(void)
{ return _height; }
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <height+0x10>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000006 	.word	0x20000006

080006b4 <WriteCmdData>:

static void pushColors_any(uint16_t cmd, uint8_t * block, int16_t n, uint8_t first, uint8_t flags);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	801a      	strh	r2, [r3, #0]
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	881a      	ldrh	r2, [r3, #0]
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 f87d 	bl	80007d0 <writecmddata>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <setReadDir>:
uint16_t  _lcd_xor, _lcd_capable;

uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

void setReadDir (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	009a      	lsls	r2, r3, #2
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ff90 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <setReadDir+0x70>)
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ff8b 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	00da      	lsls	r2, r3, #3
 8000702:	2390      	movs	r3, #144	; 0x90
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ff83 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <setReadDir+0x74>)
 8000710:	2108      	movs	r1, #8
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff7e 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <setReadDir+0x74>)
 800071a:	2120      	movs	r1, #32
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ff79 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <setReadDir+0x74>)
 8000724:	2110      	movs	r1, #16
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff ff74 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4a08      	ldr	r2, [pc, #32]	; (8000754 <setReadDir+0x74>)
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f7ff ff6d 	bl	8000614 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	005a      	lsls	r2, r3, #1
 800073e:	2390      	movs	r3, #144	; 0x90
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff65 	bl	8000614 <PIN_INPUT>
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	48000800 	.word	0x48000800
 8000754:	48000400 	.word	0x48000400

08000758 <setWriteDir>:

void setWriteDir (void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	009a      	lsls	r2, r3, #2
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff ff70 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <setWriteDir+0x70>)
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ff6b 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	00da      	lsls	r2, r3, #3
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff ff63 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <setWriteDir+0x74>)
 8000788:	2108      	movs	r1, #8
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff5e 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <setWriteDir+0x74>)
 8000792:	2120      	movs	r1, #32
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff ff59 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <setWriteDir+0x74>)
 800079c:	2110      	movs	r1, #16
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff ff54 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <setWriteDir+0x74>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f7ff ff4d 	bl	800064c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	005a      	lsls	r2, r3, #1
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff45 	bl	800064c <PIN_OUTPUT>
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	48000800 	.word	0x48000800
 80007cc:	48000400 	.word	0x48000400

080007d0 <writecmddata>:
    }
    CS_IDLE;
}

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0002      	movs	r2, r0
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	801a      	strh	r2, [r3, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	1c0a      	adds	r2, r1, #0
 80007e0:	801a      	strh	r2, [r3, #0]
    CS_ACTIVE;
 80007e2:	4bd1      	ldr	r3, [pc, #836]	; (8000b28 <writecmddata+0x358>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fe59 	bl	80034a0 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 80007ee:	2390      	movs	r3, #144	; 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fe52 	bl	80034a0 <HAL_GPIO_WritePin>
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b29a      	uxth	r2, r3
 8000804:	210f      	movs	r1, #15
 8000806:	187b      	adds	r3, r7, r1
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	240e      	movs	r4, #14
 800080c:	193b      	adds	r3, r7, r4
 800080e:	1dba      	adds	r2, r7, #6
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	2390      	movs	r3, #144	; 0x90
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	22e0      	movs	r2, #224	; 0xe0
 800081a:	04d2      	lsls	r2, r2, #19
 800081c:	619a      	str	r2, [r3, #24]
 800081e:	4bc2      	ldr	r3, [pc, #776]	; (8000b28 <writecmddata+0x358>)
 8000820:	2287      	movs	r2, #135	; 0x87
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	619a      	str	r2, [r3, #24]
 8000826:	4bc1      	ldr	r3, [pc, #772]	; (8000b2c <writecmddata+0x35c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0412      	lsls	r2, r2, #16
 800082c:	619a      	str	r2, [r3, #24]
 800082e:	0008      	movs	r0, r1
 8000830:	183b      	adds	r3, r7, r0
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	025a      	lsls	r2, r3, #9
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	401a      	ands	r2, r3
 800083c:	183b      	adds	r3, r7, r0
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0219      	lsls	r1, r3, #8
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	400b      	ands	r3, r1
 8000848:	431a      	orrs	r2, r3
 800084a:	183b      	adds	r3, r7, r0
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0059      	lsls	r1, r3, #1
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	400b      	ands	r3, r1
 8000856:	431a      	orrs	r2, r3
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	619a      	str	r2, [r3, #24]
 800085e:	183b      	adds	r3, r7, r0
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2208      	movs	r2, #8
 8000864:	401a      	ands	r2, r3
 8000866:	183b      	adds	r3, r7, r0
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2120      	movs	r1, #32
 800086e:	400b      	ands	r3, r1
 8000870:	431a      	orrs	r2, r3
 8000872:	183b      	adds	r3, r7, r0
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	105b      	asrs	r3, r3, #1
 8000878:	2110      	movs	r1, #16
 800087a:	400b      	ands	r3, r1
 800087c:	431a      	orrs	r2, r3
 800087e:	183b      	adds	r3, r7, r0
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0119      	lsls	r1, r3, #4
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	400b      	ands	r3, r1
 800088a:	431a      	orrs	r2, r3
 800088c:	4ba6      	ldr	r3, [pc, #664]	; (8000b28 <writecmddata+0x358>)
 800088e:	619a      	str	r2, [r3, #24]
 8000890:	183b      	adds	r3, r7, r0
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	0019      	movs	r1, r3
 8000898:	4ba4      	ldr	r3, [pc, #656]	; (8000b2c <writecmddata+0x35c>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	400a      	ands	r2, r1
 800089e:	619a      	str	r2, [r3, #24]
 80008a0:	2390      	movs	r3, #144	; 0x90
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 fdf9 	bl	80034a0 <HAL_GPIO_WritePin>
 80008ae:	2390      	movs	r3, #144	; 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	2102      	movs	r1, #2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 fdf2 	bl	80034a0 <HAL_GPIO_WritePin>
 80008bc:	2390      	movs	r3, #144	; 0x90
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2201      	movs	r2, #1
 80008c2:	2102      	movs	r1, #2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 fdeb 	bl	80034a0 <HAL_GPIO_WritePin>
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	22e0      	movs	r2, #224	; 0xe0
 80008d0:	04d2      	lsls	r2, r2, #19
 80008d2:	619a      	str	r2, [r3, #24]
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <writecmddata+0x358>)
 80008d6:	2287      	movs	r2, #135	; 0x87
 80008d8:	04d2      	lsls	r2, r2, #19
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	4b93      	ldr	r3, [pc, #588]	; (8000b2c <writecmddata+0x35c>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0412      	lsls	r2, r2, #16
 80008e2:	619a      	str	r2, [r3, #24]
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	025a      	lsls	r2, r3, #9
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	401a      	ands	r2, r3
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0219      	lsls	r1, r3, #8
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	400b      	ands	r3, r1
 80008fc:	431a      	orrs	r2, r3
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0059      	lsls	r1, r3, #1
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	400b      	ands	r3, r1
 800090a:	431a      	orrs	r2, r3
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	619a      	str	r2, [r3, #24]
 8000912:	0020      	movs	r0, r4
 8000914:	183b      	adds	r3, r7, r0
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2208      	movs	r2, #8
 800091a:	401a      	ands	r2, r3
 800091c:	183b      	adds	r3, r7, r0
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2120      	movs	r1, #32
 8000924:	400b      	ands	r3, r1
 8000926:	431a      	orrs	r2, r3
 8000928:	183b      	adds	r3, r7, r0
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	105b      	asrs	r3, r3, #1
 800092e:	2110      	movs	r1, #16
 8000930:	400b      	ands	r3, r1
 8000932:	431a      	orrs	r2, r3
 8000934:	183b      	adds	r3, r7, r0
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	0119      	lsls	r1, r3, #4
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	400b      	ands	r3, r1
 8000940:	431a      	orrs	r2, r3
 8000942:	4b79      	ldr	r3, [pc, #484]	; (8000b28 <writecmddata+0x358>)
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	183b      	adds	r3, r7, r0
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0019      	movs	r1, r3
 800094e:	4b77      	ldr	r3, [pc, #476]	; (8000b2c <writecmddata+0x35c>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	400a      	ands	r2, r1
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	2390      	movs	r3, #144	; 0x90
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	0018      	movs	r0, r3
 8000960:	f002 fd9e 	bl	80034a0 <HAL_GPIO_WritePin>
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2201      	movs	r2, #1
 800096a:	2102      	movs	r1, #2
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fd97 	bl	80034a0 <HAL_GPIO_WritePin>
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2201      	movs	r2, #1
 8000978:	2102      	movs	r1, #2
 800097a:	0018      	movs	r0, r3
 800097c:	f002 fd90 	bl	80034a0 <HAL_GPIO_WritePin>
 8000980:	2390      	movs	r3, #144	; 0x90
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fd89 	bl	80034a0 <HAL_GPIO_WritePin>
    WriteData(dat);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29a      	uxth	r2, r3
 8000996:	210d      	movs	r1, #13
 8000998:	187b      	adds	r3, r7, r1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	240c      	movs	r4, #12
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	1d3a      	adds	r2, r7, #4
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	2390      	movs	r3, #144	; 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	22e0      	movs	r2, #224	; 0xe0
 80009ac:	04d2      	lsls	r2, r2, #19
 80009ae:	619a      	str	r2, [r3, #24]
 80009b0:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <writecmddata+0x358>)
 80009b2:	2287      	movs	r2, #135	; 0x87
 80009b4:	04d2      	lsls	r2, r2, #19
 80009b6:	619a      	str	r2, [r3, #24]
 80009b8:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <writecmddata+0x35c>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	0412      	lsls	r2, r2, #16
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	0008      	movs	r0, r1
 80009c2:	183b      	adds	r3, r7, r0
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	025a      	lsls	r2, r3, #9
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	401a      	ands	r2, r3
 80009ce:	183b      	adds	r3, r7, r0
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0219      	lsls	r1, r3, #8
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	400b      	ands	r3, r1
 80009da:	431a      	orrs	r2, r3
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	0059      	lsls	r1, r3, #1
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	400b      	ands	r3, r1
 80009e8:	431a      	orrs	r2, r3
 80009ea:	2390      	movs	r3, #144	; 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	619a      	str	r2, [r3, #24]
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2208      	movs	r2, #8
 80009f6:	401a      	ands	r2, r3
 80009f8:	183b      	adds	r3, r7, r0
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2120      	movs	r1, #32
 8000a00:	400b      	ands	r3, r1
 8000a02:	431a      	orrs	r2, r3
 8000a04:	183b      	adds	r3, r7, r0
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	105b      	asrs	r3, r3, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	183b      	adds	r3, r7, r0
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0119      	lsls	r1, r3, #4
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <writecmddata+0x358>)
 8000a20:	619a      	str	r2, [r3, #24]
 8000a22:	183b      	adds	r3, r7, r0
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	019b      	lsls	r3, r3, #6
 8000a28:	0019      	movs	r1, r3
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <writecmddata+0x35c>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	400a      	ands	r2, r1
 8000a30:	619a      	str	r2, [r3, #24]
 8000a32:	2390      	movs	r3, #144	; 0x90
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fd30 	bl	80034a0 <HAL_GPIO_WritePin>
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fd29 	bl	80034a0 <HAL_GPIO_WritePin>
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2201      	movs	r2, #1
 8000a54:	2102      	movs	r1, #2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fd22 	bl	80034a0 <HAL_GPIO_WritePin>
 8000a5c:	2390      	movs	r3, #144	; 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	22e0      	movs	r2, #224	; 0xe0
 8000a62:	04d2      	lsls	r2, r2, #19
 8000a64:	619a      	str	r2, [r3, #24]
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <writecmddata+0x358>)
 8000a68:	2287      	movs	r2, #135	; 0x87
 8000a6a:	04d2      	lsls	r2, r2, #19
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <writecmddata+0x35c>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	0412      	lsls	r2, r2, #16
 8000a74:	619a      	str	r2, [r3, #24]
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	025a      	lsls	r2, r3, #9
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	401a      	ands	r2, r3
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0219      	lsls	r1, r3, #8
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0059      	lsls	r1, r3, #1
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	619a      	str	r2, [r3, #24]
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	401a      	ands	r2, r3
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	183b      	adds	r3, r7, r0
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	183b      	adds	r3, r7, r0
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0119      	lsls	r1, r3, #4
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <writecmddata+0x358>)
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	183b      	adds	r3, r7, r0
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	0019      	movs	r1, r3
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <writecmddata+0x35c>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2200      	movs	r2, #0
 8000aee:	2102      	movs	r1, #2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 fcd5 	bl	80034a0 <HAL_GPIO_WritePin>
 8000af6:	2390      	movs	r3, #144	; 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2201      	movs	r2, #1
 8000afc:	2102      	movs	r1, #2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fcce 	bl	80034a0 <HAL_GPIO_WritePin>
 8000b04:	2390      	movs	r3, #144	; 0x90
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fcc7 	bl	80034a0 <HAL_GPIO_WritePin>
    CS_IDLE;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <writecmddata+0x358>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fcc1 	bl	80034a0 <HAL_GPIO_WritePin>
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b005      	add	sp, #20
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800

08000b30 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	603a      	str	r2, [r7, #0]
 8000b38:	1dbb      	adds	r3, r7, #6
 8000b3a:	1c02      	adds	r2, r0, #0
 8000b3c:	801a      	strh	r2, [r3, #0]
 8000b3e:	1d7b      	adds	r3, r7, #5
 8000b40:	1c0a      	adds	r2, r1, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    CS_ACTIVE;
 8000b44:	4ba6      	ldr	r3, [pc, #664]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 fca8 	bl	80034a0 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000b50:	2390      	movs	r3, #144	; 0x90
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 fca1 	bl	80034a0 <HAL_GPIO_WritePin>
 8000b5e:	1dbb      	adds	r3, r7, #6
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	210f      	movs	r1, #15
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	240e      	movs	r4, #14
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	1dba      	adds	r2, r7, #6
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	2390      	movs	r3, #144	; 0x90
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	22e0      	movs	r2, #224	; 0xe0
 8000b7c:	04d2      	lsls	r2, r2, #19
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	4b97      	ldr	r3, [pc, #604]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000b82:	2287      	movs	r2, #135	; 0x87
 8000b84:	04d2      	lsls	r2, r2, #19
 8000b86:	619a      	str	r2, [r3, #24]
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	0412      	lsls	r2, r2, #16
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	0008      	movs	r0, r1
 8000b92:	183b      	adds	r3, r7, r0
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	025a      	lsls	r2, r3, #9
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	183b      	adds	r3, r7, r0
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0219      	lsls	r1, r3, #8
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	400b      	ands	r3, r1
 8000baa:	431a      	orrs	r2, r3
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	0059      	lsls	r1, r3, #1
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	2390      	movs	r3, #144	; 0x90
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	619a      	str	r2, [r3, #24]
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	183b      	adds	r3, r7, r0
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	105b      	asrs	r3, r3, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	0119      	lsls	r1, r3, #4
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	400b      	ands	r3, r1
 8000bec:	431a      	orrs	r2, r3
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000bf0:	619a      	str	r2, [r3, #24]
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	4b7a      	ldr	r3, [pc, #488]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	400a      	ands	r2, r1
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	2390      	movs	r3, #144	; 0x90
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	2200      	movs	r2, #0
 8000c08:	2102      	movs	r1, #2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fc48 	bl	80034a0 <HAL_GPIO_WritePin>
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2201      	movs	r2, #1
 8000c16:	2102      	movs	r1, #2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fc41 	bl	80034a0 <HAL_GPIO_WritePin>
 8000c1e:	2390      	movs	r3, #144	; 0x90
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2201      	movs	r2, #1
 8000c24:	2102      	movs	r1, #2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 fc3a 	bl	80034a0 <HAL_GPIO_WritePin>
 8000c2c:	2390      	movs	r3, #144	; 0x90
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	22e0      	movs	r2, #224	; 0xe0
 8000c32:	04d2      	lsls	r2, r2, #19
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	4b6a      	ldr	r3, [pc, #424]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000c38:	2287      	movs	r2, #135	; 0x87
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	619a      	str	r2, [r3, #24]
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	0412      	lsls	r2, r2, #16
 8000c44:	619a      	str	r2, [r3, #24]
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	025a      	lsls	r2, r3, #9
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	401a      	ands	r2, r3
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0219      	lsls	r1, r3, #8
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0059      	lsls	r1, r3, #1
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	0020      	movs	r0, r4
 8000c76:	183b      	adds	r3, r7, r0
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	183b      	adds	r3, r7, r0
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2120      	movs	r1, #32
 8000c86:	400b      	ands	r3, r1
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	183b      	adds	r3, r7, r0
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	105b      	asrs	r3, r3, #1
 8000c90:	2110      	movs	r1, #16
 8000c92:	400b      	ands	r3, r1
 8000c94:	431a      	orrs	r2, r3
 8000c96:	183b      	adds	r3, r7, r0
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0119      	lsls	r1, r3, #4
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	400b      	ands	r3, r1
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	183b      	adds	r3, r7, r0
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	0019      	movs	r1, r3
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f002 fbed 	bl	80034a0 <HAL_GPIO_WritePin>
 8000cc6:	2390      	movs	r3, #144	; 0x90
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 fbe6 	bl	80034a0 <HAL_GPIO_WritePin>
 8000cd4:	2390      	movs	r3, #144	; 0x90
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f002 fbdf 	bl	80034a0 <HAL_GPIO_WritePin>
 8000ce2:	2390      	movs	r3, #144	; 0x90
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2110      	movs	r1, #16
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 fbd8 	bl	80034a0 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000cf0:	e061      	b.n	8000db6 <WriteCmdParamN+0x286>
        uint8_t u8 = *block++;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	603a      	str	r2, [r7, #0]
 8000cf8:	210d      	movs	r1, #13
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	7013      	strb	r3, [r2, #0]
        write8(u8);
 8000d00:	2390      	movs	r3, #144	; 0x90
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	22e0      	movs	r2, #224	; 0xe0
 8000d06:	04d2      	lsls	r2, r2, #19
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000d0c:	2287      	movs	r2, #135	; 0x87
 8000d0e:	04d2      	lsls	r2, r2, #19
 8000d10:	619a      	str	r2, [r3, #24]
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0412      	lsls	r2, r2, #16
 8000d18:	619a      	str	r2, [r3, #24]
 8000d1a:	0008      	movs	r0, r1
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	025a      	lsls	r2, r3, #9
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	401a      	ands	r2, r3
 8000d28:	183b      	adds	r3, r7, r0
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	0219      	lsls	r1, r3, #8
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	400b      	ands	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	183b      	adds	r3, r7, r0
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0059      	lsls	r1, r3, #1
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	400b      	ands	r3, r1
 8000d42:	431a      	orrs	r2, r3
 8000d44:	2390      	movs	r3, #144	; 0x90
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2208      	movs	r2, #8
 8000d50:	401a      	ands	r2, r3
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	105b      	asrs	r3, r3, #1
 8000d64:	2110      	movs	r1, #16
 8000d66:	400b      	ands	r3, r1
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0119      	lsls	r1, r3, #4
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	400b      	ands	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000d7a:	619a      	str	r2, [r3, #24]
 8000d7c:	183b      	adds	r3, r7, r0
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	0019      	movs	r1, r3
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <WriteCmdParamN+0x2b4>)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	400a      	ands	r2, r1
 8000d8a:	619a      	str	r2, [r3, #24]
 8000d8c:	2390      	movs	r3, #144	; 0x90
 8000d8e:	05db      	lsls	r3, r3, #23
 8000d90:	2200      	movs	r2, #0
 8000d92:	2102      	movs	r1, #2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 fb83 	bl	80034a0 <HAL_GPIO_WritePin>
 8000d9a:	2390      	movs	r3, #144	; 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2102      	movs	r1, #2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fb7c 	bl	80034a0 <HAL_GPIO_WritePin>
 8000da8:	2390      	movs	r3, #144	; 0x90
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	2201      	movs	r2, #1
 8000dae:	2102      	movs	r1, #2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f002 fb75 	bl	80034a0 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000db6:	1d7b      	adds	r3, r7, #5
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	b2d1      	uxtb	r1, r2
 8000dc2:	1d7a      	adds	r2, r7, #5
 8000dc4:	7011      	strb	r1, [r2, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	dc93      	bgt.n	8000cf2 <WriteCmdParamN+0x1c2>
    }
    CS_IDLE;
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <WriteCmdParamN+0x2b0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 fb65 	bl	80034a0 <HAL_GPIO_WritePin>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	48000400 	.word	0x48000400
 8000de4:	48000800 	.word	0x48000800

08000de8 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0005      	movs	r5, r0
 8000df0:	000c      	movs	r4, r1
 8000df2:	0010      	movs	r0, r2
 8000df4:	0019      	movs	r1, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	1c2a      	adds	r2, r5, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	1c22      	adds	r2, r4, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	1d7b      	adds	r3, r7, #5
 8000e04:	1c02      	adds	r2, r0, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	1c0a      	adds	r2, r1, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000e0e:	210c      	movs	r1, #12
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	1dba      	adds	r2, r7, #6
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	1d7a      	adds	r2, r7, #5
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	705a      	strb	r2, [r3, #1]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	709a      	strb	r2, [r3, #2]
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	70da      	strb	r2, [r3, #3]
    WriteCmdParamN(cmd, 4, d);
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	187a      	adds	r2, r7, r1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fe77 	bl	8000b30 <WriteCmdParamN>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}

08000e4a <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8000e4a:	b590      	push	{r4, r7, lr}
 8000e4c:	b08b      	sub	sp, #44	; 0x2c
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	000a      	movs	r2, r1
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	801a      	strh	r2, [r3, #0]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000e5c:	e050      	b.n	8000f00 <init_table+0xb6>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	627a      	str	r2, [r7, #36]	; 0x24
 8000e64:	2121      	movs	r1, #33	; 0x21
 8000e66:	187a      	adds	r2, r7, r1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	7013      	strb	r3, [r2, #0]
        uint8_t len = pgm_read_byte(p++);
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	627a      	str	r2, [r7, #36]	; 0x24
 8000e72:	2223      	movs	r2, #35	; 0x23
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	7013      	strb	r3, [r2, #0]
        if (cmd == TFTLCD_DELAY8)
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e80:	d109      	bne.n	8000e96 <init_table+0x4c>
        {
            delay(len);
 8000e82:	2423      	movs	r4, #35	; 0x23
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fbad 	bl	80005e8 <delay>
            len = 0;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e028      	b.n	8000ee8 <init_table+0x9e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000e96:	2322      	movs	r3, #34	; 0x22
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e00e      	b.n	8000ebe <init_table+0x74>
                dat[i] = pgm_read_byte(p++);
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8000ea6:	2022      	movs	r0, #34	; 0x22
 8000ea8:	183a      	adds	r2, r7, r0
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	7819      	ldrb	r1, [r3, #0]
 8000eae:	2308      	movs	r3, #8
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	5499      	strb	r1, [r3, r2]
            for (uint8_t i = 0; i < len; i++)
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	183b      	adds	r3, r7, r0
 8000eba:	3201      	adds	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	2322      	movs	r3, #34	; 0x22
 8000ec0:	18fa      	adds	r2, r7, r3
 8000ec2:	2323      	movs	r3, #35	; 0x23
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3e8      	bcc.n	8000ea0 <init_table+0x56>
            WriteCmdParamN(cmd, len, dat);
 8000ece:	2321      	movs	r3, #33	; 0x21
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b298      	uxth	r0, r3
 8000ed6:	2323      	movs	r3, #35	; 0x23
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	2208      	movs	r2, #8
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	f7ff fe24 	bl	8000b30 <WriteCmdParamN>
        }
        size -= len + 2;
 8000ee8:	1cbb      	adds	r3, r7, #2
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	2323      	movs	r3, #35	; 0x23
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	1cbb      	adds	r3, r7, #2
 8000efe:	801a      	strh	r2, [r3, #0]
    while (size > 0)
 8000f00:	1cbb      	adds	r3, r7, #2
 8000f02:	2200      	movs	r2, #0
 8000f04:	5e9b      	ldrsh	r3, [r3, r2]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	dca9      	bgt.n	8000e5e <init_table+0x14>
    }
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b00b      	add	sp, #44	; 0x2c
 8000f10:	bd90      	pop	{r4, r7, pc}
	...

08000f14 <reset>:

void reset(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <reset+0x7c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000f1e:	f7ff fc1b 	bl	8000758 <setWriteDir>
    CS_IDLE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <reset+0x80>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	2101      	movs	r1, #1
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f002 fab9 	bl	80034a0 <HAL_GPIO_WritePin>
    RD_IDLE;
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 fab2 	bl	80034a0 <HAL_GPIO_WritePin>
    WR_IDLE;
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	2201      	movs	r2, #1
 8000f42:	2102      	movs	r1, #2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f002 faab 	bl	80034a0 <HAL_GPIO_WritePin>
    RESET_IDLE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <reset+0x84>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2102      	movs	r1, #2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 faa5 	bl	80034a0 <HAL_GPIO_WritePin>
    delay(50);
 8000f56:	2032      	movs	r0, #50	; 0x32
 8000f58:	f7ff fb46 	bl	80005e8 <delay>
    RESET_ACTIVE;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <reset+0x84>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fa9c 	bl	80034a0 <HAL_GPIO_WritePin>
    delay(100);
 8000f68:	2064      	movs	r0, #100	; 0x64
 8000f6a:	f7ff fb3d 	bl	80005e8 <delay>
    RESET_IDLE;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <reset+0x84>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	2102      	movs	r1, #2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f002 fa93 	bl	80034a0 <HAL_GPIO_WritePin>
    delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f7ff fb34 	bl	80005e8 <delay>
	WriteCmdData(0xB0, 0x0000);
 8000f80:	2100      	movs	r1, #0
 8000f82:	20b0      	movs	r0, #176	; 0xb0
 8000f84:	f7ff fb96 	bl	80006b4 <WriteCmdData>
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	2000002e 	.word	0x2000002e
 8000f94:	48000400 	.word	0x48000400
 8000f98:	48000800 	.word	0x48000800

08000f9c <read16bits>:

static uint16_t read16bits(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000fa2:	2390      	movs	r3, #144	; 0x90
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2101      	movs	r1, #1
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fa78 	bl	80034a0 <HAL_GPIO_WritePin>
 8000fb0:	2390      	movs	r3, #144	; 0x90
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fa71 	bl	80034a0 <HAL_GPIO_WritePin>
 8000fbe:	2390      	movs	r3, #144	; 0x90
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 fa6a 	bl	80034a0 <HAL_GPIO_WritePin>
 8000fcc:	2390      	movs	r3, #144	; 0x90
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f002 fa63 	bl	80034a0 <HAL_GPIO_WritePin>
 8000fda:	2390      	movs	r3, #144	; 0x90
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	0a5b      	lsrs	r3, r3, #9
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b69      	ldr	r3, [pc, #420]	; (8001190 <read16bits+0x1f4>)
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	099b      	lsrs	r3, r3, #6
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	2390      	movs	r3, #144	; 0x90
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	2104      	movs	r1, #4
 8001008:	400b      	ands	r3, r1
 800100a:	b29b      	uxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b60      	ldr	r3, [pc, #384]	; (8001194 <read16bits+0x1f8>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	b29b      	uxth	r3, r3
 8001016:	2108      	movs	r1, #8
 8001018:	400b      	ands	r3, r1
 800101a:	b29b      	uxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <read16bits+0x1f8>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	2110      	movs	r1, #16
 800102a:	400b      	ands	r3, r1
 800102c:	b29b      	uxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b58      	ldr	r3, [pc, #352]	; (8001194 <read16bits+0x1f8>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	b29b      	uxth	r3, r3
 8001038:	18db      	adds	r3, r3, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	2120      	movs	r1, #32
 800103e:	400b      	ands	r3, r1
 8001040:	b29b      	uxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <read16bits+0x1f8>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	b29b      	uxth	r3, r3
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	400b      	ands	r3, r1
 8001052:	b29b      	uxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b299      	uxth	r1, r3
 8001058:	2390      	movs	r3, #144	; 0x90
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	085b      	lsrs	r3, r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	4013      	ands	r3, r2
 8001066:	b29a      	uxth	r2, r3
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	430a      	orrs	r2, r1
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	2390      	movs	r3, #144	; 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f002 fa12 	bl	80034a0 <HAL_GPIO_WritePin>
 800107c:	2390      	movs	r3, #144	; 0x90
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	2201      	movs	r2, #1
 8001082:	2101      	movs	r1, #1
 8001084:	0018      	movs	r0, r3
 8001086:	f002 fa0b 	bl	80034a0 <HAL_GPIO_WritePin>
    READ_8(lo);
 800108a:	2390      	movs	r3, #144	; 0x90
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	2201      	movs	r2, #1
 8001090:	2101      	movs	r1, #1
 8001092:	0018      	movs	r0, r3
 8001094:	f002 fa04 	bl	80034a0 <HAL_GPIO_WritePin>
 8001098:	2390      	movs	r3, #144	; 0x90
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2200      	movs	r2, #0
 800109e:	2101      	movs	r1, #1
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 f9fd 	bl	80034a0 <HAL_GPIO_WritePin>
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	2200      	movs	r2, #0
 80010ac:	2101      	movs	r1, #1
 80010ae:	0018      	movs	r0, r3
 80010b0:	f002 f9f6 	bl	80034a0 <HAL_GPIO_WritePin>
 80010b4:	2390      	movs	r3, #144	; 0x90
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f9ef 	bl	80034a0 <HAL_GPIO_WritePin>
 80010c2:	2390      	movs	r3, #144	; 0x90
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	0a5b      	lsrs	r3, r3, #9
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2201      	movs	r2, #1
 80010ce:	4013      	ands	r3, r2
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <read16bits+0x1f4>)
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	099b      	lsrs	r3, r3, #6
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2102      	movs	r1, #2
 80010dc:	400b      	ands	r3, r1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	2390      	movs	r3, #144	; 0x90
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2104      	movs	r1, #4
 80010f0:	400b      	ands	r3, r1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <read16bits+0x1f8>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2108      	movs	r1, #8
 8001100:	400b      	ands	r3, r1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <read16bits+0x1f8>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2110      	movs	r1, #16
 8001112:	400b      	ands	r3, r1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <read16bits+0x1f8>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	18db      	adds	r3, r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2120      	movs	r1, #32
 8001126:	400b      	ands	r3, r1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <read16bits+0x1f8>)
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	400b      	ands	r3, r1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2d9      	uxtb	r1, r3
 8001140:	2390      	movs	r3, #144	; 0x90
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	227f      	movs	r2, #127	; 0x7f
 800114c:	4393      	bics	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	1d7b      	adds	r3, r7, #5
 8001152:	430a      	orrs	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	2390      	movs	r3, #144	; 0x90
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	2201      	movs	r2, #1
 800115c:	2101      	movs	r1, #1
 800115e:	0018      	movs	r0, r3
 8001160:	f002 f99e 	bl	80034a0 <HAL_GPIO_WritePin>
 8001164:	2390      	movs	r3, #144	; 0x90
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	0018      	movs	r0, r3
 800116e:	f002 f997 	bl	80034a0 <HAL_GPIO_WritePin>
    return (ret << 8) | lo;
 8001172:	1dbb      	adds	r3, r7, #6
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	1d7b      	adds	r3, r7, #5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	b29b      	uxth	r3, r3
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	48000800 	.word	0x48000800
 8001194:	48000400 	.word	0x48000400

08001198 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	0002      	movs	r2, r0
 80011a0:	1dbb      	adds	r3, r7, #6
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	1d7b      	adds	r3, r7, #5
 80011a6:	1c0a      	adds	r2, r1, #0
 80011a8:	701a      	strb	r2, [r3, #0]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80011aa:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <readReg+0x220>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <readReg+0x1e>
        reset();
 80011b2:	f7ff feaf 	bl	8000f14 <reset>
    CS_ACTIVE;
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <readReg+0x224>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	0018      	movs	r0, r3
 80011be:	f002 f96f 	bl	80034a0 <HAL_GPIO_WritePin>
    WriteCmd(reg);
 80011c2:	2390      	movs	r3, #144	; 0x90
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 f968 	bl	80034a0 <HAL_GPIO_WritePin>
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	210f      	movs	r1, #15
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	240e      	movs	r4, #14
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	1dba      	adds	r2, r7, #6
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	2390      	movs	r3, #144	; 0x90
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	22e0      	movs	r2, #224	; 0xe0
 80011ee:	04d2      	lsls	r2, r2, #19
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <readReg+0x224>)
 80011f4:	2287      	movs	r2, #135	; 0x87
 80011f6:	04d2      	lsls	r2, r2, #19
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <readReg+0x228>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0412      	lsls	r2, r2, #16
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	0008      	movs	r0, r1
 8001204:	183b      	adds	r3, r7, r0
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	025a      	lsls	r2, r3, #9
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	401a      	ands	r2, r3
 8001210:	183b      	adds	r3, r7, r0
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	0219      	lsls	r1, r3, #8
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	400b      	ands	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	183b      	adds	r3, r7, r0
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0059      	lsls	r1, r3, #1
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	400b      	ands	r3, r1
 800122a:	431a      	orrs	r2, r3
 800122c:	2390      	movs	r3, #144	; 0x90
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	183b      	adds	r3, r7, r0
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2208      	movs	r2, #8
 8001238:	401a      	ands	r2, r3
 800123a:	183b      	adds	r3, r7, r0
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2120      	movs	r1, #32
 8001242:	400b      	ands	r3, r1
 8001244:	431a      	orrs	r2, r3
 8001246:	183b      	adds	r3, r7, r0
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	105b      	asrs	r3, r3, #1
 800124c:	2110      	movs	r1, #16
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	183b      	adds	r3, r7, r0
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0119      	lsls	r1, r3, #4
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	400b      	ands	r3, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <readReg+0x224>)
 8001262:	619a      	str	r2, [r3, #24]
 8001264:	183b      	adds	r3, r7, r0
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	0019      	movs	r1, r3
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <readReg+0x228>)
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	400a      	ands	r2, r1
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	2390      	movs	r3, #144	; 0x90
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2200      	movs	r2, #0
 800127a:	2102      	movs	r1, #2
 800127c:	0018      	movs	r0, r3
 800127e:	f002 f90f 	bl	80034a0 <HAL_GPIO_WritePin>
 8001282:	2390      	movs	r3, #144	; 0x90
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	2201      	movs	r2, #1
 8001288:	2102      	movs	r1, #2
 800128a:	0018      	movs	r0, r3
 800128c:	f002 f908 	bl	80034a0 <HAL_GPIO_WritePin>
 8001290:	2390      	movs	r3, #144	; 0x90
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2201      	movs	r2, #1
 8001296:	2102      	movs	r1, #2
 8001298:	0018      	movs	r0, r3
 800129a:	f002 f901 	bl	80034a0 <HAL_GPIO_WritePin>
 800129e:	2390      	movs	r3, #144	; 0x90
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	22e0      	movs	r2, #224	; 0xe0
 80012a4:	04d2      	lsls	r2, r2, #19
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	4b44      	ldr	r3, [pc, #272]	; (80013bc <readReg+0x224>)
 80012aa:	2287      	movs	r2, #135	; 0x87
 80012ac:	04d2      	lsls	r2, r2, #19
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <readReg+0x228>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0412      	lsls	r2, r2, #16
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	025a      	lsls	r2, r3, #9
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	401a      	ands	r2, r3
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	0219      	lsls	r1, r3, #8
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	400b      	ands	r3, r1
 80012d0:	431a      	orrs	r2, r3
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0059      	lsls	r1, r3, #1
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	400b      	ands	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	2390      	movs	r3, #144	; 0x90
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	0020      	movs	r0, r4
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2208      	movs	r2, #8
 80012ee:	401a      	ands	r2, r3
 80012f0:	183b      	adds	r3, r7, r0
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2120      	movs	r1, #32
 80012f8:	400b      	ands	r3, r1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	2110      	movs	r1, #16
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	183b      	adds	r3, r7, r0
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	0119      	lsls	r1, r3, #4
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	400b      	ands	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <readReg+0x224>)
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	183b      	adds	r3, r7, r0
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	019b      	lsls	r3, r3, #6
 8001320:	0019      	movs	r1, r3
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <readReg+0x228>)
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	400a      	ands	r2, r1
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	2390      	movs	r3, #144	; 0x90
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	0018      	movs	r0, r3
 8001334:	f002 f8b4 	bl	80034a0 <HAL_GPIO_WritePin>
 8001338:	2390      	movs	r3, #144	; 0x90
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	2201      	movs	r2, #1
 800133e:	2102      	movs	r1, #2
 8001340:	0018      	movs	r0, r3
 8001342:	f002 f8ad 	bl	80034a0 <HAL_GPIO_WritePin>
 8001346:	2390      	movs	r3, #144	; 0x90
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	2201      	movs	r2, #1
 800134c:	2102      	movs	r1, #2
 800134e:	0018      	movs	r0, r3
 8001350:	f002 f8a6 	bl	80034a0 <HAL_GPIO_WritePin>
 8001354:	2390      	movs	r3, #144	; 0x90
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	0018      	movs	r0, r3
 800135e:	f002 f89f 	bl	80034a0 <HAL_GPIO_WritePin>
    setReadDir();
 8001362:	f7ff f9bd 	bl	80006e0 <setReadDir>
    delay(1);    //1us should be adequate
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff f93e 	bl	80005e8 <delay>

    do { ret = read16bits(); }while (--index >= 0);
 800136c:	230c      	movs	r3, #12
 800136e:	18fc      	adds	r4, r7, r3
 8001370:	f7ff fe14 	bl	8000f9c <read16bits>
 8001374:	0003      	movs	r3, r0
 8001376:	8023      	strh	r3, [r4, #0]
 8001378:	1d7b      	adds	r3, r7, #5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	1d7b      	adds	r3, r7, #5
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	1d7b      	adds	r3, r7, #5
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b7f      	cmp	r3, #127	; 0x7f
 800138a:	d9ef      	bls.n	800136c <readReg+0x1d4>
    RD_IDLE;
 800138c:	2390      	movs	r3, #144	; 0x90
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	0018      	movs	r0, r3
 8001396:	f002 f883 	bl	80034a0 <HAL_GPIO_WritePin>
    CS_IDLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <readReg+0x224>)
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 f87d 	bl	80034a0 <HAL_GPIO_WritePin>
    setWriteDir();
 80013a6:	f7ff f9d7 	bl	8000758 <setWriteDir>
    return ret;
 80013aa:	230c      	movs	r3, #12
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	881b      	ldrh	r3, [r3, #0]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b005      	add	sp, #20
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	2000002e 	.word	0x2000002e
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000800 	.word	0x48000800

080013c4 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	0002      	movs	r2, r0
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	801a      	strh	r2, [r3, #0]
    uint16_t h = readReg(reg, 0);
 80013d0:	250e      	movs	r5, #14
 80013d2:	197c      	adds	r4, r7, r5
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2100      	movs	r1, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fedc 	bl	8001198 <readReg>
 80013e0:	0003      	movs	r3, r0
 80013e2:	8023      	strh	r3, [r4, #0]
    uint16_t l = readReg(reg, 1);
 80013e4:	260c      	movs	r6, #12
 80013e6:	19bc      	adds	r4, r7, r6
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fed2 	bl	8001198 <readReg>
 80013f4:	0003      	movs	r3, r0
 80013f6:	8023      	strh	r3, [r4, #0]
    return ((uint32_t) h << 16) | (l);
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	19bb      	adds	r3, r7, r6
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4313      	orrs	r3, r2
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b005      	add	sp, #20
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800140c <tft_init>:
    uint16_t l = readReg(reg, 2);
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
}

void tft_init(uint16_t ID)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	0002      	movs	r2, r0
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	801a      	strh	r2, [r3, #0]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    int16_t table_size;
    _lcd_xor = 0;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <tft_init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	801a      	strh	r2, [r3, #0]

    _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <tft_init+0x9c>)
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <tft_init+0xa0>)
 8001426:	801a      	strh	r2, [r3, #0]
		0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B]
		// 3.2 TM  3.2 Inch Initial Code not bad
		0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00,
		0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,
	};
	table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <tft_init+0xa4>)
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	2312      	movs	r3, #18
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	223b      	movs	r2, #59	; 0x3b
 8001432:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_height;
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <tft_init+0xa8>)
 8001436:	60fb      	str	r3, [r7, #12]
	*p16 = 320;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	22a0      	movs	r2, #160	; 0xa0
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_width;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <tft_init+0xac>)
 8001442:	60fb      	str	r3, [r7, #12]
	*p16 = 480;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	22f0      	movs	r2, #240	; 0xf0
 8001448:	0052      	lsls	r2, r2, #1
 800144a:	801a      	strh	r2, [r3, #0]

    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <tft_init+0x9c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	001a      	movs	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	4013      	ands	r3, r2
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	4193      	sbcs	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <tft_init+0xb0>)
 8001462:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <tft_init+0x84>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <tft_init+0xb4>)
 800146c:	2109      	movs	r1, #9
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fceb 	bl	8000e4a <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001474:	2312      	movs	r3, #18
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	5e9a      	ldrsh	r2, [r3, r2]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	0011      	movs	r1, r2
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fce2 	bl	8000e4a <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <tft_init+0xb8>)
 8001488:	2106      	movs	r1, #6
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fcdd 	bl	8000e4a <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f829 	bl	80014e8 <setRotation>
    invertDisplay(false);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 fb9c 	bl	8001bd4 <invertDisplay>
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b006      	add	sp, #24
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000008c 	.word	0x2000008c
 80014a8:	2000007c 	.word	0x2000007c
 80014ac:	00000403 	.word	0x00000403
 80014b0:	080044d8 	.word	0x080044d8
 80014b4:	20000006 	.word	0x20000006
 80014b8:	20000004 	.word	0x20000004
 80014bc:	20000080 	.word	0x20000080
 80014c0:	08004514 	.word	0x08004514
 80014c4:	08004520 	.word	0x08004520

080014c8 <readID>:

uint16_t readID(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
    uint16_t ret = readReg32(0xD3);
 80014ce:	20d3      	movs	r0, #211	; 0xd3
 80014d0:	f7ff ff78 	bl	80013c4 <readReg32>
 80014d4:	0002      	movs	r2, r0
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	801a      	strh	r2, [r3, #0]
    return ret;
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	881b      	ldrh	r3, [r3, #0]
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <setRotation>:
        setAddrWindow(0, 0, width() - 1, height() - 1);
    return 0;
}

void setRotation(uint8_t r)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	0002      	movs	r2, r0
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	701a      	strb	r2, [r3, #0]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80014f4:	2314      	movs	r3, #20
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	4aa3      	ldr	r2, [pc, #652]	; (8001788 <setRotation+0x2a0>)
 80014fa:	8812      	ldrh	r2, [r2, #0]
 80014fc:	801a      	strh	r2, [r3, #0]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2203      	movs	r2, #3
 8001504:	4013      	ands	r3, r2
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4ba0      	ldr	r3, [pc, #640]	; (800178c <setRotation+0x2a4>)
 800150a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 800150c:	4b9f      	ldr	r3, [pc, #636]	; (800178c <setRotation+0x2a4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	001a      	movs	r2, r3
 8001512:	2301      	movs	r3, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d002      	beq.n	800151e <setRotation+0x36>
 8001518:	23f0      	movs	r3, #240	; 0xf0
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	e001      	b.n	8001522 <setRotation+0x3a>
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <setRotation+0x2a8>)
 8001524:	8013      	strh	r3, [r2, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8001526:	4b99      	ldr	r3, [pc, #612]	; (800178c <setRotation+0x2a4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001a      	movs	r2, r3
 800152c:	2301      	movs	r3, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d002      	beq.n	8001538 <setRotation+0x50>
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	e001      	b.n	800153c <setRotation+0x54>
 8001538:	23f0      	movs	r3, #240	; 0xf0
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4a95      	ldr	r2, [pc, #596]	; (8001794 <setRotation+0x2ac>)
 800153e:	8013      	strh	r3, [r2, #0]
   switch (rotation) {
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <setRotation+0x2a4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d00d      	beq.n	8001564 <setRotation+0x7c>
 8001548:	dc02      	bgt.n	8001550 <setRotation+0x68>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <setRotation+0x72>
 800154e:	e018      	b.n	8001582 <setRotation+0x9a>
 8001550:	2b02      	cmp	r3, #2
 8001552:	d00c      	beq.n	800156e <setRotation+0x86>
 8001554:	2b03      	cmp	r3, #3
 8001556:	d00f      	beq.n	8001578 <setRotation+0x90>
 8001558:	e013      	b.n	8001582 <setRotation+0x9a>
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 800155a:	230d      	movs	r3, #13
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2248      	movs	r2, #72	; 0x48
 8001560:	701a      	strb	r2, [r3, #0]
       break;
 8001562:	e00e      	b.n	8001582 <setRotation+0x9a>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8001564:	230d      	movs	r3, #13
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2228      	movs	r2, #40	; 0x28
 800156a:	701a      	strb	r2, [r3, #0]
       break;
 800156c:	e009      	b.n	8001582 <setRotation+0x9a>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 800156e:	230d      	movs	r3, #13
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2298      	movs	r2, #152	; 0x98
 8001574:	701a      	strb	r2, [r3, #0]
       break;
 8001576:	e004      	b.n	8001582 <setRotation+0x9a>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001578:	230d      	movs	r3, #13
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	22f8      	movs	r2, #248	; 0xf8
 800157e:	701a      	strb	r2, [r3, #0]
       break;
 8001580:	46c0      	nop			; (mov r8, r8)
   }
   if (_lcd_capable & INVERT_GS)
 8001582:	4b85      	ldr	r3, [pc, #532]	; (8001798 <setRotation+0x2b0>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	001a      	movs	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d008      	beq.n	80015a2 <setRotation+0xba>
       val ^= 0x80;
 8001590:	210d      	movs	r1, #13
 8001592:	187b      	adds	r3, r7, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	4252      	negs	r2, r2
 800159a:	4053      	eors	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_SS)
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <setRotation+0x2b0>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	001a      	movs	r2, r3
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d007      	beq.n	80015c0 <setRotation+0xd8>
       val ^= 0x40;
 80015b0:	210d      	movs	r1, #13
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	4053      	eors	r3, r2
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_RGB)
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <setRotation+0x2b0>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	001a      	movs	r2, r3
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d007      	beq.n	80015de <setRotation+0xf6>
       val ^= 0x08;
 80015ce:	210d      	movs	r1, #13
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4053      	eors	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80015de:	4b6e      	ldr	r3, [pc, #440]	; (8001798 <setRotation+0x2b0>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	001a      	movs	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d022      	beq.n	8001630 <setRotation+0x148>
     common_MC:
 80015ea:	46c0      	nop			; (mov r8, r8)
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <setRotation+0x2b4>)
 80015ee:	222a      	movs	r2, #42	; 0x2a
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <setRotation+0x2b8>)
 80015f4:	222b      	movs	r2, #43	; 0x2b
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <setRotation+0x2bc>)
 80015fa:	222c      	movs	r2, #44	; 0x2c
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <setRotation+0x2c0>)
 8001600:	222a      	movs	r2, #42	; 0x2a
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	4b69      	ldr	r3, [pc, #420]	; (80017ac <setRotation+0x2c4>)
 8001606:	222a      	movs	r2, #42	; 0x2a
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <setRotation+0x2c8>)
 800160c:	222b      	movs	r2, #43	; 0x2b
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <setRotation+0x2cc>)
 8001612:	222b      	movs	r2, #43	; 0x2b
 8001614:	801a      	strh	r2, [r3, #0]
     common_BGR:
       WriteCmdParamN(0x36, 1, &val);
 8001616:	240d      	movs	r4, #13
 8001618:	193b      	adds	r3, r7, r4
 800161a:	001a      	movs	r2, r3
 800161c:	2101      	movs	r1, #1
 800161e:	2036      	movs	r0, #54	; 0x36
 8001620:	f7ff fa86 	bl	8000b30 <WriteCmdParamN>
       _lcd_madctl = val;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <setRotation+0x2d0>)
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e05d      	b.n	80016ec <setRotation+0x204>
   }
   else {
	   _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8001630:	4b5a      	ldr	r3, [pc, #360]	; (800179c <setRotation+0x2b4>)
 8001632:	2220      	movs	r2, #32
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <setRotation+0x2b8>)
 8001638:	2221      	movs	r2, #33	; 0x21
 800163a:	801a      	strh	r2, [r3, #0]
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <setRotation+0x2bc>)
 800163e:	2222      	movs	r2, #34	; 0x22
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <setRotation+0x2c0>)
 8001644:	2250      	movs	r2, #80	; 0x50
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <setRotation+0x2c4>)
 800164a:	2251      	movs	r2, #81	; 0x51
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <setRotation+0x2c8>)
 8001650:	2252      	movs	r2, #82	; 0x52
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <setRotation+0x2cc>)
 8001656:	2253      	movs	r2, #83	; 0x53
 8001658:	801a      	strh	r2, [r3, #0]
	   GS = (val & 0x80) ? (1 << 15) : 0;
 800165a:	240d      	movs	r4, #13
 800165c:	193b      	adds	r3, r7, r4
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	2112      	movs	r1, #18
 8001666:	187b      	adds	r3, r7, r1
 8001668:	0bd2      	lsrs	r2, r2, #15
 800166a:	03d2      	lsls	r2, r2, #15
 800166c:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800166e:	187b      	adds	r3, r7, r1
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	229c      	movs	r2, #156	; 0x9c
 8001674:	0192      	lsls	r2, r2, #6
 8001676:	4313      	orrs	r3, r2
 8001678:	b29b      	uxth	r3, r3
 800167a:	0019      	movs	r1, r3
 800167c:	2060      	movs	r0, #96	; 0x60
 800167e:	f7ff f819 	bl	80006b4 <WriteCmdData>
	 common_SS:
	   SS_v = (val & 0x40) ? (1 << 8) : 0;
 8001682:	193b      	adds	r3, r7, r4
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b299      	uxth	r1, r3
 800168a:	2010      	movs	r0, #16
 800168c:	183b      	adds	r3, r7, r0
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	0052      	lsls	r2, r2, #1
 8001692:	400a      	ands	r2, r1
 8001694:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8001696:	183b      	adds	r3, r7, r0
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	0019      	movs	r1, r3
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff f809 	bl	80006b4 <WriteCmdData>
	 common_ORG:
	   ORG = (val & 0x20) ? (1 << 3) : 0;
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	109b      	asrs	r3, r3, #2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	2316      	movs	r3, #22
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2108      	movs	r1, #8
 80016b0:	400a      	ands	r2, r1
 80016b2:	801a      	strh	r2, [r3, #0]
	   if (val & 0x08)
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	001a      	movs	r2, r3
 80016ba:	2308      	movs	r3, #8
 80016bc:	4013      	ands	r3, r2
 80016be:	d007      	beq.n	80016d0 <setRotation+0x1e8>
		   ORG |= 0x1000;  //BGR
 80016c0:	2216      	movs	r2, #22
 80016c2:	18bb      	adds	r3, r7, r2
 80016c4:	18ba      	adds	r2, r7, r2
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	0149      	lsls	r1, r1, #5
 80016cc:	430a      	orrs	r2, r1
 80016ce:	801a      	strh	r2, [r3, #0]
	   _lcd_madctl = ORG | 0x0030;
 80016d0:	2316      	movs	r3, #22
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	4313      	orrs	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <setRotation+0x2d0>)
 80016de:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <setRotation+0x2d0>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	0019      	movs	r1, r3
 80016e6:	2003      	movs	r0, #3
 80016e8:	f7fe ffe4 	bl	80006b4 <WriteCmdData>
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <setRotation+0x2a4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	2301      	movs	r3, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	d02b      	beq.n	8001750 <setRotation+0x268>
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <setRotation+0x2b0>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	001a      	movs	r2, r3
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4013      	ands	r3, r2
 8001704:	d124      	bne.n	8001750 <setRotation+0x268>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8001706:	210e      	movs	r1, #14
 8001708:	187b      	adds	r3, r7, r1
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <setRotation+0x2b4>)
 800170c:	8812      	ldrh	r2, [r2, #0]
 800170e:	801a      	strh	r2, [r3, #0]
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <setRotation+0x2b8>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <setRotation+0x2b4>)
 8001716:	801a      	strh	r2, [r3, #0]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <setRotation+0x2b8>)
 800171a:	187a      	adds	r2, r7, r1
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	801a      	strh	r2, [r3, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001720:	187b      	adds	r3, r7, r1
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <setRotation+0x2c0>)
 8001724:	8812      	ldrh	r2, [r2, #0]
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <setRotation+0x2c8>)
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <setRotation+0x2c0>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <setRotation+0x2c8>)
 8001732:	187a      	adds	r2, r7, r1
 8001734:	8812      	ldrh	r2, [r2, #0]
 8001736:	801a      	strh	r2, [r3, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001738:	187b      	adds	r3, r7, r1
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <setRotation+0x2c4>)
 800173c:	8812      	ldrh	r2, [r2, #0]
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <setRotation+0x2cc>)
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <setRotation+0x2c4>)
 8001746:	801a      	strh	r2, [r3, #0]
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <setRotation+0x2cc>)
 800174a:	187a      	adds	r2, r7, r1
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	801a      	strh	r2, [r3, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8001750:	f7fe ff9c 	bl	800068c <width>
 8001754:	0003      	movs	r3, r0
 8001756:	3b01      	subs	r3, #1
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21c      	sxth	r4, r3
 800175c:	f7fe ffa0 	bl	80006a0 <height>
 8001760:	0003      	movs	r3, r0
 8001762:	3b01      	subs	r3, #1
 8001764:	b29b      	uxth	r3, r3
 8001766:	b21b      	sxth	r3, r3
 8001768:	0022      	movs	r2, r4
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f86d 	bl	800184c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001772:	23f0      	movs	r3, #240	; 0xf0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2200      	movs	r2, #0
 8001778:	0019      	movs	r1, r3
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f930 	bl	80019e0 <vertScroll>
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b007      	add	sp, #28
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000080 	.word	0x20000080
 800178c:	2000002f 	.word	0x2000002f
 8001790:	20000004 	.word	0x20000004
 8001794:	20000006 	.word	0x20000006
 8001798:	2000007c 	.word	0x2000007c
 800179c:	20000084 	.word	0x20000084
 80017a0:	20000082 	.word	0x20000082
 80017a4:	2000007a 	.word	0x2000007a
 80017a8:	20000086 	.word	0x20000086
 80017ac:	2000008e 	.word	0x2000008e
 80017b0:	2000007e 	.word	0x2000007e
 80017b4:	20000088 	.word	0x20000088
 80017b8:	20000090 	.word	0x20000090

080017bc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0004      	movs	r4, r0
 80017c4:	0008      	movs	r0, r1
 80017c6:	0011      	movs	r1, r2
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	1c22      	adds	r2, r4, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	1c02      	adds	r2, r0, #0
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	1cbb      	adds	r3, r7, #2
 80017d6:	1c0a      	adds	r2, r1, #0
 80017d8:	801a      	strh	r2, [r3, #0]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	2200      	movs	r2, #0
 80017de:	5e9b      	ldrsh	r3, [r3, r2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db2c      	blt.n	800183e <drawPixel+0x82>
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	5e9b      	ldrsh	r3, [r3, r2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db27      	blt.n	800183e <drawPixel+0x82>
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	2400      	movs	r4, #0
 80017f2:	5f1c      	ldrsh	r4, [r3, r4]
 80017f4:	f7fe ff4a 	bl	800068c <width>
 80017f8:	0003      	movs	r3, r0
 80017fa:	429c      	cmp	r4, r3
 80017fc:	da1f      	bge.n	800183e <drawPixel+0x82>
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2400      	movs	r4, #0
 8001802:	5f1c      	ldrsh	r4, [r3, r4]
 8001804:	f7fe ff4c 	bl	80006a0 <height>
 8001808:	0003      	movs	r3, r0
 800180a:	429c      	cmp	r4, r3
 800180c:	da17      	bge.n	800183e <drawPixel+0x82>
       return;
   setAddrWindow(x, y, x, y);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2400      	movs	r4, #0
 8001812:	5f1c      	ldrsh	r4, [r3, r4]
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	2200      	movs	r2, #0
 8001818:	5e9a      	ldrsh	r2, [r3, r2]
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2100      	movs	r1, #0
 800181e:	5e59      	ldrsh	r1, [r3, r1]
 8001820:	1dbb      	adds	r3, r7, #6
 8001822:	2000      	movs	r0, #0
 8001824:	5e18      	ldrsh	r0, [r3, r0]
 8001826:	0023      	movs	r3, r4
 8001828:	f000 f810 	bl	800184c <setAddrWindow>
   WriteCmdData(_MW, color);
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <drawPixel+0x8c>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	0019      	movs	r1, r3
 8001836:	0010      	movs	r0, r2
 8001838:	f7fe ff3c 	bl	80006b4 <WriteCmdData>
 800183c:	e000      	b.n	8001840 <drawPixel+0x84>
       return;
 800183e:	46c0      	nop			; (mov r8, r8)
}
 8001840:	46bd      	mov	sp, r7
 8001842:	b003      	add	sp, #12
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	2000007a 	.word	0x2000007a

0800184c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af02      	add	r7, sp, #8
 8001852:	0005      	movs	r5, r0
 8001854:	000c      	movs	r4, r1
 8001856:	0010      	movs	r0, r2
 8001858:	0019      	movs	r1, r3
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	1c2a      	adds	r2, r5, #0
 800185e:	801a      	strh	r2, [r3, #0]
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	1c22      	adds	r2, r4, #0
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	1cbb      	adds	r3, r7, #2
 8001868:	1c02      	adds	r2, r0, #0
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	003b      	movs	r3, r7
 800186e:	1c0a      	adds	r2, r1, #0
 8001870:	801a      	strh	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <setAddrWindow+0x174>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	001a      	movs	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	4013      	ands	r3, r2
 800187c:	d032      	beq.n	80018e4 <setAddrWindow+0x98>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <setAddrWindow+0x178>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	b2d8      	uxtb	r0, r3
 8001884:	1dbb      	adds	r3, r7, #6
 8001886:	2200      	movs	r2, #0
 8001888:	5e9b      	ldrsh	r3, [r3, r2]
 800188a:	121b      	asrs	r3, r3, #8
 800188c:	b21b      	sxth	r3, r3
 800188e:	b2d9      	uxtb	r1, r3
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	2400      	movs	r4, #0
 800189a:	5f1b      	ldrsh	r3, [r3, r4]
 800189c:	121b      	asrs	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	b2dc      	uxtb	r4, r3
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	0023      	movs	r3, r4
 80018ac:	f7ff fa9c 	bl	8000de8 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <setAddrWindow+0x17c>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	5e9b      	ldrsh	r3, [r3, r2]
 80018bc:	121b      	asrs	r3, r3, #8
 80018be:	b21b      	sxth	r3, r3
 80018c0:	b2d9      	uxtb	r1, r3
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	003b      	movs	r3, r7
 80018ca:	2400      	movs	r4, #0
 80018cc:	5f1b      	ldrsh	r3, [r3, r4]
 80018ce:	121b      	asrs	r3, r3, #8
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b2dc      	uxtb	r4, r3
 80018d4:	003b      	movs	r3, r7
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	0023      	movs	r3, r4
 80018de:	f7ff fa83 	bl	8000de8 <WriteCmdParam4>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80018e2:	e068      	b.n	80019b6 <setAddrWindow+0x16a>
       WriteCmdData(_MC, x);
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <setAddrWindow+0x180>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	1dbb      	adds	r3, r7, #6
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	0019      	movs	r1, r3
 80018ee:	0010      	movs	r0, r2
 80018f0:	f7fe fee0 	bl	80006b4 <WriteCmdData>
       WriteCmdData(_MP, y);
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <setAddrWindow+0x184>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7fe fed8 	bl	80006b4 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8001904:	1dba      	adds	r2, r7, #6
 8001906:	1cbb      	adds	r3, r7, #2
 8001908:	2100      	movs	r1, #0
 800190a:	5e52      	ldrsh	r2, [r2, r1]
 800190c:	2100      	movs	r1, #0
 800190e:	5e5b      	ldrsh	r3, [r3, r1]
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <setAddrWindow+0xd8>
 8001914:	1d3a      	adds	r2, r7, #4
 8001916:	003b      	movs	r3, r7
 8001918:	2100      	movs	r1, #0
 800191a:	5e52      	ldrsh	r2, [r2, r1]
 800191c:	2100      	movs	r1, #0
 800191e:	5e5b      	ldrsh	r3, [r3, r1]
 8001920:	429a      	cmp	r2, r3
 8001922:	d048      	beq.n	80019b6 <setAddrWindow+0x16a>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <setAddrWindow+0x174>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	001a      	movs	r2, r3
 800192a:	2320      	movs	r3, #32
 800192c:	4013      	ands	r3, r2
 800192e:	d022      	beq.n	8001976 <setAddrWindow+0x12a>
               if (rotation & 1)
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <setAddrWindow+0x188>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d00e      	beq.n	800195a <setAddrWindow+0x10e>
                   y1 = y = (y1 << 8) | y;
 800193c:	003b      	movs	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	5e9b      	ldrsh	r3, [r3, r2]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b219      	sxth	r1, r3
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	1d3a      	adds	r2, r7, #4
 800194a:	8812      	ldrh	r2, [r2, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	003b      	movs	r3, r7
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	8812      	ldrh	r2, [r2, #0]
 8001956:	801a      	strh	r2, [r3, #0]
 8001958:	e00d      	b.n	8001976 <setAddrWindow+0x12a>
                   x1 = x = (x1 << 8) | x;
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	2200      	movs	r2, #0
 800195e:	5e9b      	ldrsh	r3, [r3, r2]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b219      	sxth	r1, r3
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	1dba      	adds	r2, r7, #6
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	1dba      	adds	r2, r7, #6
 8001972:	8812      	ldrh	r2, [r2, #0]
 8001974:	801a      	strh	r2, [r3, #0]
           WriteCmdData(_SC, x);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <setAddrWindow+0x178>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f7fe fe97 	bl	80006b4 <WriteCmdData>
           WriteCmdData(_SP, y);
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <setAddrWindow+0x17c>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	0019      	movs	r1, r3
 8001990:	0010      	movs	r0, r2
 8001992:	f7fe fe8f 	bl	80006b4 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <setAddrWindow+0x18c>)
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	1cbb      	adds	r3, r7, #2
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f7fe fe87 	bl	80006b4 <WriteCmdData>
           WriteCmdData(_EP, y1);
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <setAddrWindow+0x190>)
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	003b      	movs	r3, r7
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	0019      	movs	r1, r3
 80019b0:	0010      	movs	r0, r2
 80019b2:	f7fe fe7f 	bl	80006b4 <WriteCmdData>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	2000007c 	.word	0x2000007c
 80019c4:	20000086 	.word	0x20000086
 80019c8:	2000007e 	.word	0x2000007e
 80019cc:	20000084 	.word	0x20000084
 80019d0:	20000082 	.word	0x20000082
 80019d4:	2000002f 	.word	0x2000002f
 80019d8:	2000008e 	.word	0x2000008e
 80019dc:	20000088 	.word	0x20000088

080019e0 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	0004      	movs	r4, r0
 80019e8:	0008      	movs	r0, r1
 80019ea:	0011      	movs	r1, r2
 80019ec:	1dbb      	adds	r3, r7, #6
 80019ee:	1c22      	adds	r2, r4, #0
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	1c02      	adds	r2, r0, #0
 80019f6:	801a      	strh	r2, [r3, #0]
 80019f8:	1cbb      	adds	r3, r7, #2
 80019fa:	1c0a      	adds	r2, r1, #0
 80019fc:	801a      	strh	r2, [r3, #0]
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80019fe:	1dbb      	adds	r3, r7, #6
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	425b      	negs	r3, r3
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	33e1      	adds	r3, #225	; 0xe1
 8001a10:	33ff      	adds	r3, #255	; 0xff
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	2316      	movs	r3, #22
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	801a      	strh	r2, [r3, #0]
    int16_t vsp;
    int16_t sea = top;
 8001a1a:	2312      	movs	r3, #18
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	1dba      	adds	r2, r7, #6
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	801a      	strh	r2, [r3, #0]

	if (_lcd_ID == 0x9327) bfa += 32;
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <vertScroll+0x1ac>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	4a59      	ldr	r2, [pc, #356]	; (8001b90 <vertScroll+0x1b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <vertScroll+0x5c>
 8001a2e:	2116      	movs	r1, #22
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	3320      	adds	r3, #32
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	801a      	strh	r2, [r3, #0]

	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	5e9a      	ldrsh	r2, [r3, r2]
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2100      	movs	r1, #0
 8001a46:	5e5b      	ldrsh	r3, [r3, r1]
 8001a48:	425b      	negs	r3, r3
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dd07      	ble.n	8001a5e <vertScroll+0x7e>
 8001a4e:	1cba      	adds	r2, r7, #2
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2100      	movs	r1, #0
 8001a54:	5e52      	ldrsh	r2, [r2, r1]
 8001a56:	2100      	movs	r1, #0
 8001a58:	5e5b      	ldrsh	r3, [r3, r1]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	db02      	blt.n	8001a64 <vertScroll+0x84>
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	2200      	movs	r2, #0
 8001a62:	801a      	strh	r2, [r3, #0]
	vsp = top + offset; // vertical start position
 8001a64:	1dbb      	adds	r3, r7, #6
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	18d3      	adds	r3, r2, r3
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2314      	movs	r3, #20
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	801a      	strh	r2, [r3, #0]

	if (offset < 0)
 8001a76:	1cbb      	adds	r3, r7, #2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	5e9b      	ldrsh	r3, [r3, r2]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da08      	bge.n	8001a92 <vertScroll+0xb2>
        vsp += scrollines;          //keep in unsigned range
 8001a80:	2114      	movs	r1, #20
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	18d3      	adds	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	801a      	strh	r2, [r3, #0]
    sea = top + scrollines - 1;
 8001a92:	1dbb      	adds	r3, r7, #6
 8001a94:	881a      	ldrh	r2, [r3, #0]
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	18d3      	adds	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	2312      	movs	r3, #18
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1) {
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <vertScroll+0x1b4>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	001a      	movs	r2, r3
 8001aae:	2301      	movs	r3, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d056      	beq.n	8001b62 <vertScroll+0x182>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8001aba:	121b      	asrs	r3, r3, #8
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	210c      	movs	r1, #12
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
        d[1] = top;
 8001ac6:	1dbb      	adds	r3, r7, #6
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	705a      	strb	r2, [r3, #1]
        d[2] = scrollines >> 8; //VSA
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	5e9b      	ldrsh	r3, [r3, r2]
 8001ad6:	121b      	asrs	r3, r3, #8
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	709a      	strb	r2, [r3, #2]
        d[3] = scrollines;
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	70da      	strb	r2, [r3, #3]
        d[4] = bfa >> 8;        //BFA
 8001aea:	2016      	movs	r0, #22
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	2200      	movs	r2, #0
 8001af0:	5e9b      	ldrsh	r3, [r3, r2]
 8001af2:	121b      	asrs	r3, r3, #8
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	711a      	strb	r2, [r3, #4]
        d[5] = bfa;
 8001afc:	183b      	adds	r3, r7, r0
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	715a      	strb	r2, [r3, #5]
        WriteCmdParamN(0x33, 6, d);
 8001b06:	000c      	movs	r4, r1
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2106      	movs	r1, #6
 8001b0e:	2033      	movs	r0, #51	; 0x33
 8001b10:	f7ff f80e 	bl	8000b30 <WriteCmdParamN>
		d[0] = vsp >> 8;        //VSP
 8001b14:	2014      	movs	r0, #20
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b1c:	121b      	asrs	r3, r3, #8
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	0021      	movs	r1, r4
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	701a      	strb	r2, [r3, #0]
        d[1] = vsp;
 8001b28:	183b      	adds	r3, r7, r0
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	705a      	strb	r2, [r3, #1]
        WriteCmdParamN(0x37, 2, d);
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	001a      	movs	r2, r3
 8001b36:	2102      	movs	r1, #2
 8001b38:	2037      	movs	r0, #55	; 0x37
 8001b3a:	f7fe fff9 	bl	8000b30 <WriteCmdParamN>
		if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8001b3e:	1cbb      	adds	r3, r7, #2
 8001b40:	2200      	movs	r2, #0
 8001b42:	5e9b      	ldrsh	r3, [r3, r2]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11d      	bne.n	8001b84 <vertScroll+0x1a4>
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <vertScroll+0x1b4>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d017      	beq.n	8001b84 <vertScroll+0x1a4>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2013      	movs	r0, #19
 8001b5a:	f7fe ffe9 	bl	8000b30 <WriteCmdParamN>
		}
		return;
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	e010      	b.n	8001b84 <vertScroll+0x1a4>
    }

	// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
	WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <vertScroll+0x1b8>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	2061      	movs	r0, #97	; 0x61
 8001b70:	f7fe fda0 	bl	80006b4 <WriteCmdData>
	WriteCmdData(0x6A, vsp);        //VL#
 8001b74:	2314      	movs	r3, #20
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	206a      	movs	r0, #106	; 0x6a
 8001b7e:	f7fe fd99 	bl	80006b4 <WriteCmdData>
 8001b82:	e000      	b.n	8001b86 <vertScroll+0x1a6>
		return;
 8001b84:	46c0      	nop			; (mov r8, r8)
}
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b007      	add	sp, #28
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	2000008a 	.word	0x2000008a
 8001b90:	00009327 	.word	0x00009327
 8001b94:	2000007c 	.word	0x2000007c
 8001b98:	20000080 	.word	0x20000080

08001b9c <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <fillScreen+0x30>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <fillScreen+0x34>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	b219      	sxth	r1, r3
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	000b      	movs	r3, r1
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fd00 	bl	80025c4 <fillRect>
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	20000006 	.word	0x20000006

08001bd4 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	0002      	movs	r2, r0
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <invertDisplay+0x68>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	001a      	movs	r2, r3
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	4013      	ands	r3, r2
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	4193      	sbcs	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4053      	eors	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <invertDisplay+0x6c>)
 8001c02:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1)
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <invertDisplay+0x68>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d00c      	beq.n	8001c2a <invertDisplay+0x56>
    {
		WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <invertDisplay+0x6c>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <invertDisplay+0x48>
 8001c18:	2321      	movs	r3, #33	; 0x21
 8001c1a:	e000      	b.n	8001c1e <invertDisplay+0x4a>
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe ff84 	bl	8000b30 <WriteCmdParamN>
        return;
 8001c28:	e005      	b.n	8001c36 <invertDisplay+0x62>
    }

    WriteCmdData(0x61, _lcd_rev);
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <invertDisplay+0x6c>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	0019      	movs	r1, r3
 8001c30:	2061      	movs	r0, #97	; 0x61
 8001c32:	f7fe fd3f 	bl	80006b4 <WriteCmdData>
}
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000007c 	.word	0x2000007c
 8001c40:	20000080 	.word	0x20000080

08001c44 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	0005      	movs	r5, r0
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	0010      	movs	r0, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	1c2a      	adds	r2, r5, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	1c22      	adds	r2, r4, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	1cbb      	adds	r3, r7, #2
 8001c60:	1c02      	adds	r2, r0, #0
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	003b      	movs	r3, r7
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, 1, h, color);
 8001c6a:	1cbb      	adds	r3, r7, #2
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	5e9a      	ldrsh	r2, [r3, r2]
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2100      	movs	r1, #0
 8001c74:	5e59      	ldrsh	r1, [r3, r1]
 8001c76:	1dbb      	adds	r3, r7, #6
 8001c78:	2000      	movs	r0, #0
 8001c7a:	5e18      	ldrsh	r0, [r3, r0]
 8001c7c:	003b      	movs	r3, r7
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	0013      	movs	r3, r2
 8001c84:	2201      	movs	r2, #1
 8001c86:	f000 fc9d 	bl	80025c4 <fillRect>
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}

08001c92 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001c92:	b5b0      	push	{r4, r5, r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af02      	add	r7, sp, #8
 8001c98:	0005      	movs	r5, r0
 8001c9a:	000c      	movs	r4, r1
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	1dbb      	adds	r3, r7, #6
 8001ca2:	1c2a      	adds	r2, r5, #0
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	1c22      	adds	r2, r4, #0
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	1cbb      	adds	r3, r7, #2
 8001cae:	1c02      	adds	r2, r0, #0
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	003b      	movs	r3, r7
 8001cb4:	1c0a      	adds	r2, r1, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, w, 1, color);
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	5e9a      	ldrsh	r2, [r3, r2]
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5e59      	ldrsh	r1, [r3, r1]
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	5e18      	ldrsh	r0, [r3, r0]
 8001cca:	003b      	movs	r3, r7
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f000 fc77 	bl	80025c4 <fillRect>
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}

08001cde <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	0004      	movs	r4, r0
 8001ce6:	0008      	movs	r0, r1
 8001ce8:	0011      	movs	r1, r2
 8001cea:	1dbb      	adds	r3, r7, #6
 8001cec:	1c22      	adds	r2, r4, #0
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	1cbb      	adds	r3, r7, #2
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8001cfc:	1cbb      	adds	r3, r7, #2
 8001cfe:	881a      	ldrh	r2, [r3, #0]
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2100      	movs	r1, #0
 8001d04:	5e59      	ldrsh	r1, [r3, r1]
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	2000      	movs	r0, #0
 8001d0a:	5e1b      	ldrsh	r3, [r3, r0]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff fd55 	bl	80017bc <drawPixel>
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b003      	add	sp, #12
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001d1a:	b5b0      	push	{r4, r5, r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	0005      	movs	r5, r0
 8001d22:	000c      	movs	r4, r1
 8001d24:	0010      	movs	r0, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	1dbb      	adds	r3, r7, #6
 8001d2a:	1c2a      	adds	r2, r5, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	1c22      	adds	r2, r4, #0
 8001d32:	801a      	strh	r2, [r3, #0]
 8001d34:	1cbb      	adds	r3, r7, #2
 8001d36:	1c02      	adds	r2, r0, #0
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	1c0a      	adds	r2, r1, #0
 8001d3e:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001d40:	003b      	movs	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	5e9a      	ldrsh	r2, [r3, r2]
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5e5b      	ldrsh	r3, [r3, r1]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	17d9      	asrs	r1, r3, #31
 8001d50:	185a      	adds	r2, r3, r1
 8001d52:	404a      	eors	r2, r1
 8001d54:	1cbb      	adds	r3, r7, #2
 8001d56:	2100      	movs	r1, #0
 8001d58:	5e59      	ldrsh	r1, [r3, r1]
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	5e1b      	ldrsh	r3, [r3, r0]
 8001d60:	1acb      	subs	r3, r1, r3
 8001d62:	17d9      	asrs	r1, r3, #31
 8001d64:	185b      	adds	r3, r3, r1
 8001d66:	404b      	eors	r3, r1
 8001d68:	2101      	movs	r1, #1
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dc01      	bgt.n	8001d72 <writeLine+0x58>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	1c19      	adds	r1, r3, #0
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	211a      	movs	r1, #26
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	5e9b      	ldrsh	r3, [r3, r2]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8001d84:	2118      	movs	r1, #24
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	1dba      	adds	r2, r7, #6
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	1d3a      	adds	r2, r7, #4
 8001d92:	8812      	ldrh	r2, [r2, #0]
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	187a      	adds	r2, r7, r1
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8001d9e:	2116      	movs	r1, #22
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	1cba      	adds	r2, r7, #2
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	1cbb      	adds	r3, r7, #2
 8001daa:	003a      	movs	r2, r7
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	003b      	movs	r3, r7
 8001db2:	187a      	adds	r2, r7, r1
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8001db8:	1dba      	adds	r2, r7, #6
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5e52      	ldrsh	r2, [r2, r1]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5e5b      	ldrsh	r3, [r3, r1]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dd19      	ble.n	8001dfc <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8001dc8:	2114      	movs	r1, #20
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	1dba      	adds	r2, r7, #6
 8001dce:	8812      	ldrh	r2, [r2, #0]
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	1dbb      	adds	r3, r7, #6
 8001dd4:	1cba      	adds	r2, r7, #2
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	1cbb      	adds	r3, r7, #2
 8001ddc:	187a      	adds	r2, r7, r1
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8001de2:	2112      	movs	r1, #18
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	1d3a      	adds	r2, r7, #4
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	003a      	movs	r2, r7
 8001df0:	8812      	ldrh	r2, [r2, #0]
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	003b      	movs	r3, r7
 8001df6:	187a      	adds	r2, r7, r1
 8001df8:	8812      	ldrh	r2, [r2, #0]
 8001dfa:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001dfc:	1cbb      	adds	r3, r7, #2
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	1dbb      	adds	r3, r7, #6
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	2110      	movs	r1, #16
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8001e0e:	003b      	movs	r3, r7
 8001e10:	2200      	movs	r2, #0
 8001e12:	5e9a      	ldrsh	r2, [r3, r2]
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2000      	movs	r0, #0
 8001e18:	5e1b      	ldrsh	r3, [r3, r0]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	17d8      	asrs	r0, r3, #31
 8001e1e:	181a      	adds	r2, r3, r0
 8001e20:	4042      	eors	r2, r0
 8001e22:	230e      	movs	r3, #14
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8001e28:	231e      	movs	r3, #30
 8001e2a:	18fa      	adds	r2, r7, r3
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5e5b      	ldrsh	r3, [r3, r1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da00      	bge.n	8001e38 <writeLine+0x11e>
 8001e36:	3301      	adds	r3, #1
 8001e38:	105b      	asrs	r3, r3, #1
 8001e3a:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8001e3c:	1d3a      	adds	r2, r7, #4
 8001e3e:	003b      	movs	r3, r7
 8001e40:	2100      	movs	r1, #0
 8001e42:	5e52      	ldrsh	r2, [r2, r1]
 8001e44:	2100      	movs	r1, #0
 8001e46:	5e5b      	ldrsh	r3, [r3, r1]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	da04      	bge.n	8001e56 <writeLine+0x13c>
        ystep = 1;
 8001e4c:	231c      	movs	r3, #28
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2201      	movs	r2, #1
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	e04e      	b.n	8001ef4 <writeLine+0x1da>
    } else {
        ystep = -1;
 8001e56:	231c      	movs	r3, #28
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8001e60:	e048      	b.n	8001ef4 <writeLine+0x1da>
        if (steep) {
 8001e62:	231a      	movs	r3, #26
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	5e9b      	ldrsh	r3, [r3, r2]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8001e6e:	2330      	movs	r3, #48	; 0x30
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	2100      	movs	r1, #0
 8001e78:	5e59      	ldrsh	r1, [r3, r1]
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	5e1b      	ldrsh	r3, [r3, r0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff ff2c 	bl	8001cde <writePixel>
 8001e86:	e00b      	b.n	8001ea0 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8001e88:	2330      	movs	r3, #48	; 0x30
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2100      	movs	r1, #0
 8001e92:	5e59      	ldrsh	r1, [r3, r1]
 8001e94:	1dbb      	adds	r3, r7, #6
 8001e96:	2000      	movs	r0, #0
 8001e98:	5e1b      	ldrsh	r3, [r3, r0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff ff1f 	bl	8001cde <writePixel>
        }
        err -= dy;
 8001ea0:	211e      	movs	r1, #30
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	230e      	movs	r3, #14
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	5e9b      	ldrsh	r3, [r3, r2]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da12      	bge.n	8001ee4 <writeLine+0x1ca>
            y0 += ystep;
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	231c      	movs	r3, #28
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	18d3      	adds	r3, r2, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	801a      	strh	r2, [r3, #0]
            err += dx;
 8001ed0:	211e      	movs	r1, #30
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	881a      	ldrh	r2, [r3, #0]
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8001ee4:	1dbb      	adds	r3, r7, #6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	5e9b      	ldrsh	r3, [r3, r2]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	1dbb      	adds	r3, r7, #6
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	1dba      	adds	r2, r7, #6
 8001ef6:	1cbb      	adds	r3, r7, #2
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5e52      	ldrsh	r2, [r2, r1]
 8001efc:	2100      	movs	r1, #0
 8001efe:	5e5b      	ldrsh	r3, [r3, r1]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	ddae      	ble.n	8001e62 <writeLine+0x148>
        }
    }
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b008      	add	sp, #32
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}

08001f0c <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	0005      	movs	r5, r0
 8001f14:	000c      	movs	r4, r1
 8001f16:	0010      	movs	r0, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	1dbb      	adds	r3, r7, #6
 8001f1c:	1c2a      	adds	r2, r5, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	1c22      	adds	r2, r4, #0
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	1cbb      	adds	r3, r7, #2
 8001f28:	1c02      	adds	r2, r0, #0
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	1c0a      	adds	r2, r1, #0
 8001f30:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8001f32:	1dba      	adds	r2, r7, #6
 8001f34:	1cbb      	adds	r3, r7, #2
 8001f36:	2100      	movs	r1, #0
 8001f38:	5e52      	ldrsh	r2, [r2, r1]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5e5b      	ldrsh	r3, [r3, r1]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d12a      	bne.n	8001f98 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8001f42:	1d3a      	adds	r2, r7, #4
 8001f44:	003b      	movs	r3, r7
 8001f46:	2100      	movs	r1, #0
 8001f48:	5e52      	ldrsh	r2, [r2, r1]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5e5b      	ldrsh	r3, [r3, r1]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dd0c      	ble.n	8001f6c <drawLine+0x60>
 8001f52:	210c      	movs	r1, #12
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	1d3a      	adds	r2, r7, #4
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	003a      	movs	r2, r7
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	003b      	movs	r3, r7
 8001f66:	187a      	adds	r2, r7, r1
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001f6c:	003b      	movs	r3, r7
 8001f6e:	881a      	ldrh	r2, [r3, #0]
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	2320      	movs	r3, #32
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	881c      	ldrh	r4, [r3, #0]
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2100      	movs	r1, #0
 8001f88:	5e59      	ldrsh	r1, [r3, r1]
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	5e18      	ldrsh	r0, [r3, r0]
 8001f90:	0023      	movs	r3, r4
 8001f92:	f7ff fe57 	bl	8001c44 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8001f96:	e045      	b.n	8002024 <drawLine+0x118>
    } else if(y0 == y1){
 8001f98:	1d3a      	adds	r2, r7, #4
 8001f9a:	003b      	movs	r3, r7
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5e52      	ldrsh	r2, [r2, r1]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5e5b      	ldrsh	r3, [r3, r1]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d12a      	bne.n	8001ffe <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8001fa8:	1dba      	adds	r2, r7, #6
 8001faa:	1cbb      	adds	r3, r7, #2
 8001fac:	2100      	movs	r1, #0
 8001fae:	5e52      	ldrsh	r2, [r2, r1]
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5e5b      	ldrsh	r3, [r3, r1]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dd0c      	ble.n	8001fd2 <drawLine+0xc6>
 8001fb8:	210e      	movs	r1, #14
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	1dba      	adds	r2, r7, #6
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	1dbb      	adds	r3, r7, #6
 8001fc4:	1cba      	adds	r2, r7, #2
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	1cbb      	adds	r3, r7, #2
 8001fcc:	187a      	adds	r2, r7, r1
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001fd2:	1cbb      	adds	r3, r7, #2
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	881c      	ldrh	r4, [r3, #0]
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2100      	movs	r1, #0
 8001fee:	5e59      	ldrsh	r1, [r3, r1]
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	5e18      	ldrsh	r0, [r3, r0]
 8001ff6:	0023      	movs	r3, r4
 8001ff8:	f7ff fe4b 	bl	8001c92 <drawFastHLine>
}
 8001ffc:	e012      	b.n	8002024 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8001ffe:	003b      	movs	r3, r7
 8002000:	2400      	movs	r4, #0
 8002002:	5f1c      	ldrsh	r4, [r3, r4]
 8002004:	1cbb      	adds	r3, r7, #2
 8002006:	2200      	movs	r2, #0
 8002008:	5e9a      	ldrsh	r2, [r3, r2]
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2100      	movs	r1, #0
 800200e:	5e59      	ldrsh	r1, [r3, r1]
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	2000      	movs	r0, #0
 8002014:	5e18      	ldrsh	r0, [r3, r0]
 8002016:	2320      	movs	r3, #32
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	0023      	movs	r3, r4
 8002020:	f7ff fe7b 	bl	8001d1a <writeLine>
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bdb0      	pop	{r4, r5, r7, pc}

0800202c <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	0005      	movs	r5, r0
 8002034:	000c      	movs	r4, r1
 8002036:	0010      	movs	r0, r2
 8002038:	0019      	movs	r1, r3
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	1c2a      	adds	r2, r5, #0
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	1c22      	adds	r2, r4, #0
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	1cbb      	adds	r3, r7, #2
 8002048:	1c02      	adds	r2, r0, #0
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	003b      	movs	r3, r7
 800204e:	1c0a      	adds	r2, r1, #0
 8002050:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8002052:	1cbb      	adds	r3, r7, #2
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	2316      	movs	r3, #22
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002062:	2314      	movs	r3, #20
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2201      	movs	r2, #1
 8002068:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 800206a:	1cbb      	adds	r3, r7, #2
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	1c1a      	adds	r2, r3, #0
 8002070:	03d2      	lsls	r2, r2, #15
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	18db      	adds	r3, r3, r3
 8002076:	b29a      	uxth	r2, r3
 8002078:	2312      	movs	r3, #18
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 800207e:	2310      	movs	r3, #16
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2200      	movs	r2, #0
 8002084:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 8002086:	230e      	movs	r3, #14
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	1cba      	adds	r2, r7, #2
 800208c:	8812      	ldrh	r2, [r2, #0]
 800208e:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	1cbb      	adds	r3, r7, #2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	b219      	sxth	r1, r3
 800209e:	003b      	movs	r3, r7
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	2000      	movs	r0, #0
 80020a6:	5e1b      	ldrsh	r3, [r3, r0]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff fe18 	bl	8001cde <writePixel>
    writePixel(x0  , y0-r, color);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	881a      	ldrh	r2, [r3, #0]
 80020b2:	1cbb      	adds	r3, r7, #2
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b219      	sxth	r1, r3
 80020bc:	003b      	movs	r3, r7
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	1dbb      	adds	r3, r7, #6
 80020c2:	2000      	movs	r0, #0
 80020c4:	5e1b      	ldrsh	r3, [r3, r0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fe09 	bl	8001cde <writePixel>
    writePixel(x0+r, y0  , color);
 80020cc:	1dbb      	adds	r3, r7, #6
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	1cbb      	adds	r3, r7, #2
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	18d3      	adds	r3, r2, r3
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b218      	sxth	r0, r3
 80020da:	003b      	movs	r3, r7
 80020dc:	881a      	ldrh	r2, [r3, #0]
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2100      	movs	r1, #0
 80020e2:	5e5b      	ldrsh	r3, [r3, r1]
 80020e4:	0019      	movs	r1, r3
 80020e6:	f7ff fdfa 	bl	8001cde <writePixel>
    writePixel(x0-r, y0  , color);
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	1cbb      	adds	r3, r7, #2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	b218      	sxth	r0, r3
 80020f8:	003b      	movs	r3, r7
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	5e5b      	ldrsh	r3, [r3, r1]
 8002102:	0019      	movs	r1, r3
 8002104:	f7ff fdeb 	bl	8001cde <writePixel>

    while (x<y) {
 8002108:	e0d1      	b.n	80022ae <drawCircle+0x282>
        if (f >= 0) {
 800210a:	2316      	movs	r3, #22
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2200      	movs	r2, #0
 8002110:	5e9b      	ldrsh	r3, [r3, r2]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db18      	blt.n	8002148 <drawCircle+0x11c>
            y--;
 8002116:	210e      	movs	r1, #14
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2200      	movs	r2, #0
 800211c:	5e9b      	ldrsh	r3, [r3, r2]
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	187b      	adds	r3, r7, r1
 8002126:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002128:	2112      	movs	r1, #18
 800212a:	187b      	adds	r3, r7, r1
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3302      	adds	r3, #2
 8002130:	b29a      	uxth	r2, r3
 8002132:	187b      	adds	r3, r7, r1
 8002134:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 8002136:	2016      	movs	r0, #22
 8002138:	183b      	adds	r3, r7, r0
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	187b      	adds	r3, r7, r1
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	18d3      	adds	r3, r2, r3
 8002142:	b29a      	uxth	r2, r3
 8002144:	183b      	adds	r3, r7, r0
 8002146:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002148:	2110      	movs	r1, #16
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2200      	movs	r2, #0
 800214e:	5e9b      	ldrsh	r3, [r3, r2]
 8002150:	b29b      	uxth	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	187b      	adds	r3, r7, r1
 8002158:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 800215a:	2014      	movs	r0, #20
 800215c:	183b      	adds	r3, r7, r0
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	3302      	adds	r3, #2
 8002162:	b29a      	uxth	r2, r3
 8002164:	183b      	adds	r3, r7, r0
 8002166:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 8002168:	2416      	movs	r4, #22
 800216a:	193b      	adds	r3, r7, r4
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	183b      	adds	r3, r7, r0
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	b29a      	uxth	r2, r3
 8002176:	193b      	adds	r3, r7, r4
 8002178:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	881a      	ldrh	r2, [r3, #0]
 800217e:	000c      	movs	r4, r1
 8002180:	193b      	adds	r3, r7, r4
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	b218      	sxth	r0, r3
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	250e      	movs	r5, #14
 8002190:	197b      	adds	r3, r7, r5
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	18d3      	adds	r3, r2, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	b219      	sxth	r1, r3
 800219a:	003b      	movs	r3, r7
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	001a      	movs	r2, r3
 80021a0:	f7ff fd9d 	bl	8001cde <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	193b      	adds	r3, r7, r4
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b218      	sxth	r0, r3
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	197b      	adds	r3, r7, r5
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b219      	sxth	r1, r3
 80021c0:	003b      	movs	r3, r7
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	f7ff fd8a 	bl	8001cde <writePixel>
        writePixel(x0 + x, y0 - y, color);
 80021ca:	1dbb      	adds	r3, r7, #6
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b218      	sxth	r0, r3
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	197b      	adds	r3, r7, r5
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b219      	sxth	r1, r3
 80021e6:	003b      	movs	r3, r7
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	001a      	movs	r2, r3
 80021ec:	f7ff fd77 	bl	8001cde <writePixel>
        writePixel(x0 - x, y0 - y, color);
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b218      	sxth	r0, r3
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	881a      	ldrh	r2, [r3, #0]
 8002202:	197b      	adds	r3, r7, r5
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	b29b      	uxth	r3, r3
 800220a:	b219      	sxth	r1, r3
 800220c:	003b      	movs	r3, r7
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	001a      	movs	r2, r3
 8002212:	f7ff fd64 	bl	8001cde <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	881a      	ldrh	r2, [r3, #0]
 800221a:	197b      	adds	r3, r7, r5
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	18d3      	adds	r3, r2, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	b218      	sxth	r0, r3
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	193b      	adds	r3, r7, r4
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	b29b      	uxth	r3, r3
 8002230:	b219      	sxth	r1, r3
 8002232:	003b      	movs	r3, r7
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	001a      	movs	r2, r3
 8002238:	f7ff fd51 	bl	8001cde <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	197b      	adds	r3, r7, r5
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	b218      	sxth	r0, r3
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	193b      	adds	r3, r7, r4
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	18d3      	adds	r3, r2, r3
 8002254:	b29b      	uxth	r3, r3
 8002256:	b219      	sxth	r1, r3
 8002258:	003b      	movs	r3, r7
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	001a      	movs	r2, r3
 800225e:	f7ff fd3e 	bl	8001cde <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	197b      	adds	r3, r7, r5
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	b29b      	uxth	r3, r3
 800226e:	b218      	sxth	r0, r3
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	193b      	adds	r3, r7, r4
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	b219      	sxth	r1, r3
 800227e:	003b      	movs	r3, r7
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	001a      	movs	r2, r3
 8002284:	f7ff fd2b 	bl	8001cde <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	197b      	adds	r3, r7, r5
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	b29b      	uxth	r3, r3
 8002294:	b218      	sxth	r0, r3
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	193b      	adds	r3, r7, r4
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b219      	sxth	r1, r3
 80022a4:	003b      	movs	r3, r7
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	f7ff fd18 	bl	8001cde <writePixel>
    while (x<y) {
 80022ae:	2310      	movs	r3, #16
 80022b0:	18fa      	adds	r2, r7, r3
 80022b2:	230e      	movs	r3, #14
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2100      	movs	r1, #0
 80022b8:	5e52      	ldrsh	r2, [r2, r1]
 80022ba:	2100      	movs	r1, #0
 80022bc:	5e5b      	ldrsh	r3, [r3, r1]
 80022be:	429a      	cmp	r2, r3
 80022c0:	da00      	bge.n	80022c4 <drawCircle+0x298>
 80022c2:	e722      	b.n	800210a <drawCircle+0xde>
    }
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bdb0      	pop	{r4, r5, r7, pc}

080022cc <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	0005      	movs	r5, r0
 80022d4:	000c      	movs	r4, r1
 80022d6:	0010      	movs	r0, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	1dbb      	adds	r3, r7, #6
 80022dc:	1c2a      	adds	r2, r5, #0
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	1c22      	adds	r2, r4, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	1c02      	adds	r2, r0, #0
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	003b      	movs	r3, r7
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	801a      	strh	r2, [r3, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	1cbb      	adds	r3, r7, #2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b219      	sxth	r1, r3
 8002300:	1cbb      	adds	r3, r7, #2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	18db      	adds	r3, r3, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	b21a      	sxth	r2, r3
 800230e:	003b      	movs	r3, r7
 8002310:	881c      	ldrh	r4, [r3, #0]
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	2000      	movs	r0, #0
 8002316:	5e18      	ldrsh	r0, [r3, r0]
 8002318:	0023      	movs	r3, r4
 800231a:	f7ff fc93 	bl	8001c44 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800231e:	1cbb      	adds	r3, r7, #2
 8002320:	2200      	movs	r2, #0
 8002322:	5e9a      	ldrsh	r2, [r3, r2]
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2100      	movs	r1, #0
 8002328:	5e59      	ldrsh	r1, [r3, r1]
 800232a:	1dbb      	adds	r3, r7, #6
 800232c:	2000      	movs	r0, #0
 800232e:	5e18      	ldrsh	r0, [r3, r0]
 8002330:	003b      	movs	r3, r7
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2303      	movs	r3, #3
 800233c:	f000 f804 	bl	8002348 <fillCircleHelper>
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bdb0      	pop	{r4, r5, r7, pc}

08002348 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	0005      	movs	r5, r0
 8002350:	000c      	movs	r4, r1
 8002352:	0010      	movs	r0, r2
 8002354:	0019      	movs	r1, r3
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	1c2a      	adds	r2, r5, #0
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	1c22      	adds	r2, r4, #0
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	1c02      	adds	r2, r0, #0
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	1c7b      	adds	r3, r7, #1
 800236a:	1c0a      	adds	r2, r1, #0
 800236c:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 800236e:	1cbb      	adds	r3, r7, #2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b29a      	uxth	r2, r3
 8002378:	2316      	movs	r3, #22
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 800237e:	2314      	movs	r3, #20
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002386:	1cbb      	adds	r3, r7, #2
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	1c1a      	adds	r2, r3, #0
 800238c:	03d2      	lsls	r2, r2, #15
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	18db      	adds	r3, r3, r3
 8002392:	b29a      	uxth	r2, r3
 8002394:	2312      	movs	r3, #18
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 800239a:	2110      	movs	r1, #16
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 80023a2:	200e      	movs	r0, #14
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	1cba      	adds	r2, r7, #2
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 80023ac:	230c      	movs	r3, #12
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	187a      	adds	r2, r7, r1
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 80023b6:	230a      	movs	r3, #10
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	183a      	adds	r2, r7, r0
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 80023c0:	2128      	movs	r1, #40	; 0x28
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2200      	movs	r2, #0
 80023c6:	5e9b      	ldrsh	r3, [r3, r2]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 80023d2:	e0e7      	b.n	80025a4 <fillCircleHelper+0x25c>
        if (f >= 0) {
 80023d4:	2316      	movs	r3, #22
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	5e9b      	ldrsh	r3, [r3, r2]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db18      	blt.n	8002412 <fillCircleHelper+0xca>
            y--;
 80023e0:	210e      	movs	r1, #14
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	2200      	movs	r2, #0
 80023e6:	5e9b      	ldrsh	r3, [r3, r2]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 80023f2:	2112      	movs	r1, #18
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	3302      	adds	r3, #2
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8002400:	2016      	movs	r0, #22
 8002402:	183b      	adds	r3, r7, r0
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	187b      	adds	r3, r7, r1
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	18d3      	adds	r3, r2, r3
 800240c:	b29a      	uxth	r2, r3
 800240e:	183b      	adds	r3, r7, r0
 8002410:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002412:	2110      	movs	r1, #16
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2200      	movs	r2, #0
 8002418:	5e9b      	ldrsh	r3, [r3, r2]
 800241a:	b29b      	uxth	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	187b      	adds	r3, r7, r1
 8002422:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002424:	2014      	movs	r0, #20
 8002426:	183b      	adds	r3, r7, r0
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	3302      	adds	r3, #2
 800242c:	b29a      	uxth	r2, r3
 800242e:	183b      	adds	r3, r7, r0
 8002430:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002432:	2416      	movs	r4, #22
 8002434:	193b      	adds	r3, r7, r4
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	183b      	adds	r3, r7, r0
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	18d3      	adds	r3, r2, r3
 800243e:	b29a      	uxth	r2, r3
 8002440:	193b      	adds	r3, r7, r4
 8002442:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	5e9a      	ldrsh	r2, [r3, r2]
 800244a:	230e      	movs	r3, #14
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2100      	movs	r1, #0
 8002450:	5e5b      	ldrsh	r3, [r3, r1]
 8002452:	3301      	adds	r3, #1
 8002454:	429a      	cmp	r2, r3
 8002456:	da47      	bge.n	80024e8 <fillCircleHelper+0x1a0>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8002458:	1c7b      	adds	r3, r7, #1
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	d01e      	beq.n	80024a0 <fillCircleHelper+0x158>
 8002462:	1dbb      	adds	r3, r7, #6
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	2310      	movs	r3, #16
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	b218      	sxth	r0, r3
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	240e      	movs	r4, #14
 8002478:	193b      	adds	r3, r7, r4
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b29b      	uxth	r3, r3
 8002480:	b219      	sxth	r1, r3
 8002482:	193b      	adds	r3, r7, r4
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	18db      	adds	r3, r3, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	2328      	movs	r3, #40	; 0x28
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	b21a      	sxth	r2, r3
 8002496:	232c      	movs	r3, #44	; 0x2c
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	f7ff fbd2 	bl	8001c44 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80024a0:	1c7b      	adds	r3, r7, #1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d01e      	beq.n	80024e8 <fillCircleHelper+0x1a0>
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	2310      	movs	r3, #16
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b218      	sxth	r0, r3
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	240e      	movs	r4, #14
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b219      	sxth	r1, r3
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	18db      	adds	r3, r3, r3
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	2328      	movs	r3, #40	; 0x28
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21a      	sxth	r2, r3
 80024de:	232c      	movs	r3, #44	; 0x2c
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f7ff fbae 	bl	8001c44 <drawFastVLine>
        }
        if(y != py) {
 80024e8:	230e      	movs	r3, #14
 80024ea:	18fa      	adds	r2, r7, r3
 80024ec:	230a      	movs	r3, #10
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2100      	movs	r1, #0
 80024f2:	5e52      	ldrsh	r2, [r2, r1]
 80024f4:	2100      	movs	r1, #0
 80024f6:	5e5b      	ldrsh	r3, [r3, r1]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d04d      	beq.n	8002598 <fillCircleHelper+0x250>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80024fc:	1c7b      	adds	r3, r7, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d01e      	beq.n	8002544 <fillCircleHelper+0x1fc>
 8002506:	1dbb      	adds	r3, r7, #6
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	230a      	movs	r3, #10
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	18d3      	adds	r3, r2, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	b218      	sxth	r0, r3
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	240c      	movs	r4, #12
 800251c:	193b      	adds	r3, r7, r4
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	b219      	sxth	r1, r3
 8002526:	193b      	adds	r3, r7, r4
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	18db      	adds	r3, r3, r3
 800252c:	b29a      	uxth	r2, r3
 800252e:	2328      	movs	r3, #40	; 0x28
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	b21a      	sxth	r2, r3
 800253a:	232c      	movs	r3, #44	; 0x2c
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f7ff fb80 	bl	8001c44 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8002544:	1c7b      	adds	r3, r7, #1
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d01e      	beq.n	800258c <fillCircleHelper+0x244>
 800254e:	1dbb      	adds	r3, r7, #6
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	230a      	movs	r3, #10
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	b29b      	uxth	r3, r3
 800255c:	b218      	sxth	r0, r3
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	240c      	movs	r4, #12
 8002564:	193b      	adds	r3, r7, r4
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b29b      	uxth	r3, r3
 800256c:	b219      	sxth	r1, r3
 800256e:	193b      	adds	r3, r7, r4
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	18db      	adds	r3, r3, r3
 8002574:	b29a      	uxth	r2, r3
 8002576:	2328      	movs	r3, #40	; 0x28
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	b29b      	uxth	r3, r3
 8002580:	b21a      	sxth	r2, r3
 8002582:	232c      	movs	r3, #44	; 0x2c
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	f7ff fb5c 	bl	8001c44 <drawFastVLine>
            py = y;
 800258c:	230a      	movs	r3, #10
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	220e      	movs	r2, #14
 8002592:	18ba      	adds	r2, r7, r2
 8002594:	8812      	ldrh	r2, [r2, #0]
 8002596:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 8002598:	230c      	movs	r3, #12
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2210      	movs	r2, #16
 800259e:	18ba      	adds	r2, r7, r2
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 80025a4:	2310      	movs	r3, #16
 80025a6:	18fa      	adds	r2, r7, r3
 80025a8:	230e      	movs	r3, #14
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	5e52      	ldrsh	r2, [r2, r1]
 80025b0:	2100      	movs	r1, #0
 80025b2:	5e5b      	ldrsh	r3, [r3, r1]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	da00      	bge.n	80025ba <fillCircleHelper+0x272>
 80025b8:	e70c      	b.n	80023d4 <fillCircleHelper+0x8c>
    }
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b006      	add	sp, #24
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080025c4 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80025c4:	b5b0      	push	{r4, r5, r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	0005      	movs	r5, r0
 80025cc:	000c      	movs	r4, r1
 80025ce:	0010      	movs	r0, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	1c2a      	adds	r2, r5, #0
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	1c22      	adds	r2, r4, #0
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	1cbb      	adds	r3, r7, #2
 80025e0:	1c02      	adds	r2, r0, #0
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	003b      	movs	r3, r7
 80025e6:	1c0a      	adds	r2, r1, #0
 80025e8:	801a      	strh	r2, [r3, #0]
    int16_t end;
    if (w < 0) {
 80025ea:	1cbb      	adds	r3, r7, #2
 80025ec:	2200      	movs	r2, #0
 80025ee:	5e9b      	ldrsh	r3, [r3, r2]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da0d      	bge.n	8002610 <fillRect+0x4c>
        w = -w;
 80025f4:	1cbb      	adds	r3, r7, #2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	425b      	negs	r3, r3
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	1cbb      	adds	r3, r7, #2
 80025fe:	801a      	strh	r2, [r3, #0]
        x -= w;
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	b29a      	uxth	r2, r3
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	801a      	strh	r2, [r3, #0]
    }                           //+ve w
    end = x + w;
 8002610:	1dbb      	adds	r3, r7, #6
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	1cbb      	adds	r3, r7, #2
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	18d3      	adds	r3, r2, r3
 800261a:	b29a      	uxth	r2, r3
 800261c:	230e      	movs	r3, #14
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	801a      	strh	r2, [r3, #0]
    if (x < 0)
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	2200      	movs	r2, #0
 8002626:	5e9b      	ldrsh	r3, [r3, r2]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da02      	bge.n	8002632 <fillRect+0x6e>
        x = 0;
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	2200      	movs	r2, #0
 8002630:	801a      	strh	r2, [r3, #0]
    if (end > width())
 8002632:	230e      	movs	r3, #14
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2400      	movs	r4, #0
 8002638:	5f1c      	ldrsh	r4, [r3, r4]
 800263a:	f7fe f827 	bl	800068c <width>
 800263e:	0003      	movs	r3, r0
 8002640:	429c      	cmp	r4, r3
 8002642:	dd06      	ble.n	8002652 <fillRect+0x8e>
        end = width();
 8002644:	f7fe f822 	bl	800068c <width>
 8002648:	0003      	movs	r3, r0
 800264a:	001a      	movs	r2, r3
 800264c:	230e      	movs	r3, #14
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	801a      	strh	r2, [r3, #0]
    w = end - x;
 8002652:	230e      	movs	r3, #14
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	b29a      	uxth	r2, r3
 8002660:	1cbb      	adds	r3, r7, #2
 8002662:	801a      	strh	r2, [r3, #0]
    if (h < 0) {
 8002664:	003b      	movs	r3, r7
 8002666:	2200      	movs	r2, #0
 8002668:	5e9b      	ldrsh	r3, [r3, r2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da0d      	bge.n	800268a <fillRect+0xc6>
        h = -h;
 800266e:	003b      	movs	r3, r7
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	425b      	negs	r3, r3
 8002674:	b29a      	uxth	r2, r3
 8002676:	003b      	movs	r3, r7
 8002678:	801a      	strh	r2, [r3, #0]
        y -= h;
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	003b      	movs	r3, r7
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b29a      	uxth	r2, r3
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	801a      	strh	r2, [r3, #0]
    }                           //+ve h
    end = y + h;
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	003b      	movs	r3, r7
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	b29a      	uxth	r2, r3
 8002696:	230e      	movs	r3, #14
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	801a      	strh	r2, [r3, #0]
    if (y < 0)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2200      	movs	r2, #0
 80026a0:	5e9b      	ldrsh	r3, [r3, r2]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da02      	bge.n	80026ac <fillRect+0xe8>
        y = 0;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]
    if (end > height())
 80026ac:	230e      	movs	r3, #14
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2400      	movs	r4, #0
 80026b2:	5f1c      	ldrsh	r4, [r3, r4]
 80026b4:	f7fd fff4 	bl	80006a0 <height>
 80026b8:	0003      	movs	r3, r0
 80026ba:	429c      	cmp	r4, r3
 80026bc:	dd06      	ble.n	80026cc <fillRect+0x108>
        end = height();
 80026be:	f7fd ffef 	bl	80006a0 <height>
 80026c2:	0003      	movs	r3, r0
 80026c4:	001a      	movs	r2, r3
 80026c6:	230e      	movs	r3, #14
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	801a      	strh	r2, [r3, #0]
    h = end - y;
 80026cc:	230e      	movs	r3, #14
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29a      	uxth	r2, r3
 80026da:	003b      	movs	r3, r7
 80026dc:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	b21c      	sxth	r4, r3
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	003b      	movs	r3, r7
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21a      	sxth	r2, r3
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2100      	movs	r1, #0
 8002706:	5e59      	ldrsh	r1, [r3, r1]
 8002708:	1dbb      	adds	r3, r7, #6
 800270a:	2000      	movs	r0, #0
 800270c:	5e18      	ldrsh	r0, [r3, r0]
 800270e:	0013      	movs	r3, r2
 8002710:	0022      	movs	r2, r4
 8002712:	f7ff f89b 	bl	800184c <setAddrWindow>
    CS_ACTIVE;
 8002716:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <fillRect+0x344>)
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	0018      	movs	r0, r3
 800271e:	f000 febf 	bl	80034a0 <HAL_GPIO_WritePin>
    WriteCmd(_MW);
 8002722:	2390      	movs	r3, #144	; 0x90
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	2200      	movs	r2, #0
 8002728:	2110      	movs	r1, #16
 800272a:	0018      	movs	r0, r3
 800272c:	f000 feb8 	bl	80034a0 <HAL_GPIO_WritePin>
 8002730:	4b76      	ldr	r3, [pc, #472]	; (800290c <fillRect+0x348>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b29a      	uxth	r2, r3
 8002738:	210d      	movs	r1, #13
 800273a:	187b      	adds	r3, r7, r1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <fillRect+0x348>)
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	240c      	movs	r4, #12
 8002744:	193b      	adds	r3, r7, r4
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	2390      	movs	r3, #144	; 0x90
 800274a:	05db      	lsls	r3, r3, #23
 800274c:	22e0      	movs	r2, #224	; 0xe0
 800274e:	04d2      	lsls	r2, r2, #19
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <fillRect+0x344>)
 8002754:	2287      	movs	r2, #135	; 0x87
 8002756:	04d2      	lsls	r2, r2, #19
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <fillRect+0x34c>)
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0412      	lsls	r2, r2, #16
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	0008      	movs	r0, r1
 8002764:	183b      	adds	r3, r7, r0
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	025a      	lsls	r2, r3, #9
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	401a      	ands	r2, r3
 8002770:	183b      	adds	r3, r7, r0
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	0219      	lsls	r1, r3, #8
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	400b      	ands	r3, r1
 800277c:	431a      	orrs	r2, r3
 800277e:	183b      	adds	r3, r7, r0
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	0059      	lsls	r1, r3, #1
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	400b      	ands	r3, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	2390      	movs	r3, #144	; 0x90
 800278e:	05db      	lsls	r3, r3, #23
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	183b      	adds	r3, r7, r0
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	401a      	ands	r2, r3
 800279a:	183b      	adds	r3, r7, r0
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2120      	movs	r1, #32
 80027a2:	400b      	ands	r3, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	183b      	adds	r3, r7, r0
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	105b      	asrs	r3, r3, #1
 80027ac:	2110      	movs	r1, #16
 80027ae:	400b      	ands	r3, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0119      	lsls	r1, r3, #4
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	400b      	ands	r3, r1
 80027be:	431a      	orrs	r2, r3
 80027c0:	4b51      	ldr	r3, [pc, #324]	; (8002908 <fillRect+0x344>)
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	0019      	movs	r1, r3
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <fillRect+0x34c>)
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	400a      	ands	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
 80027d4:	2390      	movs	r3, #144	; 0x90
 80027d6:	05db      	lsls	r3, r3, #23
 80027d8:	2200      	movs	r2, #0
 80027da:	2102      	movs	r1, #2
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fe5f 	bl	80034a0 <HAL_GPIO_WritePin>
 80027e2:	2390      	movs	r3, #144	; 0x90
 80027e4:	05db      	lsls	r3, r3, #23
 80027e6:	2201      	movs	r2, #1
 80027e8:	2102      	movs	r1, #2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fe58 	bl	80034a0 <HAL_GPIO_WritePin>
 80027f0:	2390      	movs	r3, #144	; 0x90
 80027f2:	05db      	lsls	r3, r3, #23
 80027f4:	2201      	movs	r2, #1
 80027f6:	2102      	movs	r1, #2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fe51 	bl	80034a0 <HAL_GPIO_WritePin>
 80027fe:	2390      	movs	r3, #144	; 0x90
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	22e0      	movs	r2, #224	; 0xe0
 8002804:	04d2      	lsls	r2, r2, #19
 8002806:	619a      	str	r2, [r3, #24]
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <fillRect+0x344>)
 800280a:	2287      	movs	r2, #135	; 0x87
 800280c:	04d2      	lsls	r2, r2, #19
 800280e:	619a      	str	r2, [r3, #24]
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <fillRect+0x34c>)
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	0412      	lsls	r2, r2, #16
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	193b      	adds	r3, r7, r4
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	025a      	lsls	r2, r3, #9
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	401a      	ands	r2, r3
 8002824:	193b      	adds	r3, r7, r4
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	0219      	lsls	r1, r3, #8
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	400b      	ands	r3, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	193b      	adds	r3, r7, r4
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	0059      	lsls	r1, r3, #1
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	2390      	movs	r3, #144	; 0x90
 8002842:	05db      	lsls	r3, r3, #23
 8002844:	619a      	str	r2, [r3, #24]
 8002846:	0020      	movs	r0, r4
 8002848:	183b      	adds	r3, r7, r0
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2208      	movs	r2, #8
 800284e:	401a      	ands	r2, r3
 8002850:	183b      	adds	r3, r7, r0
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2120      	movs	r1, #32
 8002858:	400b      	ands	r3, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	183b      	adds	r3, r7, r0
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	105b      	asrs	r3, r3, #1
 8002862:	2110      	movs	r1, #16
 8002864:	400b      	ands	r3, r1
 8002866:	431a      	orrs	r2, r3
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	0119      	lsls	r1, r3, #4
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	400b      	ands	r3, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <fillRect+0x344>)
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	183b      	adds	r3, r7, r0
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	019b      	lsls	r3, r3, #6
 8002880:	0019      	movs	r1, r3
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <fillRect+0x34c>)
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	400a      	ands	r2, r1
 8002888:	619a      	str	r2, [r3, #24]
 800288a:	2390      	movs	r3, #144	; 0x90
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	2200      	movs	r2, #0
 8002890:	2102      	movs	r1, #2
 8002892:	0018      	movs	r0, r3
 8002894:	f000 fe04 	bl	80034a0 <HAL_GPIO_WritePin>
 8002898:	2390      	movs	r3, #144	; 0x90
 800289a:	05db      	lsls	r3, r3, #23
 800289c:	2201      	movs	r2, #1
 800289e:	2102      	movs	r1, #2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fdfd 	bl	80034a0 <HAL_GPIO_WritePin>
 80028a6:	2390      	movs	r3, #144	; 0x90
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	2201      	movs	r2, #1
 80028ac:	2102      	movs	r1, #2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 fdf6 	bl	80034a0 <HAL_GPIO_WritePin>
 80028b4:	2390      	movs	r3, #144	; 0x90
 80028b6:	05db      	lsls	r3, r3, #23
 80028b8:	2201      	movs	r2, #1
 80028ba:	2110      	movs	r1, #16
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fdef 	bl	80034a0 <HAL_GPIO_WritePin>
    if (h > w) {
 80028c2:	003a      	movs	r2, r7
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	2100      	movs	r1, #0
 80028c8:	5e52      	ldrsh	r2, [r2, r1]
 80028ca:	2100      	movs	r1, #0
 80028cc:	5e5b      	ldrsh	r3, [r3, r1]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dd0c      	ble.n	80028ec <fillRect+0x328>
        end = h;
 80028d2:	210e      	movs	r1, #14
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	003a      	movs	r2, r7
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	801a      	strh	r2, [r3, #0]
        h = w;
 80028dc:	003b      	movs	r3, r7
 80028de:	1cba      	adds	r2, r7, #2
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	801a      	strh	r2, [r3, #0]
        w = end;
 80028e4:	1cbb      	adds	r3, r7, #2
 80028e6:	187a      	adds	r2, r7, r1
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	801a      	strh	r2, [r3, #0]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80028ec:	2120      	movs	r1, #32
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	230b      	movs	r3, #11
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	230a      	movs	r3, #10
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	187a      	adds	r2, r7, r1
 8002902:	8812      	ldrh	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
    while (h-- > 0) {
 8002906:	e0cd      	b.n	8002aa4 <fillRect+0x4e0>
 8002908:	48000400 	.word	0x48000400
 800290c:	2000007a 	.word	0x2000007a
 8002910:	48000800 	.word	0x48000800
        end = w;
 8002914:	230e      	movs	r3, #14
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	1cba      	adds	r2, r7, #2
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	801a      	strh	r2, [r3, #0]

        do {
            write8(hi);
 800291e:	2390      	movs	r3, #144	; 0x90
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	22e0      	movs	r2, #224	; 0xe0
 8002924:	04d2      	lsls	r2, r2, #19
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	4b7a      	ldr	r3, [pc, #488]	; (8002b14 <fillRect+0x550>)
 800292a:	2287      	movs	r2, #135	; 0x87
 800292c:	04d2      	lsls	r2, r2, #19
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <fillRect+0x554>)
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	0412      	lsls	r2, r2, #16
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	200b      	movs	r0, #11
 800293a:	183b      	adds	r3, r7, r0
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	025a      	lsls	r2, r3, #9
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	401a      	ands	r2, r3
 8002946:	183b      	adds	r3, r7, r0
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	0219      	lsls	r1, r3, #8
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	400b      	ands	r3, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	183b      	adds	r3, r7, r0
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	0059      	lsls	r1, r3, #1
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	400b      	ands	r3, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	2390      	movs	r3, #144	; 0x90
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	619a      	str	r2, [r3, #24]
 8002968:	183b      	adds	r3, r7, r0
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2208      	movs	r2, #8
 800296e:	401a      	ands	r2, r3
 8002970:	183b      	adds	r3, r7, r0
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2120      	movs	r1, #32
 8002978:	400b      	ands	r3, r1
 800297a:	431a      	orrs	r2, r3
 800297c:	183b      	adds	r3, r7, r0
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	105b      	asrs	r3, r3, #1
 8002982:	2110      	movs	r1, #16
 8002984:	400b      	ands	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	183b      	adds	r3, r7, r0
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	0119      	lsls	r1, r3, #4
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	400b      	ands	r3, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <fillRect+0x550>)
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	183b      	adds	r3, r7, r0
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	019b      	lsls	r3, r3, #6
 80029a0:	0019      	movs	r1, r3
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <fillRect+0x554>)
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	400a      	ands	r2, r1
 80029a8:	619a      	str	r2, [r3, #24]
 80029aa:	2390      	movs	r3, #144	; 0x90
 80029ac:	05db      	lsls	r3, r3, #23
 80029ae:	2200      	movs	r2, #0
 80029b0:	2102      	movs	r1, #2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fd74 	bl	80034a0 <HAL_GPIO_WritePin>
 80029b8:	2390      	movs	r3, #144	; 0x90
 80029ba:	05db      	lsls	r3, r3, #23
 80029bc:	2201      	movs	r2, #1
 80029be:	2102      	movs	r1, #2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fd6d 	bl	80034a0 <HAL_GPIO_WritePin>
 80029c6:	2390      	movs	r3, #144	; 0x90
 80029c8:	05db      	lsls	r3, r3, #23
 80029ca:	2201      	movs	r2, #1
 80029cc:	2102      	movs	r1, #2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fd66 	bl	80034a0 <HAL_GPIO_WritePin>
            write8(lo);
 80029d4:	2390      	movs	r3, #144	; 0x90
 80029d6:	05db      	lsls	r3, r3, #23
 80029d8:	22e0      	movs	r2, #224	; 0xe0
 80029da:	04d2      	lsls	r2, r2, #19
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <fillRect+0x550>)
 80029e0:	2287      	movs	r2, #135	; 0x87
 80029e2:	04d2      	lsls	r2, r2, #19
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <fillRect+0x554>)
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0412      	lsls	r2, r2, #16
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	200a      	movs	r0, #10
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	025a      	lsls	r2, r3, #9
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	401a      	ands	r2, r3
 80029fc:	183b      	adds	r3, r7, r0
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	0219      	lsls	r1, r3, #8
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	400b      	ands	r3, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	0059      	lsls	r1, r3, #1
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	400b      	ands	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	2390      	movs	r3, #144	; 0x90
 8002a1a:	05db      	lsls	r3, r3, #23
 8002a1c:	619a      	str	r2, [r3, #24]
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2208      	movs	r2, #8
 8002a24:	401a      	ands	r2, r3
 8002a26:	183b      	adds	r3, r7, r0
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	400b      	ands	r3, r1
 8002a30:	431a      	orrs	r2, r3
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	105b      	asrs	r3, r3, #1
 8002a38:	2110      	movs	r1, #16
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	0119      	lsls	r1, r3, #4
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	400b      	ands	r3, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <fillRect+0x550>)
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <fillRect+0x554>)
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	2390      	movs	r3, #144	; 0x90
 8002a62:	05db      	lsls	r3, r3, #23
 8002a64:	2200      	movs	r2, #0
 8002a66:	2102      	movs	r1, #2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fd19 	bl	80034a0 <HAL_GPIO_WritePin>
 8002a6e:	2390      	movs	r3, #144	; 0x90
 8002a70:	05db      	lsls	r3, r3, #23
 8002a72:	2201      	movs	r2, #1
 8002a74:	2102      	movs	r1, #2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 fd12 	bl	80034a0 <HAL_GPIO_WritePin>
 8002a7c:	2390      	movs	r3, #144	; 0x90
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2201      	movs	r2, #1
 8002a82:	2102      	movs	r1, #2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fd0b 	bl	80034a0 <HAL_GPIO_WritePin>
        } while (--end != 0);
 8002a8a:	210e      	movs	r1, #14
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d000      	beq.n	8002aa4 <fillRect+0x4e0>
 8002aa2:	e73c      	b.n	800291e <fillRect+0x35a>
    while (h-- > 0) {
 8002aa4:	003b      	movs	r3, r7
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	3a01      	subs	r2, #1
 8002aae:	b291      	uxth	r1, r2
 8002ab0:	003a      	movs	r2, r7
 8002ab2:	8011      	strh	r1, [r2, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	dd00      	ble.n	8002aba <fillRect+0x4f6>
 8002ab8:	e72c      	b.n	8002914 <fillRect+0x350>
    }
    CS_IDLE;
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <fillRect+0x550>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	2101      	movs	r1, #1
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fced 	bl	80034a0 <HAL_GPIO_WritePin>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <fillRect+0x558>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	001a      	movs	r2, r3
 8002acc:	2301      	movs	r3, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <fillRect+0x524>
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <fillRect+0x55c>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <fillRect+0x560>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d116      	bne.n	8002b0a <fillRect+0x546>
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <fillRect+0x564>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d010      	beq.n	8002b0a <fillRect+0x546>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002ae8:	f7fd fdd0 	bl	800068c <width>
 8002aec:	0003      	movs	r3, r0
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b21c      	sxth	r4, r3
 8002af4:	f7fd fdd4 	bl	80006a0 <height>
 8002af8:	0003      	movs	r3, r0
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	0022      	movs	r2, r4
 8002b02:	2100      	movs	r1, #0
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe fea1 	bl	800184c <setAddrWindow>
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bdb0      	pop	{r4, r5, r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	48000400 	.word	0x48000400
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	2000007c 	.word	0x2000007c
 8002b20:	2000008a 	.word	0x2000008a
 8002b24:	00001526 	.word	0x00001526
 8002b28:	2000002f 	.word	0x2000002f

08002b2c <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7ff f833 	bl	8001b9c <fillScreen>
    fillScreen(RED);
 8002b36:	23f8      	movs	r3, #248	; 0xf8
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff f82e 	bl	8001b9c <fillScreen>
    fillScreen(GREEN);
 8002b40:	23fc      	movs	r3, #252	; 0xfc
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff f829 	bl	8001b9c <fillScreen>
    fillScreen(BLUE);
 8002b4a:	201f      	movs	r0, #31
 8002b4c:	f7ff f826 	bl	8001b9c <fillScreen>
    fillScreen(BLACK);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff f823 	bl	8001b9c <fillScreen>
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <testLines>:

void testLines(uint16_t color)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dbb      	adds	r3, r7, #6
 8002b66:	801a      	strh	r2, [r3, #0]
    int           x1, y1, x2, y2,
                  w = width(),
 8002b68:	f7fd fd90 	bl	800068c <width>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	617b      	str	r3, [r7, #20]
                  h = height();
 8002b70:	f7fd fd96 	bl	80006a0 <height>
 8002b74:	0003      	movs	r3, r0
 8002b76:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff f80f 	bl	8001b9c <fillScreen>

    x1 = y1 = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	e010      	b.n	8002bb4 <testLines+0x58>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	b218      	sxth	r0, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	b219      	sxth	r1, r3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	b21c      	sxth	r4, r3
 8002ba2:	1dbb      	adds	r3, r7, #6
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	0023      	movs	r3, r4
 8002baa:	f7ff f9af 	bl	8001f0c <drawLine>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3306      	adds	r3, #6
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbea      	blt.n	8002b92 <testLines+0x36>
    x2    = w - 1;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	e010      	b.n	8002bea <testLines+0x8e>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	b218      	sxth	r0, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	b219      	sxth	r1, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	b21c      	sxth	r4, r3
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	0023      	movs	r3, r4
 8002be0:	f7ff f994 	bl	8001f0c <drawLine>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	3306      	adds	r3, #6
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbea      	blt.n	8002bc8 <testLines+0x6c>

    fillScreen(BLACK);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fe ffd2 	bl	8001b9c <fillScreen>

    x1    = w - 1;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	e010      	b.n	8002c30 <testLines+0xd4>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	b218      	sxth	r0, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	b219      	sxth	r1, r3
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	b21c      	sxth	r4, r3
 8002c1e:	1dbb      	adds	r3, r7, #6
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	0023      	movs	r3, r4
 8002c26:	f7ff f971 	bl	8001f0c <drawLine>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3306      	adds	r3, #6
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbea      	blt.n	8002c0e <testLines+0xb2>
    x2    = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e010      	b.n	8002c64 <testLines+0x108>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	b218      	sxth	r0, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	b219      	sxth	r1, r3
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	b21c      	sxth	r4, r3
 8002c52:	1dbb      	adds	r3, r7, #6
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	0023      	movs	r3, r4
 8002c5a:	f7ff f957 	bl	8001f0c <drawLine>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3306      	adds	r3, #6
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbea      	blt.n	8002c42 <testLines+0xe6>

    fillScreen(BLACK);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe ff95 	bl	8001b9c <fillScreen>

    x1    = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e010      	b.n	8002ca8 <testLines+0x14c>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	b218      	sxth	r0, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	b219      	sxth	r1, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	b21c      	sxth	r4, r3
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	0023      	movs	r3, r4
 8002c9e:	f7ff f935 	bl	8001f0c <drawLine>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3306      	adds	r3, #6
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	dbea      	blt.n	8002c86 <testLines+0x12a>
    x2    = w - 1;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e010      	b.n	8002cde <testLines+0x182>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	b218      	sxth	r0, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b219      	sxth	r1, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	b21c      	sxth	r4, r3
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	0023      	movs	r3, r4
 8002cd4:	f7ff f91a 	bl	8001f0c <drawLine>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	3306      	adds	r3, #6
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	dbea      	blt.n	8002cbc <testLines+0x160>

    fillScreen(BLACK);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe ff58 	bl	8001b9c <fillScreen>

    x1    = w - 1;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	e010      	b.n	8002d24 <testLines+0x1c8>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	b218      	sxth	r0, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	b219      	sxth	r1, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	b21c      	sxth	r4, r3
 8002d12:	1dbb      	adds	r3, r7, #6
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	0023      	movs	r3, r4
 8002d1a:	f7ff f8f7 	bl	8001f0c <drawLine>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3306      	adds	r3, #6
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbea      	blt.n	8002d02 <testLines+0x1a6>
    x2    = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e010      	b.n	8002d58 <testLines+0x1fc>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	b218      	sxth	r0, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b219      	sxth	r1, r3
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	b21c      	sxth	r4, r3
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	0023      	movs	r3, r4
 8002d4e:	f7ff f8dd 	bl	8001f0c <drawLine>
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3306      	adds	r3, #6
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	dbea      	blt.n	8002d36 <testLines+0x1da>

}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b009      	add	sp, #36	; 0x24
 8002d66:	bd90      	pop	{r4, r7, pc}

08002d68 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	1dbb      	adds	r3, r7, #6
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	1c0a      	adds	r2, r1, #0
 8002d78:	801a      	strh	r2, [r3, #0]
    int           x, y, w = width(), h = height();
 8002d7a:	f7fd fc87 	bl	800068c <width>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	f7fd fc8d 	bl	80006a0 <height>
 8002d86:	0003      	movs	r3, r0
 8002d88:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fe ff06 	bl	8001b9c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e00b      	b.n	8002dae <testFastLines+0x46>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	b219      	sxth	r1, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	1dbb      	adds	r3, r7, #6
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fe ff75 	bl	8001c92 <drawFastHLine>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3305      	adds	r3, #5
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	dbef      	blt.n	8002d96 <testFastLines+0x2e>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e00b      	b.n	8002dd4 <testFastLines+0x6c>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	b218      	sxth	r0, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f7fe ff3b 	bl	8001c44 <drawFastVLine>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3305      	adds	r3, #5
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dbef      	blt.n	8002dbc <testFastLines+0x54>
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b006      	add	sp, #24
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	1c0a      	adds	r2, r1, #0
 8002df4:	801a      	strh	r2, [r3, #0]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8002df6:	f7fd fc49 	bl	800068c <width>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	f7fd fc4f 	bl	80006a0 <height>
 8002e02:	0003      	movs	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fe fec4 	bl	8001b9c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e01a      	b.n	8002e52 <testFilledCircles+0x6e>
        for (y = radius; y < h; y += r2) {
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e00e      	b.n	8002e42 <testFilledCircles+0x5e>
            fillCircle(x, y, radius, color);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	b218      	sxth	r0, r3
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	b219      	sxth	r1, r3
 8002e2c:	1dfb      	adds	r3, r7, #7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f7ff fa49 	bl	80022cc <fillCircle>
        for (y = radius; y < h; y += r2) {
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	dbec      	blt.n	8002e24 <testFilledCircles+0x40>
    for (x = radius; x < w; x += r2) {
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	18d3      	adds	r3, r2, r3
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	dbe0      	blt.n	8002e1c <testFilledCircles+0x38>
        }
    }
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b008      	add	sp, #32
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	0002      	movs	r2, r0
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	1c0a      	adds	r2, r1, #0
 8002e72:	801a      	strh	r2, [r3, #0]
    int           x, y, r2 = radius * 2,
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8002e7c:	f7fd fc06 	bl	800068c <width>
 8002e80:	0003      	movs	r3, r0
 8002e82:	001a      	movs	r2, r3
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	18d3      	adds	r3, r2, r3
 8002e8a:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8002e8c:	f7fd fc08 	bl	80006a0 <height>
 8002e90:	0003      	movs	r3, r0
 8002e92:	001a      	movs	r2, r3
 8002e94:	1dfb      	adds	r3, r7, #7
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	18d3      	adds	r3, r2, r3
 8002e9a:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e019      	b.n	8002ed6 <testCircles+0x74>
        for (y = 0; y < h; y += r2) {
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e00e      	b.n	8002ec6 <testCircles+0x64>
            drawCircle(x, y, radius, color);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	b218      	sxth	r0, r3
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	b219      	sxth	r1, r3
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f7ff f8b7 	bl	800202c <drawCircle>
        for (y = 0; y < h; y += r2) {
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbec      	blt.n	8002ea8 <testCircles+0x46>
    for (x = 0; x < w; x += r2) {
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbe1      	blt.n	8002ea2 <testCircles+0x40>
        }
    }
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b008      	add	sp, #32
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ee8:	480d      	ldr	r0, [pc, #52]	; (8002f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eee:	490e      	ldr	r1, [pc, #56]	; (8002f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <LoopForever+0xe>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef4:	e002      	b.n	8002efc <LoopCopyDataInit>

08002ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efa:	3304      	adds	r3, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f00:	d3f9      	bcc.n	8002ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f04:	4c0b      	ldr	r4, [pc, #44]	; (8002f34 <LoopForever+0x16>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f08:	e001      	b.n	8002f0e <LoopFillZerobss>

08002f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f0c:	3204      	adds	r2, #4

08002f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f10:	d3fb      	bcc.n	8002f0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f12:	f7fd fb64 	bl	80005de <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f16:	f001 fa8f 	bl	8004438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f1a:	f7fd f981 	bl	8000220 <main>

08002f1e <LoopForever>:

LoopForever:
    b LoopForever
 8002f1e:	e7fe      	b.n	8002f1e <LoopForever>
  ldr   r0, =_estack
 8002f20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002f2c:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8002f30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002f34:	20000098 	.word	0x20000098

08002f38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC1_COMP_IRQHandler>
	...

08002f3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_Init+0x24>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_Init+0x24>)
 8002f46:	2110      	movs	r1, #16
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f000 f809 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f52:	f7fd fae7 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40022000 	.word	0x40022000

08002f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <HAL_InitTick+0x5c>)
 8002f6e:	681c      	ldr	r4, [r3, #0]
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_InitTick+0x60>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	0019      	movs	r1, r3
 8002f76:	23fa      	movs	r3, #250	; 0xfa
 8002f78:	0098      	lsls	r0, r3, #2
 8002f7a:	f7fd f8c5 	bl	8000108 <__udivsi3>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	0019      	movs	r1, r3
 8002f82:	0020      	movs	r0, r4
 8002f84:	f7fd f8c0 	bl	8000108 <__udivsi3>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f903 	bl	8003196 <HAL_SYSTICK_Config>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e00f      	b.n	8002fb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d80b      	bhi.n	8002fb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f8e0 	bl	800316c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_InitTick+0x64>)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b003      	add	sp, #12
 8002fbe:	bd90      	pop	{r4, r7, pc}
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	20000008 	.word	0x20000008

08002fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_IncTick+0x1c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_IncTick+0x20>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	18d2      	adds	r2, r2, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_IncTick+0x20>)
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	20000094 	.word	0x20000094

08002ff0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <HAL_GetTick+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	20000094 	.word	0x20000094

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff fff0 	bl	8002ff0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3301      	adds	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_Delay+0x40>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	001a      	movs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	189b      	adds	r3, r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	f7ff ffe0 	bl	8002ff0 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	2000000c 	.word	0x2000000c

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	0002      	movs	r2, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b7f      	cmp	r3, #127	; 0x7f
 800305c:	d828      	bhi.n	80030b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800305e:	4a2f      	ldr	r2, [pc, #188]	; (800311c <__NVIC_SetPriority+0xd4>)
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b25b      	sxtb	r3, r3
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	33c0      	adds	r3, #192	; 0xc0
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	589b      	ldr	r3, [r3, r2]
 800306e:	1dfa      	adds	r2, r7, #7
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	0011      	movs	r1, r2
 8003074:	2203      	movs	r2, #3
 8003076:	400a      	ands	r2, r1
 8003078:	00d2      	lsls	r2, r2, #3
 800307a:	21ff      	movs	r1, #255	; 0xff
 800307c:	4091      	lsls	r1, r2
 800307e:	000a      	movs	r2, r1
 8003080:	43d2      	mvns	r2, r2
 8003082:	401a      	ands	r2, r3
 8003084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	401a      	ands	r2, r3
 800308e:	1dfb      	adds	r3, r7, #7
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	0018      	movs	r0, r3
 8003094:	2303      	movs	r3, #3
 8003096:	4003      	ands	r3, r0
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <__NVIC_SetPriority+0xd4>)
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	430a      	orrs	r2, r1
 80030a8:	33c0      	adds	r3, #192	; 0xc0
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030ae:	e031      	b.n	8003114 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <__NVIC_SetPriority+0xd8>)
 80030b2:	1dfb      	adds	r3, r7, #7
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	0019      	movs	r1, r3
 80030b8:	230f      	movs	r3, #15
 80030ba:	400b      	ands	r3, r1
 80030bc:	3b08      	subs	r3, #8
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3306      	adds	r3, #6
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	3304      	adds	r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1dfa      	adds	r2, r7, #7
 80030cc:	7812      	ldrb	r2, [r2, #0]
 80030ce:	0011      	movs	r1, r2
 80030d0:	2203      	movs	r2, #3
 80030d2:	400a      	ands	r2, r1
 80030d4:	00d2      	lsls	r2, r2, #3
 80030d6:	21ff      	movs	r1, #255	; 0xff
 80030d8:	4091      	lsls	r1, r2
 80030da:	000a      	movs	r2, r1
 80030dc:	43d2      	mvns	r2, r2
 80030de:	401a      	ands	r2, r3
 80030e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	019b      	lsls	r3, r3, #6
 80030e6:	22ff      	movs	r2, #255	; 0xff
 80030e8:	401a      	ands	r2, r3
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	0018      	movs	r0, r3
 80030f0:	2303      	movs	r3, #3
 80030f2:	4003      	ands	r3, r0
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030f8:	4809      	ldr	r0, [pc, #36]	; (8003120 <__NVIC_SetPriority+0xd8>)
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	001c      	movs	r4, r3
 8003100:	230f      	movs	r3, #15
 8003102:	4023      	ands	r3, r4
 8003104:	3b08      	subs	r3, #8
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	430a      	orrs	r2, r1
 800310a:	3306      	adds	r3, #6
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	18c3      	adds	r3, r0, r3
 8003110:	3304      	adds	r3, #4
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b003      	add	sp, #12
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	e000e100 	.word	0xe000e100
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <SysTick_Config+0x40>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e010      	b.n	800315c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <SysTick_Config+0x44>)
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	3a01      	subs	r2, #1
 8003140:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	2301      	movs	r3, #1
 8003144:	425b      	negs	r3, r3
 8003146:	2103      	movs	r1, #3
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff7d 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <SysTick_Config+0x44>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <SysTick_Config+0x44>)
 8003156:	2207      	movs	r2, #7
 8003158:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800315a:	2300      	movs	r3, #0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00ffffff 	.word	0x00ffffff
 8003168:	e000e010 	.word	0xe000e010

0800316c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	210f      	movs	r1, #15
 8003178:	187b      	adds	r3, r7, r1
 800317a:	1c02      	adds	r2, r0, #0
 800317c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	187b      	adds	r3, r7, r1
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b25b      	sxtb	r3, r3
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7ff ffbf 	bl	8003124 <SysTick_Config>
 80031a6:	0003      	movs	r3, r0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031be:	e155      	b.n	800346c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4091      	lsls	r1, r2
 80031ca:	000a      	movs	r2, r1
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d100      	bne.n	80031d8 <HAL_GPIO_Init+0x28>
 80031d6:	e146      	b.n	8003466 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d00b      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d007      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ec:	2b11      	cmp	r3, #17
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d130      	bne.n	800325a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	409a      	lsls	r2, r3
 8003206:	0013      	movs	r3, r2
 8003208:	43da      	mvns	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322e:	2201      	movs	r2, #1
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	43da      	mvns	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	2201      	movs	r2, #1
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
 800324c:	0013      	movs	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	43da      	mvns	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0xea>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b12      	cmp	r3, #18
 8003298:	d123      	bne.n	80032e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	58d3      	ldr	r3, [r2, r3]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2207      	movs	r2, #7
 80032ac:	4013      	ands	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	409a      	lsls	r2, r3
 80032b4:	0013      	movs	r3, r2
 80032b6:	43da      	mvns	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2107      	movs	r1, #7
 80032c6:	400b      	ands	r3, r1
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2203      	movs	r2, #3
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	43da      	mvns	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	401a      	ands	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	055b      	lsls	r3, r3, #21
 800331e:	4013      	ands	r3, r2
 8003320:	d100      	bne.n	8003324 <HAL_GPIO_Init+0x174>
 8003322:	e0a0      	b.n	8003466 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_GPIO_Init+0x2d4>)
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	4b56      	ldr	r3, [pc, #344]	; (8003484 <HAL_GPIO_Init+0x2d4>)
 800332a:	2101      	movs	r1, #1
 800332c:	430a      	orrs	r2, r1
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_GPIO_Init+0x2d4>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_GPIO_Init+0x2d8>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	589b      	ldr	r3, [r3, r2]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2203      	movs	r2, #3
 800334e:	4013      	ands	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	409a      	lsls	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	43da      	mvns	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	2390      	movs	r3, #144	; 0x90
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	429a      	cmp	r2, r3
 8003368:	d019      	beq.n	800339e <HAL_GPIO_Init+0x1ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a47      	ldr	r2, [pc, #284]	; (800348c <HAL_GPIO_Init+0x2dc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_GPIO_Init+0x1ea>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a46      	ldr	r2, [pc, #280]	; (8003490 <HAL_GPIO_Init+0x2e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00d      	beq.n	8003396 <HAL_GPIO_Init+0x1e6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a45      	ldr	r2, [pc, #276]	; (8003494 <HAL_GPIO_Init+0x2e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x1e2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a44      	ldr	r2, [pc, #272]	; (8003498 <HAL_GPIO_Init+0x2e8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_GPIO_Init+0x1de>
 800338a:	2304      	movs	r3, #4
 800338c:	e008      	b.n	80033a0 <HAL_GPIO_Init+0x1f0>
 800338e:	2305      	movs	r3, #5
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x1f0>
 8003392:	2303      	movs	r3, #3
 8003394:	e004      	b.n	80033a0 <HAL_GPIO_Init+0x1f0>
 8003396:	2302      	movs	r3, #2
 8003398:	e002      	b.n	80033a0 <HAL_GPIO_Init+0x1f0>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_GPIO_Init+0x1f0>
 800339e:	2300      	movs	r3, #0
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	2103      	movs	r1, #3
 80033a4:	400a      	ands	r2, r1
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	4093      	lsls	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033b0:	4935      	ldr	r1, [pc, #212]	; (8003488 <HAL_GPIO_Init+0x2d8>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_GPIO_Init+0x2ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43da      	mvns	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	025b      	lsls	r3, r3, #9
 80033d6:	4013      	ands	r3, r2
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_GPIO_Init+0x2ec>)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_GPIO_Init+0x2ec>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	4013      	ands	r3, r2
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_GPIO_Init+0x2ec>)
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_GPIO_Init+0x2ec>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43da      	mvns	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	035b      	lsls	r3, r3, #13
 800342a:	4013      	ands	r3, r2
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_GPIO_Init+0x2ec>)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_GPIO_Init+0x2ec>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43da      	mvns	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	039b      	lsls	r3, r3, #14
 8003454:	4013      	ands	r3, r2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_GPIO_Init+0x2ec>)
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	40da      	lsrs	r2, r3
 8003474:	1e13      	subs	r3, r2, #0
 8003476:	d000      	beq.n	800347a <HAL_GPIO_Init+0x2ca>
 8003478:	e6a2      	b.n	80031c0 <HAL_GPIO_Init+0x10>
  } 
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000
 800348c:	48000400 	.word	0x48000400
 8003490:	48000800 	.word	0x48000800
 8003494:	48000c00 	.word	0x48000c00
 8003498:	48001000 	.word	0x48001000
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	0008      	movs	r0, r1
 80034aa:	0011      	movs	r1, r2
 80034ac:	1cbb      	adds	r3, r7, #2
 80034ae:	1c02      	adds	r2, r0, #0
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	1c7b      	adds	r3, r7, #1
 80034b4:	1c0a      	adds	r2, r1, #0
 80034b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034b8:	1c7b      	adds	r3, r7, #1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c0:	1cbb      	adds	r3, r7, #2
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ca:	1cbb      	adds	r3, r7, #2
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f000 fb76 	bl	8003bdc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <HAL_RCC_OscConfig+0x20>
 80034fa:	e08e      	b.n	800361a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034fc:	4bc5      	ldr	r3, [pc, #788]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	220c      	movs	r2, #12
 8003502:	4013      	ands	r3, r2
 8003504:	2b04      	cmp	r3, #4
 8003506:	d00e      	beq.n	8003526 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003508:	4bc2      	ldr	r3, [pc, #776]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	220c      	movs	r2, #12
 800350e:	4013      	ands	r3, r2
 8003510:	2b08      	cmp	r3, #8
 8003512:	d117      	bne.n	8003544 <HAL_RCC_OscConfig+0x68>
 8003514:	4bbf      	ldr	r3, [pc, #764]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	23c0      	movs	r3, #192	; 0xc0
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	401a      	ands	r2, r3
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	429a      	cmp	r2, r3
 8003524:	d10e      	bne.n	8003544 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003526:	4bbb      	ldr	r3, [pc, #748]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	029b      	lsls	r3, r3, #10
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_RCC_OscConfig+0x58>
 8003532:	e071      	b.n	8003618 <HAL_RCC_OscConfig+0x13c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d000      	beq.n	800353e <HAL_RCC_OscConfig+0x62>
 800353c:	e06c      	b.n	8003618 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f000 fb4c 	bl	8003bdc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x80>
 800354c:	4bb1      	ldr	r3, [pc, #708]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4bb0      	ldr	r3, [pc, #704]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0249      	lsls	r1, r1, #9
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e02f      	b.n	80035bc <HAL_RCC_OscConfig+0xe0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0xa2>
 8003564:	4bab      	ldr	r3, [pc, #684]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4baa      	ldr	r3, [pc, #680]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800356a:	49ab      	ldr	r1, [pc, #684]	; (8003818 <HAL_RCC_OscConfig+0x33c>)
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	4ba8      	ldr	r3, [pc, #672]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4ba7      	ldr	r3, [pc, #668]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003576:	49a9      	ldr	r1, [pc, #676]	; (800381c <HAL_RCC_OscConfig+0x340>)
 8003578:	400a      	ands	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e01e      	b.n	80035bc <HAL_RCC_OscConfig+0xe0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d10e      	bne.n	80035a4 <HAL_RCC_OscConfig+0xc8>
 8003586:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4ba2      	ldr	r3, [pc, #648]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	02c9      	lsls	r1, r1, #11
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	4b9f      	ldr	r3, [pc, #636]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b9e      	ldr	r3, [pc, #632]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	0249      	lsls	r1, r1, #9
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xe0>
 80035a4:	4b9b      	ldr	r3, [pc, #620]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80035aa:	499b      	ldr	r1, [pc, #620]	; (8003818 <HAL_RCC_OscConfig+0x33c>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	4b98      	ldr	r3, [pc, #608]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b97      	ldr	r3, [pc, #604]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80035b6:	4999      	ldr	r1, [pc, #612]	; (800381c <HAL_RCC_OscConfig+0x340>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d014      	beq.n	80035ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff fd14 	bl	8002ff0 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ce:	f7ff fd0f 	bl	8002ff0 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e2fd      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e0:	4b8c      	ldr	r3, [pc, #560]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	4013      	ands	r3, r2
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0xf2>
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7ff fcff 	bl	8002ff0 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7ff fcfa 	bl	8002ff0 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2e8      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b82      	ldr	r3, [pc, #520]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	029b      	lsls	r3, r3, #10
 8003612:	4013      	ands	r3, r2
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x11c>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d100      	bne.n	8003626 <HAL_RCC_OscConfig+0x14a>
 8003624:	e06c      	b.n	8003700 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003626:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	220c      	movs	r2, #12
 800362c:	4013      	ands	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003630:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	220c      	movs	r2, #12
 8003636:	4013      	ands	r3, r2
 8003638:	2b08      	cmp	r3, #8
 800363a:	d11f      	bne.n	800367c <HAL_RCC_OscConfig+0x1a0>
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	23c0      	movs	r3, #192	; 0xc0
 8003642:	025b      	lsls	r3, r3, #9
 8003644:	401a      	ands	r2, r3
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	429a      	cmp	r2, r3
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b71      	ldr	r3, [pc, #452]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	4013      	ands	r3, r2
 8003656:	d005      	beq.n	8003664 <HAL_RCC_OscConfig+0x188>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e2bb      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b6b      	ldr	r3, [pc, #428]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	22f8      	movs	r2, #248	; 0xf8
 800366a:	4393      	bics	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00da      	lsls	r2, r3, #3
 8003674:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e041      	b.n	8003700 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d024      	beq.n	80036ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b63      	ldr	r3, [pc, #396]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800368a:	2101      	movs	r1, #1
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7ff fcae 	bl	8002ff0 <HAL_GetTick>
 8003694:	0003      	movs	r3, r0
 8003696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7ff fca9 	bl	8002ff0 <HAL_GetTick>
 800369e:	0002      	movs	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e297      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	d0f1      	beq.n	800369a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b57      	ldr	r3, [pc, #348]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	22f8      	movs	r2, #248	; 0xf8
 80036bc:	4393      	bics	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00da      	lsls	r2, r3, #3
 80036c6:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e018      	b.n	8003700 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036d4:	2101      	movs	r1, #1
 80036d6:	438a      	bics	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7ff fc89 	bl	8002ff0 <HAL_GetTick>
 80036de:	0003      	movs	r3, r0
 80036e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e4:	f7ff fc84 	bl	8002ff0 <HAL_GetTick>
 80036e8:	0002      	movs	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e272      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d1f1      	bne.n	80036e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2208      	movs	r2, #8
 8003706:	4013      	ands	r3, r2
 8003708:	d036      	beq.n	8003778 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b40      	ldr	r3, [pc, #256]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003718:	2101      	movs	r1, #1
 800371a:	430a      	orrs	r2, r1
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7ff fc67 	bl	8002ff0 <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7ff fc62 	bl	8002ff0 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e250      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2202      	movs	r2, #2
 8003740:	4013      	ands	r3, r2
 8003742:	d0f1      	beq.n	8003728 <HAL_RCC_OscConfig+0x24c>
 8003744:	e018      	b.n	8003778 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800374c:	2101      	movs	r1, #1
 800374e:	438a      	bics	r2, r1
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7ff fc4d 	bl	8002ff0 <HAL_GetTick>
 8003756:	0003      	movs	r3, r0
 8003758:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff fc48 	bl	8002ff0 <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e236      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2202      	movs	r2, #2
 8003774:	4013      	ands	r3, r2
 8003776:	d1f1      	bne.n	800375c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2204      	movs	r2, #4
 800377e:	4013      	ands	r3, r2
 8003780:	d100      	bne.n	8003784 <HAL_RCC_OscConfig+0x2a8>
 8003782:	e0b5      	b.n	80038f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	055b      	lsls	r3, r3, #21
 8003794:	4013      	ands	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	0549      	lsls	r1, r1, #21
 80037a2:	430a      	orrs	r2, r1
 80037a4:	61da      	str	r2, [r3, #28]
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	055b      	lsls	r3, r3, #21
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b4:	231f      	movs	r3, #31
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_RCC_OscConfig+0x344>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d11a      	bne.n	80037fe <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCC_OscConfig+0x344>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_OscConfig+0x344>)
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	0049      	lsls	r1, r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7ff fc0b 	bl	8002ff0 <HAL_GetTick>
 80037da:	0003      	movs	r3, r0
 80037dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7ff fc06 	bl	8002ff0 <HAL_GetTick>
 80037e4:	0002      	movs	r2, r0
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1f4      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x344>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10e      	bne.n	8003824 <HAL_RCC_OscConfig+0x348>
 8003806:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	4b02      	ldr	r3, [pc, #8]	; (8003814 <HAL_RCC_OscConfig+0x338>)
 800380c:	2101      	movs	r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	621a      	str	r2, [r3, #32]
 8003812:	e035      	b.n	8003880 <HAL_RCC_OscConfig+0x3a4>
 8003814:	40021000 	.word	0x40021000
 8003818:	fffeffff 	.word	0xfffeffff
 800381c:	fffbffff 	.word	0xfffbffff
 8003820:	40007000 	.word	0x40007000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_OscConfig+0x36a>
 800382c:	4bca      	ldr	r3, [pc, #808]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	4bc9      	ldr	r3, [pc, #804]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003832:	2101      	movs	r1, #1
 8003834:	438a      	bics	r2, r1
 8003836:	621a      	str	r2, [r3, #32]
 8003838:	4bc7      	ldr	r3, [pc, #796]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	4bc6      	ldr	r3, [pc, #792]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800383e:	2104      	movs	r1, #4
 8003840:	438a      	bics	r2, r1
 8003842:	621a      	str	r2, [r3, #32]
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x3a4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x38c>
 800384e:	4bc2      	ldr	r3, [pc, #776]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	4bc1      	ldr	r3, [pc, #772]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003854:	2104      	movs	r1, #4
 8003856:	430a      	orrs	r2, r1
 8003858:	621a      	str	r2, [r3, #32]
 800385a:	4bbf      	ldr	r3, [pc, #764]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	4bbe      	ldr	r3, [pc, #760]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003860:	2101      	movs	r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	621a      	str	r2, [r3, #32]
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x3a4>
 8003868:	4bbb      	ldr	r3, [pc, #748]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800386a:	6a1a      	ldr	r2, [r3, #32]
 800386c:	4bba      	ldr	r3, [pc, #744]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800386e:	2101      	movs	r1, #1
 8003870:	438a      	bics	r2, r1
 8003872:	621a      	str	r2, [r3, #32]
 8003874:	4bb8      	ldr	r3, [pc, #736]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	4bb7      	ldr	r3, [pc, #732]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800387a:	2104      	movs	r1, #4
 800387c:	438a      	bics	r2, r1
 800387e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d014      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7ff fbb2 	bl	8002ff0 <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e009      	b.n	80038a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7ff fbad 	bl	8002ff0 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	4aaf      	ldr	r2, [pc, #700]	; (8003b5c <HAL_RCC_OscConfig+0x680>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e19a      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4bac      	ldr	r3, [pc, #688]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	2202      	movs	r2, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x3b6>
 80038b0:	e013      	b.n	80038da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b2:	f7ff fb9d 	bl	8002ff0 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e009      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7ff fb98 	bl	8002ff0 <HAL_GetTick>
 80038c0:	0002      	movs	r2, r0
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	4aa5      	ldr	r2, [pc, #660]	; (8003b5c <HAL_RCC_OscConfig+0x680>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e185      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	4ba1      	ldr	r3, [pc, #644]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	2202      	movs	r2, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038da:	231f      	movs	r3, #31
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	4b9b      	ldr	r3, [pc, #620]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80038ea:	499d      	ldr	r1, [pc, #628]	; (8003b60 <HAL_RCC_OscConfig+0x684>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2210      	movs	r2, #16
 80038f6:	4013      	ands	r3, r2
 80038f8:	d063      	beq.n	80039c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d12a      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003902:	4b95      	ldr	r3, [pc, #596]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003906:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003908:	2104      	movs	r1, #4
 800390a:	430a      	orrs	r2, r1
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800390e:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003914:	2101      	movs	r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7ff fb69 	bl	8002ff0 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003924:	f7ff fb64 	bl	8002ff0 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e152      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d0f1      	beq.n	8003924 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003940:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	22f8      	movs	r2, #248	; 0xf8
 8003946:	4393      	bics	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	00da      	lsls	r2, r3, #3
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003952:	430a      	orrs	r2, r1
 8003954:	635a      	str	r2, [r3, #52]	; 0x34
 8003956:	e034      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	3305      	adds	r3, #5
 800395e:	d111      	bne.n	8003984 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003960:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003964:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003966:	2104      	movs	r1, #4
 8003968:	438a      	bics	r2, r1
 800396a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800396c:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	22f8      	movs	r2, #248	; 0xf8
 8003972:	4393      	bics	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	00da      	lsls	r2, r3, #3
 800397c:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800397e:	430a      	orrs	r2, r1
 8003980:	635a      	str	r2, [r3, #52]	; 0x34
 8003982:	e01e      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003984:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003988:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 800398a:	2104      	movs	r1, #4
 800398c:	430a      	orrs	r2, r1
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003990:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	4b70      	ldr	r3, [pc, #448]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003996:	2101      	movs	r1, #1
 8003998:	438a      	bics	r2, r1
 800399a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399c:	f7ff fb28 	bl	8002ff0 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039a6:	f7ff fb23 	bl	8002ff0 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e111      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039b8:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	2202      	movs	r2, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d1f1      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	4013      	ands	r3, r2
 80039ca:	d05c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039cc:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	220c      	movs	r2, #12
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d00e      	beq.n	80039f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039d8:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	220c      	movs	r2, #12
 80039de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d114      	bne.n	8003a0e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039e4:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	23c0      	movs	r3, #192	; 0xc0
 80039ea:	025b      	lsls	r3, r3, #9
 80039ec:	401a      	ands	r2, r3
 80039ee:	23c0      	movs	r3, #192	; 0xc0
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 80039f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	025b      	lsls	r3, r3, #9
 80039fe:	4013      	ands	r3, r2
 8003a00:	d040      	beq.n	8003a84 <HAL_RCC_OscConfig+0x5a8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d03c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0e6      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	0249      	lsls	r1, r1, #9
 8003a20:	430a      	orrs	r2, r1
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff fae4 	bl	8002ff0 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2e:	f7ff fadf 	bl	8002ff0 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0cd      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a40:	4b45      	ldr	r3, [pc, #276]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x552>
 8003a4c:	e01b      	b.n	8003a86 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a4e:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a54:	4943      	ldr	r1, [pc, #268]	; (8003b64 <HAL_RCC_OscConfig+0x688>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7ff fac9 	bl	8002ff0 <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a64:	f7ff fac4 	bl	8002ff0 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0b2      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a76:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x588>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a84:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d100      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5b4>
 8003a8e:	e0a4      	b.n	8003bda <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	220c      	movs	r2, #12
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d100      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5c2>
 8003a9c:	e078      	b.n	8003b90 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d14c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003aac:	492e      	ldr	r1, [pc, #184]	; (8003b68 <HAL_RCC_OscConfig+0x68c>)
 8003aae:	400a      	ands	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7ff fa9d 	bl	8002ff0 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7ff fa98 	bl	8002ff0 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e086      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	220f      	movs	r2, #15
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_RCC_OscConfig+0x690>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	431a      	orrs	r2, r3
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	0449      	lsls	r1, r1, #17
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7ff fa6b 	bl	8002ff0 <HAL_GetTick>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7ff fa66 	bl	8002ff0 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e054      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	049b      	lsls	r3, r3, #18
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x644>
 8003b3e:	e04c      	b.n	8003bda <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCC_OscConfig+0x67c>)
 8003b46:	4908      	ldr	r1, [pc, #32]	; (8003b68 <HAL_RCC_OscConfig+0x68c>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7ff fa50 	bl	8002ff0 <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x6a6>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	00001388 	.word	0x00001388
 8003b60:	efffffff 	.word	0xefffffff
 8003b64:	fffeffff 	.word	0xfffeffff
 8003b68:	feffffff 	.word	0xfeffffff
 8003b6c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7ff fa3e 	bl	8002ff0 <HAL_GetTick>
 8003b74:	0002      	movs	r2, r0
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e02c      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_RCC_OscConfig+0x708>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	049b      	lsls	r3, r3, #18
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x694>
 8003b8e:	e024      	b.n	8003bda <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e01f      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_RCC_OscConfig+0x708>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCC_OscConfig+0x708>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	23c0      	movs	r3, #192	; 0xc0
 8003bac:	025b      	lsls	r3, r3, #9
 8003bae:	401a      	ands	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d10e      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	220f      	movs	r2, #15
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	23f0      	movs	r3, #240	; 0xf0
 8003bca:	039b      	lsls	r3, r3, #14
 8003bcc:	401a      	ands	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b008      	add	sp, #32
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0bf      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d911      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4393      	bics	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	4b5b      	ldr	r3, [pc, #364]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0a6      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2202      	movs	r2, #2
 8003c34:	4013      	ands	r3, r2
 8003c36:	d015      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d006      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c42:	4b51      	ldr	r3, [pc, #324]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c48:	21e0      	movs	r1, #224	; 0xe0
 8003c4a:	00c9      	lsls	r1, r1, #3
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	22f0      	movs	r2, #240	; 0xf0
 8003c56:	4393      	bics	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d04c      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b44      	ldr	r3, [pc, #272]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	029b      	lsls	r3, r3, #10
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d120      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	049b      	lsls	r3, r3, #18
 8003c96:	4013      	ands	r3, r2
 8003c98:	d114      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06e      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ca6:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	025b      	lsls	r3, r3, #9
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e062      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e05b      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc4:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4393      	bics	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd8:	f7ff f98a 	bl	8002ff0 <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce0:	e009      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce2:	f7ff f985 	bl	8002ff0 <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <HAL_RCC_ClockConfig+0x1a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e042      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d1ec      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d211      	bcs.n	8003d3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <HAL_RCC_ClockConfig+0x19c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e020      	b.n	8003d7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	d009      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_RCC_ClockConfig+0x1a8>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d58:	f000 f820 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d5c:	0001      	movs	r1, r0
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x1a0>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	220f      	movs	r2, #15
 8003d66:	4013      	ands	r3, r2
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1ac>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	000a      	movs	r2, r1
 8003d6e:	40da      	lsrs	r2, r3
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1b0>)
 8003d72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7ff f8f5 	bl	8002f64 <HAL_InitTick>
  
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	00001388 	.word	0x00001388
 8003d90:	fffff8ff 	.word	0xfffff8ff
 8003d94:	080044c8 	.word	0x080044c8
 8003d98:	20000000 	.word	0x20000000

08003d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b08f      	sub	sp, #60	; 0x3c
 8003da0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003da2:	2314      	movs	r3, #20
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003da8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003daa:	c313      	stmia	r3!, {r0, r1, r4}
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	4a35      	ldr	r2, [pc, #212]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xec>)
 8003db4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003db6:	c313      	stmia	r3!, {r0, r1, r4}
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	220c      	movs	r2, #12
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d006      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x52>
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d043      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0xd0>
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d144      	bne.n	8003e72 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003dec:	e044      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	220f      	movs	r2, #15
 8003df4:	4013      	ands	r3, r2
 8003df6:	2214      	movs	r2, #20
 8003df8:	18ba      	adds	r2, r7, r2
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	220f      	movs	r2, #15
 8003e04:	4013      	ands	r3, r2
 8003e06:	1d3a      	adds	r2, r7, #4
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0e:	23c0      	movs	r3, #192	; 0xc0
 8003e10:	025b      	lsls	r3, r3, #9
 8003e12:	401a      	ands	r2, r3
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1e:	481c      	ldr	r0, [pc, #112]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e20:	f7fc f972 	bl	8000108 <__udivsi3>
 8003e24:	0003      	movs	r3, r0
 8003e26:	001a      	movs	r2, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	4353      	muls	r3, r2
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	e01a      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e32:	23c0      	movs	r3, #192	; 0xc0
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	401a      	ands	r2, r3
 8003e38:	23c0      	movs	r3, #192	; 0xc0
 8003e3a:	025b      	lsls	r3, r3, #9
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d109      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	4814      	ldr	r0, [pc, #80]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e44:	f7fc f960 	bl	8000108 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	4353      	muls	r3, r2
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e56:	480e      	ldr	r0, [pc, #56]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e58:	f7fc f956 	bl	8000108 <__udivsi3>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	001a      	movs	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	4353      	muls	r3, r2
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e6a:	e005      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e70:	e002      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b00f      	add	sp, #60	; 0x3c
 8003e80:	bd90      	pop	{r4, r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	080044a8 	.word	0x080044a8
 8003e88:	080044b8 	.word	0x080044b8
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	007a1200 	.word	0x007a1200
 8003e94:	02dc6c00 	.word	0x02dc6c00

08003e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e042      	b.n	8003f30 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	223d      	movs	r2, #61	; 0x3d
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	223c      	movs	r2, #60	; 0x3c
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7fc fb53 	bl	800056c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223d      	movs	r2, #61	; 0x3d
 8003eca:	2102      	movs	r1, #2
 8003ecc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f000 f935 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2246      	movs	r2, #70	; 0x46
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223e      	movs	r2, #62	; 0x3e
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2241      	movs	r2, #65	; 0x41
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2242      	movs	r2, #66	; 0x42
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2243      	movs	r2, #67	; 0x43
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2244      	movs	r2, #68	; 0x44
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2245      	movs	r2, #69	; 0x45
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	223d      	movs	r2, #61	; 0x3d
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b002      	add	sp, #8
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	223d      	movs	r2, #61	; 0x3d
 8003f44:	5c9b      	ldrb	r3, [r3, r2]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e033      	b.n	8003fb8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	223d      	movs	r2, #61	; 0x3d
 8003f54:	2102      	movs	r1, #2
 8003f56:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_TIM_Base_Start+0x88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <HAL_TIM_Base_Start+0x4a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	05db      	lsls	r3, r3, #23
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIM_Base_Start+0x4a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <HAL_TIM_Base_Start+0x8c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_Base_Start+0x4a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_TIM_Base_Start+0x90>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d010      	beq.n	8003fb6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	e007      	b.n	8003fb6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	223c      	movs	r2, #60	; 0x3c
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0ab      	b.n	800413c <HAL_TIM_ConfigClockSource+0x170>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	223c      	movs	r2, #60	; 0x3c
 8003fe8:	2101      	movs	r1, #1
 8003fea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223d      	movs	r2, #61	; 0x3d
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2277      	movs	r2, #119	; 0x77
 8004000:	4393      	bics	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_TIM_ConfigClockSource+0x178>)
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d100      	bne.n	800401e <HAL_TIM_ConfigClockSource+0x52>
 800401c:	e06b      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x12a>
 800401e:	d80e      	bhi.n	800403e <HAL_TIM_ConfigClockSource+0x72>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d100      	bne.n	8004026 <HAL_TIM_ConfigClockSource+0x5a>
 8004024:	e077      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x14a>
 8004026:	d803      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x64>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d100      	bne.n	800402e <HAL_TIM_ConfigClockSource+0x62>
 800402c:	e073      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800402e:	e07c      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004030:	2b20      	cmp	r3, #32
 8004032:	d100      	bne.n	8004036 <HAL_TIM_ConfigClockSource+0x6a>
 8004034:	e06f      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x14a>
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d100      	bne.n	800403c <HAL_TIM_ConfigClockSource+0x70>
 800403a:	e06c      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800403c:	e075      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800403e:	2b70      	cmp	r3, #112	; 0x70
 8004040:	d00e      	beq.n	8004060 <HAL_TIM_ConfigClockSource+0x94>
 8004042:	d804      	bhi.n	800404e <HAL_TIM_ConfigClockSource+0x82>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d036      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xea>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d044      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800404c:	e06d      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	0152      	lsls	r2, r2, #5
 8004052:	4293      	cmp	r3, r2
 8004054:	d068      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x15c>
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	0192      	lsls	r2, r2, #6
 800405a:	4293      	cmp	r3, r2
 800405c:	d017      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800405e:	e064      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f000 f964 	bl	800433c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2277      	movs	r2, #119	; 0x77
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e04d      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 f94d 	bl	800433c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	01c9      	lsls	r1, r1, #7
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e039      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	001a      	movs	r2, r3
 80040c4:	f000 f8c0 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2150      	movs	r1, #80	; 0x50
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 f91a 	bl	8004308 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e029      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	001a      	movs	r2, r3
 80040e4:	f000 f8de 	bl	80042a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2160      	movs	r1, #96	; 0x60
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f90a 	bl	8004308 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e019      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	001a      	movs	r2, r3
 8004104:	f000 f8a0 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	0018      	movs	r0, r3
 8004110:	f000 f8fa 	bl	8004308 <TIM_ITRx_SetConfig>
      break;
 8004114:	e009      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0019      	movs	r1, r3
 8004120:	0010      	movs	r0, r2
 8004122:	f000 f8f1 	bl	8004308 <TIM_ITRx_SetConfig>
        break;
 8004126:	e000      	b.n	800412a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004128:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223d      	movs	r2, #61	; 0x3d
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	ffff00ff 	.word	0xffff00ff

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a34      	ldr	r2, [pc, #208]	; (800422c <TIM_Base_SetConfig+0xe4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d008      	beq.n	8004172 <TIM_Base_SetConfig+0x2a>
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	429a      	cmp	r2, r3
 8004168:	d003      	beq.n	8004172 <TIM_Base_SetConfig+0x2a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a30      	ldr	r2, [pc, #192]	; (8004230 <TIM_Base_SetConfig+0xe8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2270      	movs	r2, #112	; 0x70
 8004176:	4393      	bics	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a29      	ldr	r2, [pc, #164]	; (800422c <TIM_Base_SetConfig+0xe4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	05db      	lsls	r3, r3, #23
 8004192:	429a      	cmp	r2, r3
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <TIM_Base_SetConfig+0xe8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a24      	ldr	r2, [pc, #144]	; (8004234 <TIM_Base_SetConfig+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a23      	ldr	r2, [pc, #140]	; (8004238 <TIM_Base_SetConfig+0xf0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a22      	ldr	r2, [pc, #136]	; (800423c <TIM_Base_SetConfig+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x76>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a21      	ldr	r2, [pc, #132]	; (8004240 <TIM_Base_SetConfig+0xf8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a20      	ldr	r2, [pc, #128]	; (8004244 <TIM_Base_SetConfig+0xfc>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	4393      	bics	r3, r2
 80041d6:	001a      	movs	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <TIM_Base_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_Base_SetConfig+0xce>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <TIM_Base_SetConfig+0xf0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_Base_SetConfig+0xce>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a0c      	ldr	r2, [pc, #48]	; (800423c <TIM_Base_SetConfig+0xf4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_Base_SetConfig+0xce>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <TIM_Base_SetConfig+0xf8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d103      	bne.n	800421e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	615a      	str	r2, [r3, #20]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40002000 	.word	0x40002000
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800
 8004244:	fffffcff 	.word	0xfffffcff

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	2201      	movs	r2, #1
 8004260:	4393      	bics	r3, r2
 8004262:	001a      	movs	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	22f0      	movs	r2, #240	; 0xf0
 8004272:	4393      	bics	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	220a      	movs	r2, #10
 8004284:	4393      	bics	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b006      	add	sp, #24
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	2210      	movs	r2, #16
 80042b6:	4393      	bics	r3, r2
 80042b8:	001a      	movs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <TIM_TI2_ConfigInputStage+0x60>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	22a0      	movs	r2, #160	; 0xa0
 80042e0:	4393      	bics	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b006      	add	sp, #24
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	ffff0fff 	.word	0xffff0fff

08004308 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2270      	movs	r2, #112	; 0x70
 800431c:	4393      	bics	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	2207      	movs	r2, #7
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b004      	add	sp, #16
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <TIM_ETR_SetConfig+0x3c>)
 8004354:	4013      	ands	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	431a      	orrs	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	ffff00ff 	.word	0xffff00ff

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223c      	movs	r2, #60	; 0x3c
 800438a:	5c9b      	ldrb	r3, [r3, r2]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e047      	b.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223c      	movs	r2, #60	; 0x3c
 8004398:	2101      	movs	r1, #1
 800439a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223d      	movs	r2, #61	; 0x3d
 80043a0:	2102      	movs	r1, #2
 80043a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2270      	movs	r2, #112	; 0x70
 80043b8:	4393      	bics	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00f      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	05db      	lsls	r3, r3, #23
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d009      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	4393      	bics	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223d      	movs	r2, #61	; 0x3d
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223c      	movs	r2, #60	; 0x3c
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40000400 	.word	0x40000400
 8004434:	40014000 	.word	0x40014000

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2600      	movs	r6, #0
 800443c:	4d0c      	ldr	r5, [pc, #48]	; (8004470 <__libc_init_array+0x38>)
 800443e:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	2600      	movs	r6, #0
 800444a:	f000 f821 	bl	8004490 <_init>
 800444e:	4d0a      	ldr	r5, [pc, #40]	; (8004478 <__libc_init_array+0x40>)
 8004450:	4c0a      	ldr	r4, [pc, #40]	; (800447c <__libc_init_array+0x44>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	00b3      	lsls	r3, r6, #2
 800445e:	58eb      	ldr	r3, [r5, r3]
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	00b3      	lsls	r3, r6, #2
 8004468:	58eb      	ldr	r3, [r5, r3]
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	08004528 	.word	0x08004528
 8004474:	08004528 	.word	0x08004528
 8004478:	08004528 	.word	0x08004528
 800447c:	0800452c 	.word	0x0800452c

08004480 <memset>:
 8004480:	0003      	movs	r3, r0
 8004482:	1812      	adds	r2, r2, r0
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	7019      	strb	r1, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
