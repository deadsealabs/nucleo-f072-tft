
nucleo-f072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000507c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080051bc  080051bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051bc  080051bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  080051d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080051d4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a476  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001601  00000000  00000000  0002a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  0002c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e5a  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008aa5  00000000  00000000  00044eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093aaf  00000000  00000000  0004d95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e140e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  000e148c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005124 	.word	0x08005124

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005124 	.word	0x08005124

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f003 fcd4 	bl	8003bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e6 	bl	80003fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f876 	bl	8000320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ID = readID();
 8000234:	f001 fbe6 	bl	8001a04 <readID>
 8000238:	0003      	movs	r3, r0
 800023a:	001a      	movs	r2, r3
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <main+0x78>)
 800023e:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000240:	2064      	movs	r0, #100	; 0x64
 8000242:	f003 fd29 	bl	8003c98 <HAL_Delay>

  tft_init (ID);
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <main+0x78>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fb64 	bl	8001918 <tft_init>

  setRotation(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f001 fbe7 	bl	8001a24 <setRotation>

  fillScreen(BLACK);
 8000256:	2000      	movs	r0, #0
 8000258:	f002 fa78 	bl	800274c <fillScreen>

  testFillScreen();
 800025c:	f003 fab0 	bl	80037c0 <testFillScreen>
  testLines(CYAN);
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0x7c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f003 fac4 	bl	80037f0 <testLines>
  testFastLines(RED, BLUE);
 8000268:	23f8      	movs	r3, #248	; 0xf8
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	211f      	movs	r1, #31
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fbc4 	bl	80039fc <testFastLines>
  testFilledCircles(10, MAGENTA);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0x80>)
 8000276:	0019      	movs	r1, r3
 8000278:	200a      	movs	r0, #10
 800027a:	f003 fbfd 	bl	8003a78 <testFilledCircles>
  testCircles(10, WHITE);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x84>)
 8000280:	0019      	movs	r1, r3
 8000282:	200a      	movs	r0, #10
 8000284:	f003 fc37 	bl	8003af6 <testCircles>

  fillScreen(BLACK);
 8000288:	2000      	movs	r0, #0
 800028a:	f002 fa5f 	bl	800274c <fillScreen>

  setRotation(1);
 800028e:	2001      	movs	r0, #1
 8000290:	f001 fbc8 	bl	8001a24 <setRotation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x74>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000002c 	.word	0x2000002c
 800029c:	000007ff 	.word	0x000007ff
 80002a0:	0000f81f 	.word	0x0000f81f
 80002a4:	0000ffff 	.word	0x0000ffff

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f004 ff2b 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f004 ff24 	bl	8005114 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2220      	movs	r2, #32
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 ff45 	bl	8004170 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ea:	f000 f925 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2203      	movs	r2, #3
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f004 fab6 	bl	800487c <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000314:	f000 f910 	bl	8000538 <Error_Handler>
  }
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b013      	add	sp, #76	; 0x4c
 800031e:	bd90      	pop	{r4, r7, pc}

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	2310      	movs	r3, #16
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	2310      	movs	r3, #16
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f004 feef 	bl	8005114 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	2308      	movs	r3, #8
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2308      	movs	r3, #8
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f004 fee7 	bl	8005114 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __TIM1_CLK_ENABLE();
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_TIM1_Init+0xcc>)
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0109      	lsls	r1, r1, #4
 8000350:	430a      	orrs	r2, r1
 8000352:	619a      	str	r2, [r3, #24]
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000356:	699a      	ldr	r2, [r3, #24]
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <MX_TIM1_Init+0xd4>)
 8000366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800036a:	222f      	movs	r2, #47	; 0x2f
 800036c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000376:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <MX_TIM1_Init+0xd8>)
 8000378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800038e:	0018      	movs	r0, r3
 8000390:	f004 fbcc 	bl	8004b2c <HAL_TIM_Base_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000398:	f000 f8ce 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	2110      	movs	r1, #16
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	0152      	lsls	r2, r2, #5
 80003a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a6:	187a      	adds	r2, r7, r1
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003aa:	0011      	movs	r1, r2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f004 fc57 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f8bf 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2108      	movs	r1, #8
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f004 fe1e 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80003d8:	f000 f8ae 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f004 fbf4 	bl	8004bcc <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b008      	add	sp, #32
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	20000034 	.word	0x20000034
 80003f4:	40012c00 	.word	0x40012c00
 80003f8:	0000fffe 	.word	0x0000fffe

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 fe81 	bl	8005114 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b44      	ldr	r3, [pc, #272]	; (8000524 <MX_GPIO_Init+0x128>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <MX_GPIO_Init+0x128>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0309      	lsls	r1, r1, #12
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <MX_GPIO_Init+0x128>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	031b      	lsls	r3, r3, #12
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <MX_GPIO_Init+0x128>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <MX_GPIO_Init+0x128>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b39      	ldr	r3, [pc, #228]	; (8000524 <MX_GPIO_Init+0x128>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <MX_GPIO_Init+0x128>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_GPIO_Init+0x128>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	02c9      	lsls	r1, r1, #11
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x128>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	02db      	lsls	r3, r3, #11
 8000460:	4013      	ands	r3, r2
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D1_Pin, GPIO_PIN_RESET);
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_GPIO_Init+0x12c>)
 8000468:	2200      	movs	r2, #0
 800046a:	2182      	movs	r1, #130	; 0x82
 800046c:	0018      	movs	r0, r3
 800046e:	f003 fe61 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WR_Pin|RS_Pin|D7_Pin|D0_Pin
 8000472:	492e      	ldr	r1, [pc, #184]	; (800052c <MX_GPIO_Init+0x130>)
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fe5a 	bl	8004134 <HAL_GPIO_WritePin>
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000480:	492b      	ldr	r1, [pc, #172]	; (8000530 <MX_GPIO_Init+0x134>)
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <MX_GPIO_Init+0x138>)
 8000484:	2200      	movs	r2, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fe54 	bl	8004134 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D1_Pin;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2282      	movs	r2, #130	; 0x82
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f003 fcca 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RD_Pin */
  GPIO_InitStruct.Pin = RD_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RD_GPIO_Port, &GPIO_InitStruct);
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f003 fcba 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_Pin RS_Pin D7_Pin D0_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = WR_Pin|RS_Pin|D7_Pin|D0_Pin
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <MX_GPIO_Init+0x130>)
 80004d4:	601a      	str	r2, [r3, #0]
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2201      	movs	r2, #1
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	193a      	adds	r2, r7, r4
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f003 fca7 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <MX_GPIO_Init+0x134>)
 80004fc:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	187b      	adds	r3, r7, r1
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <MX_GPIO_Init+0x138>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f003 fc94 	bl	8003e44 <HAL_GPIO_Init>

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b009      	add	sp, #36	; 0x24
 8000522:	bd90      	pop	{r4, r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800
 800052c:	00000712 	.word	0x00000712
 8000530:	00000439 	.word	0x00000439
 8000534:	48000400 	.word	0x48000400

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x44>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_MspInit+0x44>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	619a      	str	r2, [r3, #24]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x44>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_MspInit+0x44>)
 8000564:	69da      	ldr	r2, [r3, #28]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_MspInit+0x44>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0549      	lsls	r1, r1, #21
 800056c:	430a      	orrs	r2, r1
 800056e:	61da      	str	r2, [r3, #28]
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_MspInit+0x44>)
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	055b      	lsls	r3, r3, #21
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_TIM_Base_MspInit+0x38>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d10d      	bne.n	80005ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0109      	lsls	r1, r1, #4
 80005a8:	430a      	orrs	r2, r1
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40012c00 	.word	0x40012c00
 80005c8:	40021000 	.word	0x40021000

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f003 fb34 	bl	8003c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <delay>:
#define  HEIGHT   ((uint16_t)480)

/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <delay+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <delay+0x28>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d8f9      	bhi.n	800061a <delay+0x12>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000034 	.word	0x20000034

08000634 <PIN_INPUT>:
#include "functions.h"
#include "user_setting.h"
#include "stdlib.h"

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	000a      	movs	r2, r1
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000642:	1cbb      	adds	r3, r7, #2
 8000644:	881a      	ldrh	r2, [r3, #0]
 8000646:	210c      	movs	r1, #12
 8000648:	187b      	adds	r3, r7, r1
 800064a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000658:	187a      	adds	r2, r7, r1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f003 fbf0 	bl	8003e44 <HAL_GPIO_Init>
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b008      	add	sp, #32
 800066a:	bd80      	pop	{r7, pc}

0800066c <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	000a      	movs	r2, r1
 8000676:	1cbb      	adds	r3, r7, #2
 8000678:	801a      	strh	r2, [r3, #0]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800067a:	1cbb      	adds	r3, r7, #2
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	210c      	movs	r1, #12
 8000680:	187b      	adds	r3, r7, r1
 8000682:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2203      	movs	r2, #3
 8000694:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000696:	187a      	adds	r2, r7, r1
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fbd1 	bl	8003e44 <HAL_GPIO_Init>
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b008      	add	sp, #32
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <width+0x10>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000004 	.word	0x20000004

080006c0 <height>:

uint16_t height(void)
{ return _height; }
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <height+0x10>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000006 	.word	0x20000006

080006d4 <color565_to_r>:

static uint16_t color565_to_555(uint16_t color) {
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
}

static uint8_t color565_to_r(uint16_t color) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	0002      	movs	r2, r0
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	801a      	strh	r2, [r3, #0]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	121b      	asrs	r3, r3, #8
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2207      	movs	r2, #7
 80006ea:	4393      	bics	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <color565_to_g>:

static uint8_t color565_to_g(uint16_t color) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	0002      	movs	r2, r0
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	801a      	strh	r2, [r3, #0]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	10db      	asrs	r3, r3, #3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2203      	movs	r2, #3
 800070c:	4393      	bics	r3, r2
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}

08000718 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	0002      	movs	r2, r0
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	801a      	strh	r2, [r3, #0]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	b2db      	uxtb	r3, r3
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}

08000734 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	801a      	strh	r2, [r3, #0]
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	1c0a      	adds	r2, r1, #0
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 f9b7 	bl	8000ac4 <writecmddata>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	009a      	lsls	r2, r3, #2
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ff60 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <setReadDir+0x70>)
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff ff5b 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	00da      	lsls	r2, r3, #3
 8000782:	2390      	movs	r3, #144	; 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff ff53 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <setReadDir+0x74>)
 8000790:	2108      	movs	r1, #8
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff ff4e 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <setReadDir+0x74>)
 800079a:	2120      	movs	r1, #32
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff ff49 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <setReadDir+0x74>)
 80007a4:	2110      	movs	r1, #16
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff ff44 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <setReadDir+0x74>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f7ff ff3d 	bl	8000634 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	005a      	lsls	r2, r3, #1
 80007be:	2390      	movs	r3, #144	; 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff35 	bl	8000634 <PIN_INPUT>
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	48000800 	.word	0x48000800
 80007d4:	48000400 	.word	0x48000400

080007d8 <setWriteDir>:

void setWriteDir (void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	009a      	lsls	r2, r3, #2
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff40 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <setWriteDir+0x70>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff3b 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	00da      	lsls	r2, r3, #3
 80007fa:	2390      	movs	r3, #144	; 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff33 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <setWriteDir+0x74>)
 8000808:	2108      	movs	r1, #8
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff ff2e 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <setWriteDir+0x74>)
 8000812:	2120      	movs	r1, #32
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ff29 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <setWriteDir+0x74>)
 800081c:	2110      	movs	r1, #16
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff ff24 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <setWriteDir+0x74>)
 800082a:	0019      	movs	r1, r3
 800082c:	0010      	movs	r0, r2
 800082e:	f7ff ff1d 	bl	800066c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	005a      	lsls	r2, r3, #1
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ff15 	bl	800066c <PIN_OUTPUT>
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	48000800 	.word	0x48000800
 800084c:	48000400 	.word	0x48000400

08000850 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dbb      	adds	r3, r7, #6
 800085a:	801a      	strh	r2, [r3, #0]
    uint8_t r = color565_to_r(color);
 800085c:	250f      	movs	r5, #15
 800085e:	197c      	adds	r4, r7, r5
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff35 	bl	80006d4 <color565_to_r>
 800086a:	0003      	movs	r3, r0
 800086c:	7023      	strb	r3, [r4, #0]
    uint8_t g = color565_to_g(color);
 800086e:	260e      	movs	r6, #14
 8000870:	19bc      	adds	r4, r7, r6
 8000872:	1dbb      	adds	r3, r7, #6
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff ff3d 	bl	80006f6 <color565_to_g>
 800087c:	0003      	movs	r3, r0
 800087e:	7023      	strb	r3, [r4, #0]
    uint8_t b = color565_to_b(color);
 8000880:	200d      	movs	r0, #13
 8000882:	183c      	adds	r4, r7, r0
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff45 	bl	8000718 <color565_to_b>
 800088e:	0003      	movs	r3, r0
 8000890:	7023      	strb	r3, [r4, #0]
    write8(r);
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	22e0      	movs	r2, #224	; 0xe0
 8000898:	04d2      	lsls	r2, r2, #19
 800089a:	619a      	str	r2, [r3, #24]
 800089c:	4b87      	ldr	r3, [pc, #540]	; (8000abc <write24+0x26c>)
 800089e:	2287      	movs	r2, #135	; 0x87
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	619a      	str	r2, [r3, #24]
 80008a4:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <write24+0x270>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0412      	lsls	r2, r2, #16
 80008aa:	619a      	str	r2, [r3, #24]
 80008ac:	197b      	adds	r3, r7, r5
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	025a      	lsls	r2, r3, #9
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	401a      	ands	r2, r3
 80008b8:	197b      	adds	r3, r7, r5
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	0219      	lsls	r1, r3, #8
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	400b      	ands	r3, r1
 80008c4:	431a      	orrs	r2, r3
 80008c6:	197b      	adds	r3, r7, r5
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0059      	lsls	r1, r3, #1
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	400b      	ands	r3, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	2390      	movs	r3, #144	; 0x90
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	619a      	str	r2, [r3, #24]
 80008da:	0028      	movs	r0, r5
 80008dc:	183b      	adds	r3, r7, r0
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2208      	movs	r2, #8
 80008e2:	401a      	ands	r2, r3
 80008e4:	183b      	adds	r3, r7, r0
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	400b      	ands	r3, r1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	183b      	adds	r3, r7, r0
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	105b      	asrs	r3, r3, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	400b      	ands	r3, r1
 80008fa:	431a      	orrs	r2, r3
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0119      	lsls	r1, r3, #4
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	400b      	ands	r3, r1
 8000908:	431a      	orrs	r2, r3
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <write24+0x26c>)
 800090c:	619a      	str	r2, [r3, #24]
 800090e:	183b      	adds	r3, r7, r0
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	019b      	lsls	r3, r3, #6
 8000914:	0019      	movs	r1, r3
 8000916:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <write24+0x270>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	400a      	ands	r2, r1
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	2390      	movs	r3, #144	; 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	0018      	movs	r0, r3
 8000928:	f003 fc04 	bl	8004134 <HAL_GPIO_WritePin>
 800092c:	2390      	movs	r3, #144	; 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2201      	movs	r2, #1
 8000932:	2102      	movs	r1, #2
 8000934:	0018      	movs	r0, r3
 8000936:	f003 fbfd 	bl	8004134 <HAL_GPIO_WritePin>
 800093a:	2390      	movs	r3, #144	; 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2201      	movs	r2, #1
 8000940:	2102      	movs	r1, #2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 fbf6 	bl	8004134 <HAL_GPIO_WritePin>
    write8(g);
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	22e0      	movs	r2, #224	; 0xe0
 800094e:	04d2      	lsls	r2, r2, #19
 8000950:	619a      	str	r2, [r3, #24]
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <write24+0x26c>)
 8000954:	2287      	movs	r2, #135	; 0x87
 8000956:	04d2      	lsls	r2, r2, #19
 8000958:	619a      	str	r2, [r3, #24]
 800095a:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <write24+0x270>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0412      	lsls	r2, r2, #16
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	19bb      	adds	r3, r7, r6
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	025a      	lsls	r2, r3, #9
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	401a      	ands	r2, r3
 800096e:	19bb      	adds	r3, r7, r6
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0219      	lsls	r1, r3, #8
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	400b      	ands	r3, r1
 800097a:	431a      	orrs	r2, r3
 800097c:	19bb      	adds	r3, r7, r6
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	0059      	lsls	r1, r3, #1
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	400b      	ands	r3, r1
 8000988:	431a      	orrs	r2, r3
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	0030      	movs	r0, r6
 8000992:	183b      	adds	r3, r7, r0
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2208      	movs	r2, #8
 8000998:	401a      	ands	r2, r3
 800099a:	183b      	adds	r3, r7, r0
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2120      	movs	r1, #32
 80009a2:	400b      	ands	r3, r1
 80009a4:	431a      	orrs	r2, r3
 80009a6:	183b      	adds	r3, r7, r0
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	105b      	asrs	r3, r3, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	400b      	ands	r3, r1
 80009b0:	431a      	orrs	r2, r3
 80009b2:	183b      	adds	r3, r7, r0
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0119      	lsls	r1, r3, #4
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	400b      	ands	r3, r1
 80009be:	431a      	orrs	r2, r3
 80009c0:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <write24+0x26c>)
 80009c2:	619a      	str	r2, [r3, #24]
 80009c4:	183b      	adds	r3, r7, r0
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	0019      	movs	r1, r3
 80009cc:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <write24+0x270>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	400a      	ands	r2, r1
 80009d2:	619a      	str	r2, [r3, #24]
 80009d4:	2390      	movs	r3, #144	; 0x90
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2200      	movs	r2, #0
 80009da:	2102      	movs	r1, #2
 80009dc:	0018      	movs	r0, r3
 80009de:	f003 fba9 	bl	8004134 <HAL_GPIO_WritePin>
 80009e2:	2390      	movs	r3, #144	; 0x90
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2201      	movs	r2, #1
 80009e8:	2102      	movs	r1, #2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f003 fba2 	bl	8004134 <HAL_GPIO_WritePin>
 80009f0:	2390      	movs	r3, #144	; 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2201      	movs	r2, #1
 80009f6:	2102      	movs	r1, #2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fb9b 	bl	8004134 <HAL_GPIO_WritePin>
    write8(b);
 80009fe:	2390      	movs	r3, #144	; 0x90
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	22e0      	movs	r2, #224	; 0xe0
 8000a04:	04d2      	lsls	r2, r2, #19
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <write24+0x26c>)
 8000a0a:	2287      	movs	r2, #135	; 0x87
 8000a0c:	04d2      	lsls	r2, r2, #19
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <write24+0x270>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	0412      	lsls	r2, r2, #16
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	200d      	movs	r0, #13
 8000a1a:	183b      	adds	r3, r7, r0
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	025a      	lsls	r2, r3, #9
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	401a      	ands	r2, r3
 8000a26:	183b      	adds	r3, r7, r0
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0219      	lsls	r1, r3, #8
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	400b      	ands	r3, r1
 8000a32:	431a      	orrs	r2, r3
 8000a34:	183b      	adds	r3, r7, r0
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	0059      	lsls	r1, r3, #1
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	400b      	ands	r3, r1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	2390      	movs	r3, #144	; 0x90
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	619a      	str	r2, [r3, #24]
 8000a48:	183b      	adds	r3, r7, r0
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	401a      	ands	r2, r3
 8000a50:	183b      	adds	r3, r7, r0
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	400b      	ands	r3, r1
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	183b      	adds	r3, r7, r0
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	105b      	asrs	r3, r3, #1
 8000a62:	2110      	movs	r1, #16
 8000a64:	400b      	ands	r3, r1
 8000a66:	431a      	orrs	r2, r3
 8000a68:	183b      	adds	r3, r7, r0
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	0119      	lsls	r1, r3, #4
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	400b      	ands	r3, r1
 8000a74:	431a      	orrs	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <write24+0x26c>)
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	183b      	adds	r3, r7, r0
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	019b      	lsls	r3, r3, #6
 8000a80:	0019      	movs	r1, r3
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <write24+0x270>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	400a      	ands	r2, r1
 8000a88:	619a      	str	r2, [r3, #24]
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f003 fb4e 	bl	8004134 <HAL_GPIO_WritePin>
 8000a98:	2390      	movs	r3, #144	; 0x90
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f003 fb47 	bl	8004134 <HAL_GPIO_WritePin>
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2102      	movs	r1, #2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f003 fb40 	bl	8004134 <HAL_GPIO_WritePin>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b005      	add	sp, #20
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	801a      	strh	r2, [r3, #0]
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	1c0a      	adds	r2, r1, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
    CS_ACTIVE;
 8000ad6:	4bd1      	ldr	r3, [pc, #836]	; (8000e1c <writecmddata+0x358>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	0018      	movs	r0, r3
 8000ade:	f003 fb29 	bl	8004134 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000ae2:	2390      	movs	r3, #144	; 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2110      	movs	r1, #16
 8000aea:	0018      	movs	r0, r3
 8000aec:	f003 fb22 	bl	8004134 <HAL_GPIO_WritePin>
 8000af0:	1dbb      	adds	r3, r7, #6
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	210f      	movs	r1, #15
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	240e      	movs	r4, #14
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	1dba      	adds	r2, r7, #6
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	2390      	movs	r3, #144	; 0x90
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	22e0      	movs	r2, #224	; 0xe0
 8000b0e:	04d2      	lsls	r2, r2, #19
 8000b10:	619a      	str	r2, [r3, #24]
 8000b12:	4bc2      	ldr	r3, [pc, #776]	; (8000e1c <writecmddata+0x358>)
 8000b14:	2287      	movs	r2, #135	; 0x87
 8000b16:	04d2      	lsls	r2, r2, #19
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	4bc1      	ldr	r3, [pc, #772]	; (8000e20 <writecmddata+0x35c>)
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	0412      	lsls	r2, r2, #16
 8000b20:	619a      	str	r2, [r3, #24]
 8000b22:	0008      	movs	r0, r1
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	025a      	lsls	r2, r3, #9
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0219      	lsls	r1, r3, #8
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	183b      	adds	r3, r7, r0
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0059      	lsls	r1, r3, #1
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	400b      	ands	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2208      	movs	r2, #8
 8000b58:	401a      	ands	r2, r3
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	400b      	ands	r3, r1
 8000b64:	431a      	orrs	r2, r3
 8000b66:	183b      	adds	r3, r7, r0
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	105b      	asrs	r3, r3, #1
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	400b      	ands	r3, r1
 8000b70:	431a      	orrs	r2, r3
 8000b72:	183b      	adds	r3, r7, r0
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0119      	lsls	r1, r3, #4
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	4ba6      	ldr	r3, [pc, #664]	; (8000e1c <writecmddata+0x358>)
 8000b82:	619a      	str	r2, [r3, #24]
 8000b84:	183b      	adds	r3, r7, r0
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	4ba4      	ldr	r3, [pc, #656]	; (8000e20 <writecmddata+0x35c>)
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	400a      	ands	r2, r1
 8000b92:	619a      	str	r2, [r3, #24]
 8000b94:	2390      	movs	r3, #144	; 0x90
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f003 fac9 	bl	8004134 <HAL_GPIO_WritePin>
 8000ba2:	2390      	movs	r3, #144	; 0x90
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2102      	movs	r1, #2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f003 fac2 	bl	8004134 <HAL_GPIO_WritePin>
 8000bb0:	2390      	movs	r3, #144	; 0x90
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f003 fabb 	bl	8004134 <HAL_GPIO_WritePin>
 8000bbe:	2390      	movs	r3, #144	; 0x90
 8000bc0:	05db      	lsls	r3, r3, #23
 8000bc2:	22e0      	movs	r2, #224	; 0xe0
 8000bc4:	04d2      	lsls	r2, r2, #19
 8000bc6:	619a      	str	r2, [r3, #24]
 8000bc8:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <writecmddata+0x358>)
 8000bca:	2287      	movs	r2, #135	; 0x87
 8000bcc:	04d2      	lsls	r2, r2, #19
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	4b93      	ldr	r3, [pc, #588]	; (8000e20 <writecmddata+0x35c>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	0412      	lsls	r2, r2, #16
 8000bd6:	619a      	str	r2, [r3, #24]
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	025a      	lsls	r2, r3, #9
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	401a      	ands	r2, r3
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	0219      	lsls	r1, r3, #8
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	400b      	ands	r3, r1
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	0059      	lsls	r1, r3, #1
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	2390      	movs	r3, #144	; 0x90
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	0020      	movs	r0, r4
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	401a      	ands	r2, r3
 8000c10:	183b      	adds	r3, r7, r0
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2120      	movs	r1, #32
 8000c18:	400b      	ands	r3, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	183b      	adds	r3, r7, r0
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	105b      	asrs	r3, r3, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	400b      	ands	r3, r1
 8000c26:	431a      	orrs	r2, r3
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	0119      	lsls	r1, r3, #4
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	400b      	ands	r3, r1
 8000c34:	431a      	orrs	r2, r3
 8000c36:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <writecmddata+0x358>)
 8000c38:	619a      	str	r2, [r3, #24]
 8000c3a:	183b      	adds	r3, r7, r0
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	019b      	lsls	r3, r3, #6
 8000c40:	0019      	movs	r1, r3
 8000c42:	4b77      	ldr	r3, [pc, #476]	; (8000e20 <writecmddata+0x35c>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	400a      	ands	r2, r1
 8000c48:	619a      	str	r2, [r3, #24]
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f003 fa6e 	bl	8004134 <HAL_GPIO_WritePin>
 8000c58:	2390      	movs	r3, #144	; 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2102      	movs	r1, #2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f003 fa67 	bl	8004134 <HAL_GPIO_WritePin>
 8000c66:	2390      	movs	r3, #144	; 0x90
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 fa60 	bl	8004134 <HAL_GPIO_WritePin>
 8000c74:	2390      	movs	r3, #144	; 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f003 fa59 	bl	8004134 <HAL_GPIO_WritePin>
    WriteData(dat);
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	210d      	movs	r1, #13
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	240c      	movs	r4, #12
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	1d3a      	adds	r2, r7, #4
 8000c96:	8812      	ldrh	r2, [r2, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	2390      	movs	r3, #144	; 0x90
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	22e0      	movs	r2, #224	; 0xe0
 8000ca0:	04d2      	lsls	r2, r2, #19
 8000ca2:	619a      	str	r2, [r3, #24]
 8000ca4:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <writecmddata+0x358>)
 8000ca6:	2287      	movs	r2, #135	; 0x87
 8000ca8:	04d2      	lsls	r2, r2, #19
 8000caa:	619a      	str	r2, [r3, #24]
 8000cac:	4b5c      	ldr	r3, [pc, #368]	; (8000e20 <writecmddata+0x35c>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	0412      	lsls	r2, r2, #16
 8000cb2:	619a      	str	r2, [r3, #24]
 8000cb4:	0008      	movs	r0, r1
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	025a      	lsls	r2, r3, #9
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	183b      	adds	r3, r7, r0
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	0219      	lsls	r1, r3, #8
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	400b      	ands	r3, r1
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	183b      	adds	r3, r7, r0
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	0059      	lsls	r1, r3, #1
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	400b      	ands	r3, r1
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	2390      	movs	r3, #144	; 0x90
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	619a      	str	r2, [r3, #24]
 8000ce4:	183b      	adds	r3, r7, r0
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2208      	movs	r2, #8
 8000cea:	401a      	ands	r2, r3
 8000cec:	183b      	adds	r3, r7, r0
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	183b      	adds	r3, r7, r0
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	105b      	asrs	r3, r3, #1
 8000cfe:	2110      	movs	r1, #16
 8000d00:	400b      	ands	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	183b      	adds	r3, r7, r0
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	0119      	lsls	r1, r3, #4
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	400b      	ands	r3, r1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <writecmddata+0x358>)
 8000d14:	619a      	str	r2, [r3, #24]
 8000d16:	183b      	adds	r3, r7, r0
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <writecmddata+0x35c>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	400a      	ands	r2, r1
 8000d24:	619a      	str	r2, [r3, #24]
 8000d26:	2390      	movs	r3, #144	; 0x90
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f003 fa00 	bl	8004134 <HAL_GPIO_WritePin>
 8000d34:	2390      	movs	r3, #144	; 0x90
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f003 f9f9 	bl	8004134 <HAL_GPIO_WritePin>
 8000d42:	2390      	movs	r3, #144	; 0x90
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 f9f2 	bl	8004134 <HAL_GPIO_WritePin>
 8000d50:	2390      	movs	r3, #144	; 0x90
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	22e0      	movs	r2, #224	; 0xe0
 8000d56:	04d2      	lsls	r2, r2, #19
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <writecmddata+0x358>)
 8000d5c:	2287      	movs	r2, #135	; 0x87
 8000d5e:	04d2      	lsls	r2, r2, #19
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <writecmddata+0x35c>)
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0412      	lsls	r2, r2, #16
 8000d68:	619a      	str	r2, [r3, #24]
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	025a      	lsls	r2, r3, #9
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	401a      	ands	r2, r3
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0219      	lsls	r1, r3, #8
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	400b      	ands	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	0059      	lsls	r1, r3, #1
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	400b      	ands	r3, r1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	2390      	movs	r3, #144	; 0x90
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	619a      	str	r2, [r3, #24]
 8000d98:	0020      	movs	r0, r4
 8000d9a:	183b      	adds	r3, r7, r0
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	401a      	ands	r2, r3
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2120      	movs	r1, #32
 8000daa:	400b      	ands	r3, r1
 8000dac:	431a      	orrs	r2, r3
 8000dae:	183b      	adds	r3, r7, r0
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	105b      	asrs	r3, r3, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	400b      	ands	r3, r1
 8000db8:	431a      	orrs	r2, r3
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0119      	lsls	r1, r3, #4
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <writecmddata+0x358>)
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <writecmddata+0x35c>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	400a      	ands	r2, r1
 8000dda:	619a      	str	r2, [r3, #24]
 8000ddc:	2390      	movs	r3, #144	; 0x90
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	2200      	movs	r2, #0
 8000de2:	2102      	movs	r1, #2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f003 f9a5 	bl	8004134 <HAL_GPIO_WritePin>
 8000dea:	2390      	movs	r3, #144	; 0x90
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	2201      	movs	r2, #1
 8000df0:	2102      	movs	r1, #2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f003 f99e 	bl	8004134 <HAL_GPIO_WritePin>
 8000df8:	2390      	movs	r3, #144	; 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2102      	movs	r1, #2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f003 f997 	bl	8004134 <HAL_GPIO_WritePin>
    CS_IDLE;
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <writecmddata+0x358>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f003 f991 	bl	8004134 <HAL_GPIO_WritePin>
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b005      	add	sp, #20
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800

08000e24 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	603a      	str	r2, [r7, #0]
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	1d7b      	adds	r3, r7, #5
 8000e34:	1c0a      	adds	r2, r1, #0
 8000e36:	701a      	strb	r2, [r3, #0]
    CS_ACTIVE;
 8000e38:	4b6b      	ldr	r3, [pc, #428]	; (8000fe8 <WriteCmdParamN+0x1c4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f003 f978 	bl	8004134 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000e44:	2390      	movs	r3, #144	; 0x90
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f003 f971 	bl	8004134 <HAL_GPIO_WritePin>
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	240e      	movs	r4, #14
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	1dba      	adds	r2, r7, #6
 8000e66:	8812      	ldrh	r2, [r2, #0]
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	2390      	movs	r3, #144	; 0x90
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	22e0      	movs	r2, #224	; 0xe0
 8000e70:	04d2      	lsls	r2, r2, #19
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <WriteCmdParamN+0x1c4>)
 8000e76:	2287      	movs	r2, #135	; 0x87
 8000e78:	04d2      	lsls	r2, r2, #19
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <WriteCmdParamN+0x1c8>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	0412      	lsls	r2, r2, #16
 8000e82:	619a      	str	r2, [r3, #24]
 8000e84:	0008      	movs	r0, r1
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	025a      	lsls	r2, r3, #9
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	401a      	ands	r2, r3
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0219      	lsls	r1, r3, #8
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	0059      	lsls	r1, r3, #1
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	400b      	ands	r3, r1
 8000eac:	431a      	orrs	r2, r3
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	619a      	str	r2, [r3, #24]
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	401a      	ands	r2, r3
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	183b      	adds	r3, r7, r0
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	105b      	asrs	r3, r3, #1
 8000ece:	2110      	movs	r1, #16
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	0119      	lsls	r1, r3, #4
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	400b      	ands	r3, r1
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <WriteCmdParamN+0x1c4>)
 8000ee4:	619a      	str	r2, [r3, #24]
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	019b      	lsls	r3, r3, #6
 8000eec:	0019      	movs	r1, r3
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <WriteCmdParamN+0x1c8>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	2390      	movs	r3, #144	; 0x90
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f003 f918 	bl	8004134 <HAL_GPIO_WritePin>
 8000f04:	2390      	movs	r3, #144	; 0x90
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f003 f911 	bl	8004134 <HAL_GPIO_WritePin>
 8000f12:	2390      	movs	r3, #144	; 0x90
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2201      	movs	r2, #1
 8000f18:	2102      	movs	r1, #2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 f90a 	bl	8004134 <HAL_GPIO_WritePin>
 8000f20:	2390      	movs	r3, #144	; 0x90
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	22e0      	movs	r2, #224	; 0xe0
 8000f26:	04d2      	lsls	r2, r2, #19
 8000f28:	619a      	str	r2, [r3, #24]
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <WriteCmdParamN+0x1c4>)
 8000f2c:	2287      	movs	r2, #135	; 0x87
 8000f2e:	04d2      	lsls	r2, r2, #19
 8000f30:	619a      	str	r2, [r3, #24]
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <WriteCmdParamN+0x1c8>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0412      	lsls	r2, r2, #16
 8000f38:	619a      	str	r2, [r3, #24]
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	025a      	lsls	r2, r3, #9
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	401a      	ands	r2, r3
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0219      	lsls	r1, r3, #8
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	400b      	ands	r3, r1
 8000f52:	431a      	orrs	r2, r3
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	0059      	lsls	r1, r3, #1
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	2390      	movs	r3, #144	; 0x90
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	0020      	movs	r0, r4
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2208      	movs	r2, #8
 8000f70:	401a      	ands	r2, r3
 8000f72:	183b      	adds	r3, r7, r0
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	105b      	asrs	r3, r3, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	400b      	ands	r3, r1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	183b      	adds	r3, r7, r0
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0119      	lsls	r1, r3, #4
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	400b      	ands	r3, r1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <WriteCmdParamN+0x1c4>)
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	183b      	adds	r3, r7, r0
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <WriteCmdParamN+0x1c8>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	400a      	ands	r2, r1
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	2390      	movs	r3, #144	; 0x90
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f003 f8bd 	bl	8004134 <HAL_GPIO_WritePin>
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f003 f8b6 	bl	8004134 <HAL_GPIO_WritePin>
 8000fc8:	2390      	movs	r3, #144	; 0x90
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2102      	movs	r1, #2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f003 f8af 	bl	8004134 <HAL_GPIO_WritePin>
 8000fd6:	2390      	movs	r3, #144	; 0x90
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2110      	movs	r1, #16
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f003 f8a8 	bl	8004134 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000fe4:	e14e      	b.n	8001284 <WriteCmdParamN+0x460>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
        uint8_t u8 = *block++;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	603a      	str	r2, [r7, #0]
 8000ff6:	210d      	movs	r1, #13
 8000ff8:	187a      	adds	r2, r7, r1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	7013      	strb	r3, [r2, #0]
        write8(u8);
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	22e0      	movs	r2, #224	; 0xe0
 8001004:	04d2      	lsls	r2, r2, #19
 8001006:	619a      	str	r2, [r3, #24]
 8001008:	4ba9      	ldr	r3, [pc, #676]	; (80012b0 <WriteCmdParamN+0x48c>)
 800100a:	2287      	movs	r2, #135	; 0x87
 800100c:	04d2      	lsls	r2, r2, #19
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4ba8      	ldr	r3, [pc, #672]	; (80012b4 <WriteCmdParamN+0x490>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	0412      	lsls	r2, r2, #16
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	0008      	movs	r0, r1
 800101a:	183b      	adds	r3, r7, r0
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	025a      	lsls	r2, r3, #9
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	401a      	ands	r2, r3
 8001026:	183b      	adds	r3, r7, r0
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0219      	lsls	r1, r3, #8
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	400b      	ands	r3, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	183b      	adds	r3, r7, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	0059      	lsls	r1, r3, #1
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	400b      	ands	r3, r1
 8001040:	431a      	orrs	r2, r3
 8001042:	2390      	movs	r3, #144	; 0x90
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	183b      	adds	r3, r7, r0
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	401a      	ands	r2, r3
 8001050:	183b      	adds	r3, r7, r0
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2120      	movs	r1, #32
 8001058:	400b      	ands	r3, r1
 800105a:	431a      	orrs	r2, r3
 800105c:	183b      	adds	r3, r7, r0
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	105b      	asrs	r3, r3, #1
 8001062:	2110      	movs	r1, #16
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	183b      	adds	r3, r7, r0
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	0119      	lsls	r1, r3, #4
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	400b      	ands	r3, r1
 8001074:	431a      	orrs	r2, r3
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <WriteCmdParamN+0x48c>)
 8001078:	619a      	str	r2, [r3, #24]
 800107a:	183b      	adds	r3, r7, r0
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	019b      	lsls	r3, r3, #6
 8001080:	0019      	movs	r1, r3
 8001082:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <WriteCmdParamN+0x490>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	400a      	ands	r2, r1
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	2390      	movs	r3, #144	; 0x90
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	0018      	movs	r0, r3
 8001094:	f003 f84e 	bl	8004134 <HAL_GPIO_WritePin>
 8001098:	2390      	movs	r3, #144	; 0x90
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2201      	movs	r2, #1
 800109e:	2102      	movs	r1, #2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f003 f847 	bl	8004134 <HAL_GPIO_WritePin>
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	2201      	movs	r2, #1
 80010ac:	2102      	movs	r1, #2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f003 f840 	bl	8004134 <HAL_GPIO_WritePin>
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	1dba      	adds	r2, r7, #6
 80010b8:	8812      	ldrh	r2, [r2, #0]
 80010ba:	801a      	strh	r2, [r3, #0]
        if (N && is8347) {
 80010bc:	1d7b      	adds	r3, r7, #5
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <WriteCmdParamN+0x2a4>
 80010c6:	e0dd      	b.n	8001284 <WriteCmdParamN+0x460>
 80010c8:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <WriteCmdParamN+0x494>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	1dba      	adds	r2, r7, #6
 80010ce:	1db9      	adds	r1, r7, #6
 80010d0:	8809      	ldrh	r1, [r1, #0]
 80010d2:	8011      	strh	r1, [r2, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <WriteCmdParamN+0x2b6>
 80010d8:	e0d4      	b.n	8001284 <WriteCmdParamN+0x460>
            cmd++;
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	3201      	adds	r2, #1
 80010e2:	801a      	strh	r2, [r3, #0]
            WriteCmd(cmd);
 80010e4:	2390      	movs	r3, #144	; 0x90
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2200      	movs	r2, #0
 80010ea:	2110      	movs	r1, #16
 80010ec:	0018      	movs	r0, r3
 80010ee:	f003 f821 	bl	8004134 <HAL_GPIO_WritePin>
 80010f2:	1dbb      	adds	r3, r7, #6
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	210c      	movs	r1, #12
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	240b      	movs	r4, #11
 8001102:	193b      	adds	r3, r7, r4
 8001104:	1dba      	adds	r2, r7, #6
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	2390      	movs	r3, #144	; 0x90
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	22e0      	movs	r2, #224	; 0xe0
 8001110:	04d2      	lsls	r2, r2, #19
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <WriteCmdParamN+0x48c>)
 8001116:	2287      	movs	r2, #135	; 0x87
 8001118:	04d2      	lsls	r2, r2, #19
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <WriteCmdParamN+0x490>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	0412      	lsls	r2, r2, #16
 8001122:	619a      	str	r2, [r3, #24]
 8001124:	0008      	movs	r0, r1
 8001126:	183b      	adds	r3, r7, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	025a      	lsls	r2, r3, #9
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	401a      	ands	r2, r3
 8001132:	183b      	adds	r3, r7, r0
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0219      	lsls	r1, r3, #8
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	400b      	ands	r3, r1
 800113e:	431a      	orrs	r2, r3
 8001140:	183b      	adds	r3, r7, r0
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	0059      	lsls	r1, r3, #1
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	400b      	ands	r3, r1
 800114c:	431a      	orrs	r2, r3
 800114e:	2390      	movs	r3, #144	; 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	619a      	str	r2, [r3, #24]
 8001154:	183b      	adds	r3, r7, r0
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2208      	movs	r2, #8
 800115a:	401a      	ands	r2, r3
 800115c:	183b      	adds	r3, r7, r0
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2120      	movs	r1, #32
 8001164:	400b      	ands	r3, r1
 8001166:	431a      	orrs	r2, r3
 8001168:	183b      	adds	r3, r7, r0
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	105b      	asrs	r3, r3, #1
 800116e:	2110      	movs	r1, #16
 8001170:	400b      	ands	r3, r1
 8001172:	431a      	orrs	r2, r3
 8001174:	183b      	adds	r3, r7, r0
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0119      	lsls	r1, r3, #4
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	400b      	ands	r3, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <WriteCmdParamN+0x48c>)
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	183b      	adds	r3, r7, r0
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	019b      	lsls	r3, r3, #6
 800118c:	0019      	movs	r1, r3
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <WriteCmdParamN+0x490>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	400a      	ands	r2, r1
 8001194:	619a      	str	r2, [r3, #24]
 8001196:	2390      	movs	r3, #144	; 0x90
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	2200      	movs	r2, #0
 800119c:	2102      	movs	r1, #2
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 ffc8 	bl	8004134 <HAL_GPIO_WritePin>
 80011a4:	2390      	movs	r3, #144	; 0x90
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 ffc1 	bl	8004134 <HAL_GPIO_WritePin>
 80011b2:	2390      	movs	r3, #144	; 0x90
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	2201      	movs	r2, #1
 80011b8:	2102      	movs	r1, #2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 ffba 	bl	8004134 <HAL_GPIO_WritePin>
 80011c0:	2390      	movs	r3, #144	; 0x90
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	04d2      	lsls	r2, r2, #19
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <WriteCmdParamN+0x48c>)
 80011cc:	2287      	movs	r2, #135	; 0x87
 80011ce:	04d2      	lsls	r2, r2, #19
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <WriteCmdParamN+0x490>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0412      	lsls	r2, r2, #16
 80011d8:	619a      	str	r2, [r3, #24]
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	025a      	lsls	r2, r3, #9
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	401a      	ands	r2, r3
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0219      	lsls	r1, r3, #8
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	400b      	ands	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	0059      	lsls	r1, r3, #1
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	400b      	ands	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	2390      	movs	r3, #144	; 0x90
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	619a      	str	r2, [r3, #24]
 8001208:	0020      	movs	r0, r4
 800120a:	183b      	adds	r3, r7, r0
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2208      	movs	r2, #8
 8001210:	401a      	ands	r2, r3
 8001212:	183b      	adds	r3, r7, r0
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2120      	movs	r1, #32
 800121a:	400b      	ands	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	183b      	adds	r3, r7, r0
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	105b      	asrs	r3, r3, #1
 8001224:	2110      	movs	r1, #16
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	183b      	adds	r3, r7, r0
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0119      	lsls	r1, r3, #4
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	400b      	ands	r3, r1
 8001236:	431a      	orrs	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <WriteCmdParamN+0x48c>)
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	183b      	adds	r3, r7, r0
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	0019      	movs	r1, r3
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <WriteCmdParamN+0x490>)
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	400a      	ands	r2, r1
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	2390      	movs	r3, #144	; 0x90
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	2200      	movs	r2, #0
 8001252:	2102      	movs	r1, #2
 8001254:	0018      	movs	r0, r3
 8001256:	f002 ff6d 	bl	8004134 <HAL_GPIO_WritePin>
 800125a:	2390      	movs	r3, #144	; 0x90
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2201      	movs	r2, #1
 8001260:	2102      	movs	r1, #2
 8001262:	0018      	movs	r0, r3
 8001264:	f002 ff66 	bl	8004134 <HAL_GPIO_WritePin>
 8001268:	2390      	movs	r3, #144	; 0x90
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	2201      	movs	r2, #1
 800126e:	2102      	movs	r1, #2
 8001270:	0018      	movs	r0, r3
 8001272:	f002 ff5f 	bl	8004134 <HAL_GPIO_WritePin>
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	2201      	movs	r2, #1
 800127c:	2110      	movs	r1, #16
 800127e:	0018      	movs	r0, r3
 8001280:	f002 ff58 	bl	8004134 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8001284:	1d7b      	adds	r3, r7, #5
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b25b      	sxtb	r3, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	3a01      	subs	r2, #1
 800128e:	b2d1      	uxtb	r1, r2
 8001290:	1d7a      	adds	r2, r7, #5
 8001292:	7011      	strb	r1, [r2, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dd00      	ble.n	800129a <WriteCmdParamN+0x476>
 8001298:	e6aa      	b.n	8000ff0 <WriteCmdParamN+0x1cc>
        }
    }
    CS_IDLE;
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <WriteCmdParamN+0x48c>)
 800129c:	2201      	movs	r2, #1
 800129e:	2101      	movs	r1, #1
 80012a0:	0018      	movs	r0, r3
 80012a2:	f002 ff47 	bl	8004134 <HAL_GPIO_WritePin>
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b005      	add	sp, #20
 80012ac:	bd90      	pop	{r4, r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	2000002f 	.word	0x2000002f

080012bc <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0005      	movs	r5, r0
 80012c4:	000c      	movs	r4, r1
 80012c6:	0010      	movs	r0, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	1c2a      	adds	r2, r5, #0
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	1dbb      	adds	r3, r7, #6
 80012d2:	1c22      	adds	r2, r4, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	1d7b      	adds	r3, r7, #5
 80012d8:	1c02      	adds	r2, r0, #0
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	1c0a      	adds	r2, r1, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 80012e2:	210c      	movs	r1, #12
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	1dba      	adds	r2, r7, #6
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	1d7a      	adds	r2, r7, #5
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	705a      	strb	r2, [r3, #1]
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	1d3a      	adds	r2, r7, #4
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	709a      	strb	r2, [r3, #2]
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2220      	movs	r2, #32
 8001300:	18ba      	adds	r2, r7, r2
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	70da      	strb	r2, [r3, #3]
    WriteCmdParamN(cmd, 4, d);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	187a      	adds	r2, r7, r1
 800130e:	2104      	movs	r1, #4
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fd87 	bl	8000e24 <WriteCmdParamN>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bdb0      	pop	{r4, r5, r7, pc}

0800131e <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 800131e:	b590      	push	{r4, r7, lr}
 8001320:	b08b      	sub	sp, #44	; 0x2c
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	000a      	movs	r2, r1
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	801a      	strh	r2, [r3, #0]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001330:	e050      	b.n	80013d4 <init_table+0xb6>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	627a      	str	r2, [r7, #36]	; 0x24
 8001338:	2121      	movs	r1, #33	; 0x21
 800133a:	187a      	adds	r2, r7, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	7013      	strb	r3, [r2, #0]
        uint8_t len = pgm_read_byte(p++);
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	627a      	str	r2, [r7, #36]	; 0x24
 8001346:	2223      	movs	r2, #35	; 0x23
 8001348:	18ba      	adds	r2, r7, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	7013      	strb	r3, [r2, #0]
        if (cmd == TFTLCD_DELAY8)
 800134e:	187b      	adds	r3, r7, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b7f      	cmp	r3, #127	; 0x7f
 8001354:	d109      	bne.n	800136a <init_table+0x4c>
        {
            delay(len);
 8001356:	2423      	movs	r4, #35	; 0x23
 8001358:	193b      	adds	r3, r7, r4
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff f953 	bl	8000608 <delay>
            len = 0;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e028      	b.n	80013bc <init_table+0x9e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 800136a:	2322      	movs	r3, #34	; 0x22
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e00e      	b.n	8001392 <init_table+0x74>
                dat[i] = pgm_read_byte(p++);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	627a      	str	r2, [r7, #36]	; 0x24
 800137a:	2022      	movs	r0, #34	; 0x22
 800137c:	183a      	adds	r2, r7, r0
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	7819      	ldrb	r1, [r3, #0]
 8001382:	2308      	movs	r3, #8
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	5499      	strb	r1, [r3, r2]
            for (uint8_t i = 0; i < len; i++)
 8001388:	183b      	adds	r3, r7, r0
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	183b      	adds	r3, r7, r0
 800138e:	3201      	adds	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	2322      	movs	r3, #34	; 0x22
 8001394:	18fa      	adds	r2, r7, r3
 8001396:	2323      	movs	r3, #35	; 0x23
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3e8      	bcc.n	8001374 <init_table+0x56>
            WriteCmdParamN(cmd, len, dat);
 80013a2:	2321      	movs	r3, #33	; 0x21
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b298      	uxth	r0, r3
 80013aa:	2323      	movs	r3, #35	; 0x23
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2208      	movs	r2, #8
 80013b4:	18ba      	adds	r2, r7, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	f7ff fd34 	bl	8000e24 <WriteCmdParamN>
        }
        size -= len + 2;
 80013bc:	1cbb      	adds	r3, r7, #2
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	2323      	movs	r3, #35	; 0x23
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3b02      	subs	r3, #2
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	1cbb      	adds	r3, r7, #2
 80013d2:	801a      	strh	r2, [r3, #0]
    while (size > 0)
 80013d4:	1cbb      	adds	r3, r7, #2
 80013d6:	2200      	movs	r2, #0
 80013d8:	5e9b      	ldrsh	r3, [r3, r2]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dca9      	bgt.n	8001332 <init_table+0x14>
    }
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b00b      	add	sp, #44	; 0x2c
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <reset>:

void reset(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    done_reset = 1;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <reset+0xb4>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80013f2:	f7ff f9f1 	bl	80007d8 <setWriteDir>
    CTL_INIT();
 80013f6:	2390      	movs	r3, #144	; 0x90
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	2101      	movs	r1, #1
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff f935 	bl	800066c <PIN_OUTPUT>
 8001402:	2390      	movs	r3, #144	; 0x90
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	2102      	movs	r1, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff f92f 	bl	800066c <PIN_OUTPUT>
 800140e:	2390      	movs	r3, #144	; 0x90
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	2110      	movs	r1, #16
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff f929 	bl	800066c <PIN_OUTPUT>
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <reset+0xb8>)
 800141c:	2101      	movs	r1, #1
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff f924 	bl	800066c <PIN_OUTPUT>
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <reset+0xbc>)
 8001426:	2102      	movs	r1, #2
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff f91f 	bl	800066c <PIN_OUTPUT>
    CS_IDLE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <reset+0xb8>)
 8001430:	2201      	movs	r2, #1
 8001432:	2101      	movs	r1, #1
 8001434:	0018      	movs	r0, r3
 8001436:	f002 fe7d 	bl	8004134 <HAL_GPIO_WritePin>
    RD_IDLE;
 800143a:	2390      	movs	r3, #144	; 0x90
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	2201      	movs	r2, #1
 8001440:	2101      	movs	r1, #1
 8001442:	0018      	movs	r0, r3
 8001444:	f002 fe76 	bl	8004134 <HAL_GPIO_WritePin>
    WR_IDLE;
 8001448:	2390      	movs	r3, #144	; 0x90
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	0018      	movs	r0, r3
 8001452:	f002 fe6f 	bl	8004134 <HAL_GPIO_WritePin>
    RESET_IDLE;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <reset+0xbc>)
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	0018      	movs	r0, r3
 800145e:	f002 fe69 	bl	8004134 <HAL_GPIO_WritePin>
    delay(50);
 8001462:	2032      	movs	r0, #50	; 0x32
 8001464:	f7ff f8d0 	bl	8000608 <delay>
    RESET_ACTIVE;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <reset+0xbc>)
 800146a:	2200      	movs	r2, #0
 800146c:	2102      	movs	r1, #2
 800146e:	0018      	movs	r0, r3
 8001470:	f002 fe60 	bl	8004134 <HAL_GPIO_WritePin>
    delay(100);
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f7ff f8c7 	bl	8000608 <delay>
    RESET_IDLE;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <reset+0xbc>)
 800147c:	2201      	movs	r2, #1
 800147e:	2102      	movs	r1, #2
 8001480:	0018      	movs	r0, r3
 8001482:	f002 fe57 	bl	8004134 <HAL_GPIO_WritePin>
    delay(100);
 8001486:	2064      	movs	r0, #100	; 0x64
 8001488:	f7ff f8be 	bl	8000608 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 800148c:	2100      	movs	r1, #0
 800148e:	20b0      	movs	r0, #176	; 0xb0
 8001490:	f7ff f950 	bl	8000734 <WriteCmdData>
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	2000002e 	.word	0x2000002e
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800

080014a8 <read16bits>:

static uint16_t read16bits(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 80014ae:	2390      	movs	r3, #144	; 0x90
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	0018      	movs	r0, r3
 80014b8:	f002 fe3c 	bl	8004134 <HAL_GPIO_WritePin>
 80014bc:	2390      	movs	r3, #144	; 0x90
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	0018      	movs	r0, r3
 80014c6:	f002 fe35 	bl	8004134 <HAL_GPIO_WritePin>
 80014ca:	2390      	movs	r3, #144	; 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2200      	movs	r2, #0
 80014d0:	2101      	movs	r1, #1
 80014d2:	0018      	movs	r0, r3
 80014d4:	f002 fe2e 	bl	8004134 <HAL_GPIO_WritePin>
 80014d8:	2390      	movs	r3, #144	; 0x90
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	2200      	movs	r2, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	0018      	movs	r0, r3
 80014e2:	f002 fe27 	bl	8004134 <HAL_GPIO_WritePin>
 80014e6:	2390      	movs	r3, #144	; 0x90
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	0a5b      	lsrs	r3, r3, #9
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b69      	ldr	r3, [pc, #420]	; (800169c <read16bits+0x1f4>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2102      	movs	r1, #2
 8001500:	400b      	ands	r3, r1
 8001502:	b29b      	uxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b29a      	uxth	r2, r3
 8001508:	2390      	movs	r3, #144	; 0x90
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	2104      	movs	r1, #4
 8001514:	400b      	ands	r3, r1
 8001516:	b29b      	uxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b60      	ldr	r3, [pc, #384]	; (80016a0 <read16bits+0x1f8>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	b29b      	uxth	r3, r3
 8001522:	2108      	movs	r1, #8
 8001524:	400b      	ands	r3, r1
 8001526:	b29b      	uxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <read16bits+0x1f8>)
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	b29b      	uxth	r3, r3
 8001534:	2110      	movs	r1, #16
 8001536:	400b      	ands	r3, r1
 8001538:	b29b      	uxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <read16bits+0x1f8>)
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	b29b      	uxth	r3, r3
 8001544:	18db      	adds	r3, r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	2120      	movs	r1, #32
 800154a:	400b      	ands	r3, r1
 800154c:	b29b      	uxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <read16bits+0x1f8>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	b29b      	uxth	r3, r3
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	400b      	ands	r3, r1
 800155e:	b29b      	uxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b299      	uxth	r1, r3
 8001564:	2390      	movs	r3, #144	; 0x90
 8001566:	05db      	lsls	r3, r3, #23
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	4013      	ands	r3, r2
 8001572:	b29a      	uxth	r2, r3
 8001574:	1dbb      	adds	r3, r7, #6
 8001576:	430a      	orrs	r2, r1
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	2390      	movs	r3, #144	; 0x90
 800157c:	05db      	lsls	r3, r3, #23
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	0018      	movs	r0, r3
 8001584:	f002 fdd6 	bl	8004134 <HAL_GPIO_WritePin>
 8001588:	2390      	movs	r3, #144	; 0x90
 800158a:	05db      	lsls	r3, r3, #23
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	0018      	movs	r0, r3
 8001592:	f002 fdcf 	bl	8004134 <HAL_GPIO_WritePin>
    READ_8(lo);
 8001596:	2390      	movs	r3, #144	; 0x90
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	2201      	movs	r2, #1
 800159c:	2101      	movs	r1, #1
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 fdc8 	bl	8004134 <HAL_GPIO_WritePin>
 80015a4:	2390      	movs	r3, #144	; 0x90
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	2200      	movs	r2, #0
 80015aa:	2101      	movs	r1, #1
 80015ac:	0018      	movs	r0, r3
 80015ae:	f002 fdc1 	bl	8004134 <HAL_GPIO_WritePin>
 80015b2:	2390      	movs	r3, #144	; 0x90
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	2200      	movs	r2, #0
 80015b8:	2101      	movs	r1, #1
 80015ba:	0018      	movs	r0, r3
 80015bc:	f002 fdba 	bl	8004134 <HAL_GPIO_WritePin>
 80015c0:	2390      	movs	r3, #144	; 0x90
 80015c2:	05db      	lsls	r3, r3, #23
 80015c4:	2200      	movs	r2, #0
 80015c6:	2101      	movs	r1, #1
 80015c8:	0018      	movs	r0, r3
 80015ca:	f002 fdb3 	bl	8004134 <HAL_GPIO_WritePin>
 80015ce:	2390      	movs	r3, #144	; 0x90
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	0a5b      	lsrs	r3, r3, #9
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <read16bits+0x1f4>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2102      	movs	r1, #2
 80015e8:	400b      	ands	r3, r1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	2390      	movs	r3, #144	; 0x90
 80015f2:	05db      	lsls	r3, r3, #23
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2104      	movs	r1, #4
 80015fc:	400b      	ands	r3, r1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <read16bits+0x1f8>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2108      	movs	r1, #8
 800160c:	400b      	ands	r3, r1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <read16bits+0x1f8>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2110      	movs	r1, #16
 800161e:	400b      	ands	r3, r1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <read16bits+0x1f8>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	18db      	adds	r3, r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2120      	movs	r1, #32
 8001632:	400b      	ands	r3, r1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <read16bits+0x1f8>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	400b      	ands	r3, r1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b2d9      	uxtb	r1, r3
 800164c:	2390      	movs	r3, #144	; 0x90
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	227f      	movs	r2, #127	; 0x7f
 8001658:	4393      	bics	r3, r2
 800165a:	b2da      	uxtb	r2, r3
 800165c:	1d7b      	adds	r3, r7, #5
 800165e:	430a      	orrs	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	2390      	movs	r3, #144	; 0x90
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	2201      	movs	r2, #1
 8001668:	2101      	movs	r1, #1
 800166a:	0018      	movs	r0, r3
 800166c:	f002 fd62 	bl	8004134 <HAL_GPIO_WritePin>
 8001670:	2390      	movs	r3, #144	; 0x90
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fd5b 	bl	8004134 <HAL_GPIO_WritePin>
    return (ret << 8) | lo;
 800167e:	1dbb      	adds	r3, r7, #6
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	1d7b      	adds	r3, r7, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21b      	sxth	r3, r3
 8001690:	b29b      	uxth	r3, r3
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000400 	.word	0x48000400

080016a4 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	1d7b      	adds	r3, r7, #5
 80016b2:	1c0a      	adds	r2, r1, #0
 80016b4:	701a      	strb	r2, [r3, #0]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80016b6:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <readReg+0x220>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <readReg+0x1e>
        reset();
 80016be:	f7ff fe93 	bl	80013e8 <reset>
    CS_ACTIVE;
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <readReg+0x224>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	2101      	movs	r1, #1
 80016c8:	0018      	movs	r0, r3
 80016ca:	f002 fd33 	bl	8004134 <HAL_GPIO_WritePin>
    WriteCmd(reg);
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	2200      	movs	r2, #0
 80016d4:	2110      	movs	r1, #16
 80016d6:	0018      	movs	r0, r3
 80016d8:	f002 fd2c 	bl	8004134 <HAL_GPIO_WritePin>
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	210f      	movs	r1, #15
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	240e      	movs	r4, #14
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	1dba      	adds	r2, r7, #6
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	2390      	movs	r3, #144	; 0x90
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	22e0      	movs	r2, #224	; 0xe0
 80016fa:	04d2      	lsls	r2, r2, #19
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <readReg+0x224>)
 8001700:	2287      	movs	r2, #135	; 0x87
 8001702:	04d2      	lsls	r2, r2, #19
 8001704:	619a      	str	r2, [r3, #24]
 8001706:	4b71      	ldr	r3, [pc, #452]	; (80018cc <readReg+0x228>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	0412      	lsls	r2, r2, #16
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	0008      	movs	r0, r1
 8001710:	183b      	adds	r3, r7, r0
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	025a      	lsls	r2, r3, #9
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	401a      	ands	r2, r3
 800171c:	183b      	adds	r3, r7, r0
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	0219      	lsls	r1, r3, #8
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	400b      	ands	r3, r1
 8001728:	431a      	orrs	r2, r3
 800172a:	183b      	adds	r3, r7, r0
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0059      	lsls	r1, r3, #1
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	400b      	ands	r3, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	2390      	movs	r3, #144	; 0x90
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	183b      	adds	r3, r7, r0
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2208      	movs	r2, #8
 8001744:	401a      	ands	r2, r3
 8001746:	183b      	adds	r3, r7, r0
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2120      	movs	r1, #32
 800174e:	400b      	ands	r3, r1
 8001750:	431a      	orrs	r2, r3
 8001752:	183b      	adds	r3, r7, r0
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	105b      	asrs	r3, r3, #1
 8001758:	2110      	movs	r1, #16
 800175a:	400b      	ands	r3, r1
 800175c:	431a      	orrs	r2, r3
 800175e:	183b      	adds	r3, r7, r0
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	0119      	lsls	r1, r3, #4
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	400b      	ands	r3, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <readReg+0x224>)
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	183b      	adds	r3, r7, r0
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	0019      	movs	r1, r3
 8001778:	4b54      	ldr	r3, [pc, #336]	; (80018cc <readReg+0x228>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	400a      	ands	r2, r1
 800177e:	619a      	str	r2, [r3, #24]
 8001780:	2390      	movs	r3, #144	; 0x90
 8001782:	05db      	lsls	r3, r3, #23
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	0018      	movs	r0, r3
 800178a:	f002 fcd3 	bl	8004134 <HAL_GPIO_WritePin>
 800178e:	2390      	movs	r3, #144	; 0x90
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	2201      	movs	r2, #1
 8001794:	2102      	movs	r1, #2
 8001796:	0018      	movs	r0, r3
 8001798:	f002 fccc 	bl	8004134 <HAL_GPIO_WritePin>
 800179c:	2390      	movs	r3, #144	; 0x90
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f002 fcc5 	bl	8004134 <HAL_GPIO_WritePin>
 80017aa:	2390      	movs	r3, #144	; 0x90
 80017ac:	05db      	lsls	r3, r3, #23
 80017ae:	22e0      	movs	r2, #224	; 0xe0
 80017b0:	04d2      	lsls	r2, r2, #19
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <readReg+0x224>)
 80017b6:	2287      	movs	r2, #135	; 0x87
 80017b8:	04d2      	lsls	r2, r2, #19
 80017ba:	619a      	str	r2, [r3, #24]
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <readReg+0x228>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0412      	lsls	r2, r2, #16
 80017c2:	619a      	str	r2, [r3, #24]
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	025a      	lsls	r2, r3, #9
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	401a      	ands	r2, r3
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	0219      	lsls	r1, r3, #8
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	400b      	ands	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0059      	lsls	r1, r3, #1
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	400b      	ands	r3, r1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	2390      	movs	r3, #144	; 0x90
 80017ee:	05db      	lsls	r3, r3, #23
 80017f0:	619a      	str	r2, [r3, #24]
 80017f2:	0020      	movs	r0, r4
 80017f4:	183b      	adds	r3, r7, r0
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	401a      	ands	r2, r3
 80017fc:	183b      	adds	r3, r7, r0
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2120      	movs	r1, #32
 8001804:	400b      	ands	r3, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	183b      	adds	r3, r7, r0
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	105b      	asrs	r3, r3, #1
 800180e:	2110      	movs	r1, #16
 8001810:	400b      	ands	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	183b      	adds	r3, r7, r0
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	0119      	lsls	r1, r3, #4
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	400b      	ands	r3, r1
 8001820:	431a      	orrs	r2, r3
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <readReg+0x224>)
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	183b      	adds	r3, r7, r0
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	0019      	movs	r1, r3
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <readReg+0x228>)
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	400a      	ands	r2, r1
 8001834:	619a      	str	r2, [r3, #24]
 8001836:	2390      	movs	r3, #144	; 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	2200      	movs	r2, #0
 800183c:	2102      	movs	r1, #2
 800183e:	0018      	movs	r0, r3
 8001840:	f002 fc78 	bl	8004134 <HAL_GPIO_WritePin>
 8001844:	2390      	movs	r3, #144	; 0x90
 8001846:	05db      	lsls	r3, r3, #23
 8001848:	2201      	movs	r2, #1
 800184a:	2102      	movs	r1, #2
 800184c:	0018      	movs	r0, r3
 800184e:	f002 fc71 	bl	8004134 <HAL_GPIO_WritePin>
 8001852:	2390      	movs	r3, #144	; 0x90
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	2201      	movs	r2, #1
 8001858:	2102      	movs	r1, #2
 800185a:	0018      	movs	r0, r3
 800185c:	f002 fc6a 	bl	8004134 <HAL_GPIO_WritePin>
 8001860:	2390      	movs	r3, #144	; 0x90
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	2201      	movs	r2, #1
 8001866:	2110      	movs	r1, #16
 8001868:	0018      	movs	r0, r3
 800186a:	f002 fc63 	bl	8004134 <HAL_GPIO_WritePin>
    setReadDir();
 800186e:	f7fe ff77 	bl	8000760 <setReadDir>
    delay(1);    //1us should be adequate
 8001872:	2001      	movs	r0, #1
 8001874:	f7fe fec8 	bl	8000608 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001878:	230c      	movs	r3, #12
 800187a:	18fc      	adds	r4, r7, r3
 800187c:	f7ff fe14 	bl	80014a8 <read16bits>
 8001880:	0003      	movs	r3, r0
 8001882:	8023      	strh	r3, [r4, #0]
 8001884:	1d7b      	adds	r3, r7, #5
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	1d7b      	adds	r3, r7, #5
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	1d7b      	adds	r3, r7, #5
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b7f      	cmp	r3, #127	; 0x7f
 8001896:	d9ef      	bls.n	8001878 <readReg+0x1d4>
    RD_IDLE;
 8001898:	2390      	movs	r3, #144	; 0x90
 800189a:	05db      	lsls	r3, r3, #23
 800189c:	2201      	movs	r2, #1
 800189e:	2101      	movs	r1, #1
 80018a0:	0018      	movs	r0, r3
 80018a2:	f002 fc47 	bl	8004134 <HAL_GPIO_WritePin>
    CS_IDLE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <readReg+0x224>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	2101      	movs	r1, #1
 80018ac:	0018      	movs	r0, r3
 80018ae:	f002 fc41 	bl	8004134 <HAL_GPIO_WritePin>
    setWriteDir();
 80018b2:	f7fe ff91 	bl	80007d8 <setWriteDir>
    return ret;
 80018b6:	230c      	movs	r3, #12
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	881b      	ldrh	r3, [r3, #0]
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b005      	add	sp, #20
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	2000002e 	.word	0x2000002e
 80018c8:	48000400 	.word	0x48000400
 80018cc:	48000800 	.word	0x48000800

080018d0 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	0002      	movs	r2, r0
 80018d8:	1dbb      	adds	r3, r7, #6
 80018da:	801a      	strh	r2, [r3, #0]
    uint16_t h = readReg(reg, 0);
 80018dc:	250e      	movs	r5, #14
 80018de:	197c      	adds	r4, r7, r5
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	2100      	movs	r1, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fedc 	bl	80016a4 <readReg>
 80018ec:	0003      	movs	r3, r0
 80018ee:	8023      	strh	r3, [r4, #0]
    uint16_t l = readReg(reg, 1);
 80018f0:	260c      	movs	r6, #12
 80018f2:	19bc      	adds	r4, r7, r6
 80018f4:	1dbb      	adds	r3, r7, #6
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff fed2 	bl	80016a4 <readReg>
 8001900:	0003      	movs	r3, r0
 8001902:	8023      	strh	r3, [r4, #0]
    return ((uint32_t) h << 16) | (l);
 8001904:	197b      	adds	r3, r7, r5
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	19bb      	adds	r3, r7, r6
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	4313      	orrs	r3, r2
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b005      	add	sp, #20
 8001916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001918 <tft_init>:
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
}


void tft_init(uint16_t ID)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	0002      	movs	r2, r0
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	801a      	strh	r2, [r3, #0]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    int16_t table_size;
    _lcd_xor = 0;
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <tft_init+0xbc>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <tft_init+0xc0>)
 8001930:	1dba      	adds	r2, r7, #6
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <tft_init+0xc0>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	001a      	movs	r2, r3
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <tft_init+0xc4>)
 800193e:	429a      	cmp	r2, r3
 8001940:	d115      	bne.n	800196e <tft_init+0x56>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <tft_init+0xc8>)
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <tft_init+0xcc>)
 8001946:	801a      	strh	r2, [r3, #0]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B]
            // 3.2 TM  3.2 Inch Initial Code not bad
			0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00,
			0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <tft_init+0xd0>)
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	2312      	movs	r3, #18
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	223b      	movs	r2, #59	; 0x3b
 8001952:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) &_height;
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <tft_init+0xd4>)
 8001956:	60fb      	str	r3, [r7, #12]
        *p16 = 320;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22a0      	movs	r2, #160	; 0xa0
 800195c:	0052      	lsls	r2, r2, #1
 800195e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) &_width;
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <tft_init+0xd8>)
 8001962:	60fb      	str	r3, [r7, #12]
        *p16 = 480;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	22f0      	movs	r2, #240	; 0xf0
 8001968:	0052      	lsls	r2, r2, #1
 800196a:	801a      	strh	r2, [r3, #0]
        break;
 800196c:	e005      	b.n	800197a <tft_init+0x62>
    default:
        p16 = (int16_t *) &width;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <tft_init+0xdc>)
 8001970:	60fb      	str	r3, [r7, #12]
        *p16 = 0;       //error value for width
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	801a      	strh	r2, [r3, #0]
        break;
 8001978:	46c0      	nop			; (mov r8, r8)
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <tft_init+0xc8>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	001a      	movs	r2, r3
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	015b      	lsls	r3, r3, #5
 8001984:	4013      	ands	r3, r2
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	4193      	sbcs	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <tft_init+0xe0>)
 8001990:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <tft_init+0xa6>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <tft_init+0xe4>)
 800199a:	2109      	movs	r1, #9
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fcbe 	bl	800131e <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80019a2:	2312      	movs	r3, #18
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	5e9a      	ldrsh	r2, [r3, r2]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	0011      	movs	r1, r2
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff fcb5 	bl	800131e <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <tft_init+0xe8>)
 80019b6:	2106      	movs	r1, #6
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fcb0 	bl	800131e <init_table>
    }
    setRotation(0);             //PORTRAIT
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f830 	bl	8001a24 <setRotation>
    invertDisplay(false);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 fedd 	bl	8002784 <invertDisplay>
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b006      	add	sp, #24
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	20000090 	.word	0x20000090
 80019d8:	2000008e 	.word	0x2000008e
 80019dc:	00009486 	.word	0x00009486
 80019e0:	20000080 	.word	0x20000080
 80019e4:	00000403 	.word	0x00000403
 80019e8:	0800516c 	.word	0x0800516c
 80019ec:	20000006 	.word	0x20000006
 80019f0:	20000004 	.word	0x20000004
 80019f4:	080006ad 	.word	0x080006ad
 80019f8:	20000084 	.word	0x20000084
 80019fc:	080051a8 	.word	0x080051a8
 8001a00:	080051b4 	.word	0x080051b4

08001a04 <readID>:

uint16_t readID(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
    uint16_t ret = readReg32(0xD3);
 8001a0a:	20d3      	movs	r0, #211	; 0xd3
 8001a0c:	f7ff ff60 	bl	80018d0 <readReg32>
 8001a10:	0002      	movs	r2, r0
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	801a      	strh	r2, [r3, #0]
    return ret;
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	881b      	ldrh	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <setRotation>:
        setAddrWindow(0, 0, width() - 1, height() - 1);
    return 0;
}

void setRotation(uint8_t r)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8001a30:	2312      	movs	r3, #18
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	4aca      	ldr	r2, [pc, #808]	; (8001d60 <setRotation+0x33c>)
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	801a      	strh	r2, [r3, #0]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	4013      	ands	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4bc7      	ldr	r3, [pc, #796]	; (8001d64 <setRotation+0x340>)
 8001a46:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8001a48:	4bc6      	ldr	r3, [pc, #792]	; (8001d64 <setRotation+0x340>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d002      	beq.n	8001a5a <setRotation+0x36>
 8001a54:	23f0      	movs	r3, #240	; 0xf0
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	e001      	b.n	8001a5e <setRotation+0x3a>
 8001a5a:	23a0      	movs	r3, #160	; 0xa0
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4ac2      	ldr	r2, [pc, #776]	; (8001d68 <setRotation+0x344>)
 8001a60:	8013      	strh	r3, [r2, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8001a62:	4bc0      	ldr	r3, [pc, #768]	; (8001d64 <setRotation+0x340>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <setRotation+0x50>
 8001a6e:	23a0      	movs	r3, #160	; 0xa0
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	e001      	b.n	8001a78 <setRotation+0x54>
 8001a74:	23f0      	movs	r3, #240	; 0xf0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4abc      	ldr	r2, [pc, #752]	; (8001d6c <setRotation+0x348>)
 8001a7a:	8013      	strh	r3, [r2, #0]
   switch (rotation) {
 8001a7c:	4bb9      	ldr	r3, [pc, #740]	; (8001d64 <setRotation+0x340>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d00d      	beq.n	8001aa0 <setRotation+0x7c>
 8001a84:	dc02      	bgt.n	8001a8c <setRotation+0x68>
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <setRotation+0x72>
 8001a8a:	e018      	b.n	8001abe <setRotation+0x9a>
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d00c      	beq.n	8001aaa <setRotation+0x86>
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d00f      	beq.n	8001ab4 <setRotation+0x90>
 8001a94:	e013      	b.n	8001abe <setRotation+0x9a>
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001a96:	230b      	movs	r3, #11
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2248      	movs	r2, #72	; 0x48
 8001a9c:	701a      	strb	r2, [r3, #0]
       break;
 8001a9e:	e00e      	b.n	8001abe <setRotation+0x9a>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2228      	movs	r2, #40	; 0x28
 8001aa6:	701a      	strb	r2, [r3, #0]
       break;
 8001aa8:	e009      	b.n	8001abe <setRotation+0x9a>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001aaa:	230b      	movs	r3, #11
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2298      	movs	r2, #152	; 0x98
 8001ab0:	701a      	strb	r2, [r3, #0]
       break;
 8001ab2:	e004      	b.n	8001abe <setRotation+0x9a>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001ab4:	230b      	movs	r3, #11
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	701a      	strb	r2, [r3, #0]
       break;
 8001abc:	46c0      	nop			; (mov r8, r8)
   }
   if (_lcd_capable & INVERT_GS)
 8001abe:	4bac      	ldr	r3, [pc, #688]	; (8001d70 <setRotation+0x34c>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d008      	beq.n	8001ade <setRotation+0xba>
       val ^= 0x80;
 8001acc:	210b      	movs	r1, #11
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	4053      	eors	r3, r2
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_SS)
 8001ade:	4ba4      	ldr	r3, [pc, #656]	; (8001d70 <setRotation+0x34c>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d007      	beq.n	8001afc <setRotation+0xd8>
       val ^= 0x40;
 8001aec:	210b      	movs	r1, #11
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	4053      	eors	r3, r2
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_RGB)
 8001afc:	4b9c      	ldr	r3, [pc, #624]	; (8001d70 <setRotation+0x34c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4013      	ands	r3, r2
 8001b08:	d007      	beq.n	8001b1a <setRotation+0xf6>
       val ^= 0x08;
 8001b0a:	210b      	movs	r1, #11
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4053      	eors	r3, r2
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8001b1a:	4b95      	ldr	r3, [pc, #596]	; (8001d70 <setRotation+0x34c>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	001a      	movs	r2, r3
 8001b20:	2301      	movs	r3, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d100      	bne.n	8001b28 <setRotation+0x104>
 8001b26:	e14e      	b.n	8001dc6 <setRotation+0x3a2>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <setRotation+0x350>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <setRotation+0x354>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d136      	bne.n	8001ba0 <setRotation+0x17c>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8001b32:	200b      	movs	r0, #11
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	105b      	asrs	r3, r3, #1
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	2410      	movs	r4, #16
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	400a      	ands	r2, r1
 8001b48:	801a      	strh	r2, [r3, #0]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	105b      	asrs	r3, r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	250e      	movs	r5, #14
 8001b54:	197b      	adds	r3, r7, r5
 8001b56:	2120      	movs	r1, #32
 8001b58:	400a      	ands	r2, r1
 8001b5a:	801a      	strh	r2, [r3, #0]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8001b5c:	183b      	adds	r3, r7, r0
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2228      	movs	r2, #40	; 0x28
 8001b62:	4013      	ands	r3, r2
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	701a      	strb	r2, [r3, #0]
           d[0] = 0;
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	197b      	adds	r3, r7, r5
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2202      	movs	r2, #2
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	705a      	strb	r2, [r3, #1]
           d[2] = 0x3B;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	223b      	movs	r2, #59	; 0x3b
 8001b90:	709a      	strb	r2, [r3, #2]
           WriteCmdParamN(0xB6, 3, d);
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	001a      	movs	r2, r3
 8001b96:	2103      	movs	r1, #3
 8001b98:	20b6      	movs	r0, #182	; 0xb6
 8001b9a:	f7ff f943 	bl	8000e24 <WriteCmdParamN>
           goto common_MC;
 8001b9e:	e0c2      	b.n	8001d26 <setRotation+0x302>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8001ba0:	4b74      	ldr	r3, [pc, #464]	; (8001d74 <setRotation+0x350>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <setRotation+0x358>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <setRotation+0x19a>
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <setRotation+0x350>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	4a74      	ldr	r2, [pc, #464]	; (8001d80 <setRotation+0x35c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <setRotation+0x19a>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <setRotation+0x350>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <setRotation+0x360>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d14d      	bne.n	8001c5a <setRotation+0x236>
           if (val & 0x80)
 8001bbe:	230b      	movs	r3, #11
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da07      	bge.n	8001bda <setRotation+0x1b6>
               val |= 0x01;    //GS
 8001bca:	210b      	movs	r1, #11
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
           if ((val & 0x40))
 8001bda:	230b      	movs	r3, #11
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	001a      	movs	r2, r3
 8001be2:	2340      	movs	r3, #64	; 0x40
 8001be4:	4013      	ands	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <setRotation+0x1d4>
               val |= 0x02;    //SS
 8001be8:	210b      	movs	r1, #11
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <setRotation+0x350>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <setRotation+0x358>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d107      	bne.n	8001c12 <setRotation+0x1ee>
 8001c02:	210b      	movs	r1, #11
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	223f      	movs	r2, #63	; 0x3f
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8001c12:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <setRotation+0x350>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <setRotation+0x35c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d107      	bne.n	8001c2c <setRotation+0x208>
 8001c1c:	210b      	movs	r1, #11
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	222f      	movs	r2, #47	; 0x2f
 8001c24:	4013      	ands	r3, r2
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x1511) {
 8001c2c:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <setRotation+0x350>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	4a54      	ldr	r2, [pc, #336]	; (8001d84 <setRotation+0x360>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d000      	beq.n	8001c38 <setRotation+0x214>
 8001c36:	e073      	b.n	8001d20 <setRotation+0x2fc>
               val &= ~0x10;   //remove ML
 8001c38:	210b      	movs	r1, #11
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2210      	movs	r2, #16
 8001c40:	4393      	bics	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	701a      	strb	r2, [r3, #0]
               val |= 0xC0;    //force penguin 180 rotation
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	4252      	negs	r2, r2
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	701a      	strb	r2, [r3, #0]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8001c58:	e062      	b.n	8001d20 <setRotation+0x2fc>
      }
       else if (is8347) {
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <setRotation+0x364>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d060      	beq.n	8001d24 <setRotation+0x300>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <setRotation+0x368>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	801a      	strh	r2, [r3, #0]
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <setRotation+0x36c>)
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <setRotation+0x370>)
 8001c70:	2222      	movs	r2, #34	; 0x22
 8001c72:	801a      	strh	r2, [r3, #0]
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <setRotation+0x374>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <setRotation+0x378>)
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	801a      	strh	r2, [r3, #0]
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <setRotation+0x37c>)
 8001c82:	2206      	movs	r2, #6
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <setRotation+0x380>)
 8001c88:	2208      	movs	r2, #8
 8001c8a:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <setRotation+0x350>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	2b65      	cmp	r3, #101	; 0x65
 8001c92:	d128      	bne.n	8001ce6 <setRotation+0x2c2>
               val |= 0x01;    //GS=1
 8001c94:	210b      	movs	r1, #11
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2310      	movs	r3, #16
 8001cac:	4013      	ands	r3, r2
 8001cae:	d008      	beq.n	8001cc2 <setRotation+0x29e>
 8001cb0:	210b      	movs	r1, #11
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	222d      	movs	r2, #45	; 0x2d
 8001cb8:	4252      	negs	r2, r2
 8001cba:	4053      	eors	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d006      	beq.n	8001cda <setRotation+0x2b6>
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <setRotation+0x368>)
 8001cce:	2282      	movs	r2, #130	; 0x82
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <setRotation+0x36c>)
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	e005      	b.n	8001ce6 <setRotation+0x2c2>
               else _MC = 0x80, _MP = 0x82;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <setRotation+0x368>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <setRotation+0x36c>)
 8001ce2:	2282      	movs	r2, #130	; 0x82
 8001ce4:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <setRotation+0x350>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <setRotation+0x384>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d130      	bne.n	8001d52 <setRotation+0x32e>
               val |= 0x02;   //VERT_SCROLLON
 8001cf0:	210b      	movs	r1, #11
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	001a      	movs	r2, r3
 8001d06:	2310      	movs	r3, #16
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <setRotation+0x32e>
 8001d0c:	210b      	movs	r1, #11
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	222c      	movs	r2, #44	; 0x2c
 8001d14:	4252      	negs	r2, r2
 8001d16:	4053      	eors	r3, r2
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
           }
			goto common_BGR;
 8001d1e:	e018      	b.n	8001d52 <setRotation+0x32e>
           goto common_MC;
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	e000      	b.n	8001d26 <setRotation+0x302>
       }
     common_MC:
 8001d24:	46c0      	nop			; (mov r8, r8)
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <setRotation+0x368>)
 8001d28:	222a      	movs	r2, #42	; 0x2a
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <setRotation+0x36c>)
 8001d2e:	222b      	movs	r2, #43	; 0x2b
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <setRotation+0x370>)
 8001d34:	222c      	movs	r2, #44	; 0x2c
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <setRotation+0x374>)
 8001d3a:	222a      	movs	r2, #42	; 0x2a
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <setRotation+0x378>)
 8001d40:	222a      	movs	r2, #42	; 0x2a
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <setRotation+0x37c>)
 8001d46:	222b      	movs	r2, #43	; 0x2b
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <setRotation+0x380>)
 8001d4c:	222b      	movs	r2, #43	; 0x2b
 8001d4e:	801a      	strh	r2, [r3, #0]
 8001d50:	e000      	b.n	8001d54 <setRotation+0x330>
			goto common_BGR;
 8001d52:	46c0      	nop			; (mov r8, r8)
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <setRotation+0x364>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d027      	beq.n	8001dac <setRotation+0x388>
 8001d5c:	2316      	movs	r3, #22
 8001d5e:	e026      	b.n	8001dae <setRotation+0x38a>
 8001d60:	20000084 	.word	0x20000084
 8001d64:	20000031 	.word	0x20000031
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000006 	.word	0x20000006
 8001d70:	20000080 	.word	0x20000080
 8001d74:	2000008e 	.word	0x2000008e
 8001d78:	00006814 	.word	0x00006814
 8001d7c:	00001963 	.word	0x00001963
 8001d80:	00009481 	.word	0x00009481
 8001d84:	00001511 	.word	0x00001511
 8001d88:	2000002f 	.word	0x2000002f
 8001d8c:	20000088 	.word	0x20000088
 8001d90:	20000086 	.word	0x20000086
 8001d94:	2000007e 	.word	0x2000007e
 8001d98:	2000008a 	.word	0x2000008a
 8001d9c:	20000092 	.word	0x20000092
 8001da0:	20000082 	.word	0x20000082
 8001da4:	2000008c 	.word	0x2000008c
 8001da8:	00005252 	.word	0x00005252
 8001dac:	2336      	movs	r3, #54	; 0x36
 8001dae:	240b      	movs	r4, #11
 8001db0:	193a      	adds	r2, r7, r4
 8001db2:	2101      	movs	r1, #1
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff f835 	bl	8000e24 <WriteCmdParamN>
       _lcd_madctl = val;
 8001dba:	193b      	adds	r3, r7, r4
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <setRotation+0x5ac>)
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	e0b6      	b.n	8001f34 <setRotation+0x510>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8001dc6:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <setRotation+0x5b0>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	4a83      	ldr	r2, [pc, #524]	; (8001fd8 <setRotation+0x5b4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00c      	beq.n	8001dea <setRotation+0x3c6>
 8001dd0:	4a81      	ldr	r2, [pc, #516]	; (8001fd8 <setRotation+0x5b4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dc03      	bgt.n	8001dde <setRotation+0x3ba>
 8001dd6:	4a81      	ldr	r2, [pc, #516]	; (8001fdc <setRotation+0x5b8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d006      	beq.n	8001dea <setRotation+0x3c6>
 8001ddc:	e04a      	b.n	8001e74 <setRotation+0x450>
 8001dde:	4a80      	ldr	r2, [pc, #512]	; (8001fe0 <setRotation+0x5bc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d002      	beq.n	8001dea <setRotation+0x3c6>
 8001de4:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <setRotation+0x5c0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d144      	bne.n	8001e74 <setRotation+0x450>
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8001dea:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <setRotation+0x5c4>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	4b7e      	ldr	r3, [pc, #504]	; (8001fec <setRotation+0x5c8>)
 8001df4:	4a7e      	ldr	r2, [pc, #504]	; (8001ff0 <setRotation+0x5cc>)
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <setRotation+0x5d0>)
 8001dfa:	4a7f      	ldr	r2, [pc, #508]	; (8001ff8 <setRotation+0x5d4>)
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <setRotation+0x5d8>)
 8001e00:	2284      	movs	r2, #132	; 0x84
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	4b7e      	ldr	r3, [pc, #504]	; (8002000 <setRotation+0x5dc>)
 8001e08:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <setRotation+0x5e0>)
 8001e0a:	801a      	strh	r2, [r3, #0]
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <setRotation+0x5e4>)
 8001e0e:	4a7f      	ldr	r2, [pc, #508]	; (800200c <setRotation+0x5e8>)
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <setRotation+0x5ec>)
 8001e14:	4a7f      	ldr	r2, [pc, #508]	; (8002014 <setRotation+0x5f0>)
 8001e16:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8001e18:	230b      	movs	r3, #11
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	2310      	movs	r3, #16
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	0bd2      	lsrs	r2, r2, #15
 8001e28:	03d2      	lsls	r2, r2, #15
 8001e2a:	801a      	strh	r2, [r3, #0]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8001e2c:	2314      	movs	r3, #20
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	22d4      	movs	r2, #212	; 0xd4
 8001e32:	01d2      	lsls	r2, r2, #7
 8001e34:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <setRotation+0x5b0>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	4a69      	ldr	r2, [pc, #420]	; (8001fe0 <setRotation+0x5bc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <setRotation+0x426>
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <setRotation+0x5b0>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <setRotation+0x5b8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d105      	bne.n	8001e56 <setRotation+0x432>
 8001e4a:	2214      	movs	r2, #20
 8001e4c:	18bb      	adds	r3, r7, r2
 8001e4e:	18ba      	adds	r2, r7, r2
 8001e50:	8812      	ldrh	r2, [r2, #0]
 8001e52:	0852      	lsrs	r2, r2, #1
 8001e54:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x400, GS | NL);
 8001e56:	2310      	movs	r3, #16
 8001e58:	18fa      	adds	r2, r7, r3
 8001e5a:	2314      	movs	r3, #20
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	8812      	ldrh	r2, [r2, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7fe fc61 	bl	8000734 <WriteCmdData>
           goto common_SS;
 8001e72:	e028      	b.n	8001ec6 <setRotation+0x4a2>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8001e74:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <setRotation+0x5c4>)
 8001e76:	2220      	movs	r2, #32
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <setRotation+0x5c8>)
 8001e7c:	2221      	movs	r2, #33	; 0x21
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <setRotation+0x5d0>)
 8001e82:	2222      	movs	r2, #34	; 0x22
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <setRotation+0x5d8>)
 8001e88:	2250      	movs	r2, #80	; 0x50
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <setRotation+0x5dc>)
 8001e8e:	2251      	movs	r2, #81	; 0x51
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <setRotation+0x5e4>)
 8001e94:	2252      	movs	r2, #82	; 0x52
 8001e96:	801a      	strh	r2, [r3, #0]
 8001e98:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <setRotation+0x5ec>)
 8001e9a:	2253      	movs	r2, #83	; 0x53
 8001e9c:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8001e9e:	230b      	movs	r3, #11
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	0bd2      	lsrs	r2, r2, #15
 8001eae:	03d2      	lsls	r2, r2, #15
 8001eb0:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	229c      	movs	r2, #156	; 0x9c
 8001eb8:	0192      	lsls	r2, r2, #6
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	2060      	movs	r0, #96	; 0x60
 8001ec2:	f7fe fc37 	bl	8000734 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8001ec6:	240b      	movs	r4, #11
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	b299      	uxth	r1, r3
 8001ed0:	200e      	movs	r0, #14
 8001ed2:	183b      	adds	r3, r7, r0
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	400a      	ands	r2, r1
 8001eda:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8001edc:	183b      	adds	r3, r7, r0
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7fe fc26 	bl	8000734 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	109b      	asrs	r3, r3, #2
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2316      	movs	r3, #22
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]
           if (val & 0x08)
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	001a      	movs	r2, r3
 8001f00:	2308      	movs	r3, #8
 8001f02:	4013      	ands	r3, r2
 8001f04:	d007      	beq.n	8001f16 <setRotation+0x4f2>
               ORG |= 0x1000;  //BGR
 8001f06:	2216      	movs	r2, #22
 8001f08:	18bb      	adds	r3, r7, r2
 8001f0a:	18ba      	adds	r2, r7, r2
 8001f0c:	8812      	ldrh	r2, [r2, #0]
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0149      	lsls	r1, r1, #5
 8001f12:	430a      	orrs	r2, r1
 8001f14:	801a      	strh	r2, [r3, #0]
           _lcd_madctl = ORG | 0x0030;
 8001f16:	2316      	movs	r3, #22
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2230      	movs	r2, #48	; 0x30
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <setRotation+0x5ac>)
 8001f24:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <setRotation+0x5ac>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f7fe fc01 	bl	8000734 <WriteCmdData>
           break;
 8001f32:	46c0      	nop			; (mov r8, r8)
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <setRotation+0x5f4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	001a      	movs	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d02b      	beq.n	8001f98 <setRotation+0x574>
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <setRotation+0x5f8>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	001a      	movs	r2, r3
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d124      	bne.n	8001f98 <setRotation+0x574>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8001f4e:	210c      	movs	r1, #12
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <setRotation+0x5c4>)
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <setRotation+0x5c8>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <setRotation+0x5c4>)
 8001f5e:	801a      	strh	r2, [r3, #0]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <setRotation+0x5c8>)
 8001f62:	187a      	adds	r2, r7, r1
 8001f64:	8812      	ldrh	r2, [r2, #0]
 8001f66:	801a      	strh	r2, [r3, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <setRotation+0x5d8>)
 8001f6c:	8812      	ldrh	r2, [r2, #0]
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <setRotation+0x5e4>)
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <setRotation+0x5d8>)
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <setRotation+0x5e4>)
 8001f7a:	187a      	adds	r2, r7, r1
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	801a      	strh	r2, [r3, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <setRotation+0x5dc>)
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <setRotation+0x5ec>)
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <setRotation+0x5dc>)
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <setRotation+0x5ec>)
 8001f92:	187a      	adds	r2, r7, r1
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	801a      	strh	r2, [r3, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8001f98:	f7fe fb88 	bl	80006ac <width>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b21c      	sxth	r4, r3
 8001fa4:	f7fe fb8c 	bl	80006c0 <height>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	0022      	movs	r2, r4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 f96b 	bl	8002290 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001fba:	23f0      	movs	r3, #240	; 0xf0
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 fa66 	bl	8002494 <vertScroll>
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd0:	20000094 	.word	0x20000094
 8001fd4:	2000008e 	.word	0x2000008e
 8001fd8:	00007793 	.word	0x00007793
 8001fdc:	00005420 	.word	0x00005420
 8001fe0:	00009326 	.word	0x00009326
 8001fe4:	0000b509 	.word	0x0000b509
 8001fe8:	20000088 	.word	0x20000088
 8001fec:	20000086 	.word	0x20000086
 8001ff0:	00000201 	.word	0x00000201
 8001ff4:	2000007e 	.word	0x2000007e
 8001ff8:	00000202 	.word	0x00000202
 8001ffc:	2000008a 	.word	0x2000008a
 8002000:	20000092 	.word	0x20000092
 8002004:	00000211 	.word	0x00000211
 8002008:	20000082 	.word	0x20000082
 800200c:	00000212 	.word	0x00000212
 8002010:	2000008c 	.word	0x2000008c
 8002014:	00000213 	.word	0x00000213
 8002018:	20000031 	.word	0x20000031
 800201c:	20000080 	.word	0x20000080

08002020 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	0004      	movs	r4, r0
 8002028:	0008      	movs	r0, r1
 800202a:	0011      	movs	r1, r2
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	1c22      	adds	r2, r4, #0
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	1c02      	adds	r2, r0, #0
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	1cbb      	adds	r3, r7, #2
 800203a:	1c0a      	adds	r2, r1, #0
 800203c:	801a      	strh	r2, [r3, #0]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	2200      	movs	r2, #0
 8002042:	5e9b      	ldrsh	r3, [r3, r2]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da00      	bge.n	800204a <drawPixel+0x2a>
 8002048:	e116      	b.n	8002278 <drawPixel+0x258>
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	5e9b      	ldrsh	r3, [r3, r2]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da00      	bge.n	8002056 <drawPixel+0x36>
 8002054:	e110      	b.n	8002278 <drawPixel+0x258>
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	2400      	movs	r4, #0
 800205a:	5f1c      	ldrsh	r4, [r3, r4]
 800205c:	f7fe fb26 	bl	80006ac <width>
 8002060:	0003      	movs	r3, r0
 8002062:	429c      	cmp	r4, r3
 8002064:	db00      	blt.n	8002068 <drawPixel+0x48>
 8002066:	e107      	b.n	8002278 <drawPixel+0x258>
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2400      	movs	r4, #0
 800206c:	5f1c      	ldrsh	r4, [r3, r4]
 800206e:	f7fe fb27 	bl	80006c0 <height>
 8002072:	0003      	movs	r3, r0
 8002074:	429c      	cmp	r4, r3
 8002076:	db00      	blt.n	800207a <drawPixel+0x5a>
 8002078:	e0fe      	b.n	8002278 <drawPixel+0x258>
       return;
   setAddrWindow(x, y, x, y);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2400      	movs	r4, #0
 800207e:	5f1c      	ldrsh	r4, [r3, r4]
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	2200      	movs	r2, #0
 8002084:	5e9a      	ldrsh	r2, [r3, r2]
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2100      	movs	r1, #0
 800208a:	5e59      	ldrsh	r1, [r3, r1]
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	2000      	movs	r0, #0
 8002090:	5e18      	ldrsh	r0, [r3, r0]
 8002092:	0023      	movs	r3, r4
 8002094:	f000 f8fc 	bl	8002290 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <drawPixel+0x260>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d100      	bne.n	80020a2 <drawPixel+0x82>
 80020a0:	e0e1      	b.n	8002266 <drawPixel+0x246>
 80020a2:	4b78      	ldr	r3, [pc, #480]	; (8002284 <drawPixel+0x264>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 f843 	bl	8004134 <HAL_GPIO_WritePin>
 80020ae:	2390      	movs	r3, #144	; 0x90
 80020b0:	05db      	lsls	r3, r3, #23
 80020b2:	2200      	movs	r2, #0
 80020b4:	2110      	movs	r1, #16
 80020b6:	0018      	movs	r0, r3
 80020b8:	f002 f83c 	bl	8004134 <HAL_GPIO_WritePin>
 80020bc:	4b72      	ldr	r3, [pc, #456]	; (8002288 <drawPixel+0x268>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	210f      	movs	r1, #15
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	4b6f      	ldr	r3, [pc, #444]	; (8002288 <drawPixel+0x268>)
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	240e      	movs	r4, #14
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	2390      	movs	r3, #144	; 0x90
 80020d6:	05db      	lsls	r3, r3, #23
 80020d8:	22e0      	movs	r2, #224	; 0xe0
 80020da:	04d2      	lsls	r2, r2, #19
 80020dc:	619a      	str	r2, [r3, #24]
 80020de:	4b69      	ldr	r3, [pc, #420]	; (8002284 <drawPixel+0x264>)
 80020e0:	2287      	movs	r2, #135	; 0x87
 80020e2:	04d2      	lsls	r2, r2, #19
 80020e4:	619a      	str	r2, [r3, #24]
 80020e6:	4b69      	ldr	r3, [pc, #420]	; (800228c <drawPixel+0x26c>)
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	0412      	lsls	r2, r2, #16
 80020ec:	619a      	str	r2, [r3, #24]
 80020ee:	0008      	movs	r0, r1
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	025a      	lsls	r2, r3, #9
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	401a      	ands	r2, r3
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	0219      	lsls	r1, r3, #8
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	183b      	adds	r3, r7, r0
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	0059      	lsls	r1, r3, #1
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	400b      	ands	r3, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	2390      	movs	r3, #144	; 0x90
 800211a:	05db      	lsls	r3, r3, #23
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	183b      	adds	r3, r7, r0
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	401a      	ands	r2, r3
 8002126:	183b      	adds	r3, r7, r0
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2120      	movs	r1, #32
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	183b      	adds	r3, r7, r0
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	105b      	asrs	r3, r3, #1
 8002138:	2110      	movs	r1, #16
 800213a:	400b      	ands	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	183b      	adds	r3, r7, r0
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	0119      	lsls	r1, r3, #4
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <drawPixel+0x264>)
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	183b      	adds	r3, r7, r0
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	0019      	movs	r1, r3
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <drawPixel+0x26c>)
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	400a      	ands	r2, r1
 800215e:	619a      	str	r2, [r3, #24]
 8002160:	2390      	movs	r3, #144	; 0x90
 8002162:	05db      	lsls	r3, r3, #23
 8002164:	2200      	movs	r2, #0
 8002166:	2102      	movs	r1, #2
 8002168:	0018      	movs	r0, r3
 800216a:	f001 ffe3 	bl	8004134 <HAL_GPIO_WritePin>
 800216e:	2390      	movs	r3, #144	; 0x90
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	2201      	movs	r2, #1
 8002174:	2102      	movs	r1, #2
 8002176:	0018      	movs	r0, r3
 8002178:	f001 ffdc 	bl	8004134 <HAL_GPIO_WritePin>
 800217c:	2390      	movs	r3, #144	; 0x90
 800217e:	05db      	lsls	r3, r3, #23
 8002180:	2201      	movs	r2, #1
 8002182:	2102      	movs	r1, #2
 8002184:	0018      	movs	r0, r3
 8002186:	f001 ffd5 	bl	8004134 <HAL_GPIO_WritePin>
 800218a:	2390      	movs	r3, #144	; 0x90
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	22e0      	movs	r2, #224	; 0xe0
 8002190:	04d2      	lsls	r2, r2, #19
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <drawPixel+0x264>)
 8002196:	2287      	movs	r2, #135	; 0x87
 8002198:	04d2      	lsls	r2, r2, #19
 800219a:	619a      	str	r2, [r3, #24]
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <drawPixel+0x26c>)
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	0412      	lsls	r2, r2, #16
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	025a      	lsls	r2, r3, #9
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	401a      	ands	r2, r3
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	0219      	lsls	r1, r3, #8
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0059      	lsls	r1, r3, #1
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	400b      	ands	r3, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	2390      	movs	r3, #144	; 0x90
 80021ce:	05db      	lsls	r3, r3, #23
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	0020      	movs	r0, r4
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	401a      	ands	r2, r3
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2120      	movs	r1, #32
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	183b      	adds	r3, r7, r0
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	105b      	asrs	r3, r3, #1
 80021ee:	2110      	movs	r1, #16
 80021f0:	400b      	ands	r3, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	0119      	lsls	r1, r3, #4
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <drawPixel+0x264>)
 8002204:	619a      	str	r2, [r3, #24]
 8002206:	183b      	adds	r3, r7, r0
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	0019      	movs	r1, r3
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <drawPixel+0x26c>)
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	400a      	ands	r2, r1
 8002214:	619a      	str	r2, [r3, #24]
 8002216:	2390      	movs	r3, #144	; 0x90
 8002218:	05db      	lsls	r3, r3, #23
 800221a:	2200      	movs	r2, #0
 800221c:	2102      	movs	r1, #2
 800221e:	0018      	movs	r0, r3
 8002220:	f001 ff88 	bl	8004134 <HAL_GPIO_WritePin>
 8002224:	2390      	movs	r3, #144	; 0x90
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	2201      	movs	r2, #1
 800222a:	2102      	movs	r1, #2
 800222c:	0018      	movs	r0, r3
 800222e:	f001 ff81 	bl	8004134 <HAL_GPIO_WritePin>
 8002232:	2390      	movs	r3, #144	; 0x90
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	2201      	movs	r2, #1
 8002238:	2102      	movs	r1, #2
 800223a:	0018      	movs	r0, r3
 800223c:	f001 ff7a 	bl	8004134 <HAL_GPIO_WritePin>
 8002240:	2390      	movs	r3, #144	; 0x90
 8002242:	05db      	lsls	r3, r3, #23
 8002244:	2201      	movs	r2, #1
 8002246:	2110      	movs	r1, #16
 8002248:	0018      	movs	r0, r3
 800224a:	f001 ff73 	bl	8004134 <HAL_GPIO_WritePin>
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7fe fafc 	bl	8000850 <write24>
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <drawPixel+0x264>)
 800225a:	2201      	movs	r2, #1
 800225c:	2101      	movs	r1, #1
 800225e:	0018      	movs	r0, r3
 8002260:	f001 ff68 	bl	8004134 <HAL_GPIO_WritePin>
 8002264:	e009      	b.n	800227a <drawPixel+0x25a>
   WriteCmdData(_MW, color);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <drawPixel+0x268>)
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	1cbb      	adds	r3, r7, #2
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	0019      	movs	r1, r3
 8002270:	0010      	movs	r0, r2
 8002272:	f7fe fa5f 	bl	8000734 <WriteCmdData>
 8002276:	e000      	b.n	800227a <drawPixel+0x25a>
       return;
 8002278:	46c0      	nop			; (mov r8, r8)
}
 800227a:	46bd      	mov	sp, r7
 800227c:	b005      	add	sp, #20
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	20000030 	.word	0x20000030
 8002284:	48000400 	.word	0x48000400
 8002288:	2000007e 	.word	0x2000007e
 800228c:	48000800 	.word	0x48000800

08002290 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af02      	add	r7, sp, #8
 8002296:	0005      	movs	r5, r0
 8002298:	000c      	movs	r4, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	1dbb      	adds	r3, r7, #6
 80022a0:	1c2a      	adds	r2, r5, #0
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	1c22      	adds	r2, r4, #0
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	1cbb      	adds	r3, r7, #2
 80022ac:	1c02      	adds	r2, r0, #0
 80022ae:	801a      	strh	r2, [r3, #0]
 80022b0:	003b      	movs	r3, r7
 80022b2:	1c0a      	adds	r2, r1, #0
 80022b4:	801a      	strh	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <setAddrWindow+0x1dc>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	d067      	beq.n	8002392 <setAddrWindow+0x102>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80022c2:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <setAddrWindow+0x1e0>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b2d8      	uxtb	r0, r3
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	2200      	movs	r2, #0
 80022cc:	5e9b      	ldrsh	r3, [r3, r2]
 80022ce:	121b      	asrs	r3, r3, #8
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	b2d9      	uxtb	r1, r3
 80022d4:	1dbb      	adds	r3, r7, #6
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	1cbb      	adds	r3, r7, #2
 80022dc:	2400      	movs	r4, #0
 80022de:	5f1b      	ldrsh	r3, [r3, r4]
 80022e0:	121b      	asrs	r3, r3, #8
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	b2dc      	uxtb	r4, r3
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0023      	movs	r3, r4
 80022f0:	f7fe ffe4 	bl	80012bc <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <setAddrWindow+0x1e4>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b2d8      	uxtb	r0, r3
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002300:	121b      	asrs	r3, r3, #8
 8002302:	b21b      	sxth	r3, r3
 8002304:	b2d9      	uxtb	r1, r3
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	003b      	movs	r3, r7
 800230e:	2400      	movs	r4, #0
 8002310:	5f1b      	ldrsh	r3, [r3, r4]
 8002312:	121b      	asrs	r3, r3, #8
 8002314:	b21b      	sxth	r3, r3
 8002316:	b2dc      	uxtb	r4, r3
 8002318:	003b      	movs	r3, r7
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	0023      	movs	r3, r4
 8002322:	f7fe ffcb 	bl	80012bc <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8002326:	4b54      	ldr	r3, [pc, #336]	; (8002478 <setAddrWindow+0x1e8>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <setAddrWindow+0xa0>
 800232e:	e099      	b.n	8002464 <setAddrWindow+0x1d4>
 8002330:	4b52      	ldr	r3, [pc, #328]	; (800247c <setAddrWindow+0x1ec>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	2b65      	cmp	r3, #101	; 0x65
 8002336:	d000      	beq.n	800233a <setAddrWindow+0xaa>
 8002338:	e094      	b.n	8002464 <setAddrWindow+0x1d4>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	2200      	movs	r2, #0
 800233e:	5e9b      	ldrsh	r3, [r3, r2]
 8002340:	121b      	asrs	r3, r3, #8
 8002342:	b21b      	sxth	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	210c      	movs	r1, #12
 8002348:	187b      	adds	r3, r7, r1
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	1dbb      	adds	r3, r7, #6
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	187b      	adds	r3, r7, r1
 8002354:	705a      	strb	r2, [r3, #1]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <setAddrWindow+0x1f0>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	000c      	movs	r4, r1
 800235c:	187a      	adds	r2, r7, r1
 800235e:	2102      	movs	r1, #2
 8002360:	0018      	movs	r0, r3
 8002362:	f7fe fd5f 	bl	8000e24 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	5e9b      	ldrsh	r3, [r3, r2]
 800236c:	121b      	asrs	r3, r3, #8
 800236e:	b21b      	sxth	r3, r3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	0021      	movs	r1, r4
 8002374:	187b      	adds	r3, r7, r1
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	187b      	adds	r3, r7, r1
 8002380:	705a      	strb	r2, [r3, #1]
           WriteCmdParamN(_MP, 2, d);
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <setAddrWindow+0x1f4>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	187a      	adds	r2, r7, r1
 8002388:	2102      	movs	r1, #2
 800238a:	0018      	movs	r0, r3
 800238c:	f7fe fd4a 	bl	8000e24 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8002390:	e068      	b.n	8002464 <setAddrWindow+0x1d4>
       WriteCmdData(_MC, x);
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <setAddrWindow+0x1f0>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f7fe f9c9 	bl	8000734 <WriteCmdData>
       WriteCmdData(_MP, y);
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <setAddrWindow+0x1f4>)
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	0019      	movs	r1, r3
 80023ac:	0010      	movs	r0, r2
 80023ae:	f7fe f9c1 	bl	8000734 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 80023b2:	1dba      	adds	r2, r7, #6
 80023b4:	1cbb      	adds	r3, r7, #2
 80023b6:	2100      	movs	r1, #0
 80023b8:	5e52      	ldrsh	r2, [r2, r1]
 80023ba:	2100      	movs	r1, #0
 80023bc:	5e5b      	ldrsh	r3, [r3, r1]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d107      	bne.n	80023d2 <setAddrWindow+0x142>
 80023c2:	1d3a      	adds	r2, r7, #4
 80023c4:	003b      	movs	r3, r7
 80023c6:	2100      	movs	r1, #0
 80023c8:	5e52      	ldrsh	r2, [r2, r1]
 80023ca:	2100      	movs	r1, #0
 80023cc:	5e5b      	ldrsh	r3, [r3, r1]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d048      	beq.n	8002464 <setAddrWindow+0x1d4>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <setAddrWindow+0x1dc>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	001a      	movs	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	4013      	ands	r3, r2
 80023dc:	d022      	beq.n	8002424 <setAddrWindow+0x194>
               if (rotation & 1)
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <setAddrWindow+0x1f8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	001a      	movs	r2, r3
 80023e4:	2301      	movs	r3, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00e      	beq.n	8002408 <setAddrWindow+0x178>
                   y1 = y = (y1 << 8) | y;
 80023ea:	003b      	movs	r3, r7
 80023ec:	2200      	movs	r2, #0
 80023ee:	5e9b      	ldrsh	r3, [r3, r2]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b219      	sxth	r1, r3
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	1d3a      	adds	r2, r7, #4
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	003b      	movs	r3, r7
 8002400:	1d3a      	adds	r2, r7, #4
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	e00d      	b.n	8002424 <setAddrWindow+0x194>
                   x1 = x = (x1 << 8) | x;
 8002408:	1cbb      	adds	r3, r7, #2
 800240a:	2200      	movs	r2, #0
 800240c:	5e9b      	ldrsh	r3, [r3, r2]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b219      	sxth	r1, r3
 8002412:	1dbb      	adds	r3, r7, #6
 8002414:	1dba      	adds	r2, r7, #6
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	1cbb      	adds	r3, r7, #2
 800241e:	1dba      	adds	r2, r7, #6
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	801a      	strh	r2, [r3, #0]
           WriteCmdData(_SC, x);
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <setAddrWindow+0x1e0>)
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	0019      	movs	r1, r3
 800242e:	0010      	movs	r0, r2
 8002430:	f7fe f980 	bl	8000734 <WriteCmdData>
           WriteCmdData(_SP, y);
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <setAddrWindow+0x1e4>)
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7fe f978 	bl	8000734 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <setAddrWindow+0x1fc>)
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	1cbb      	adds	r3, r7, #2
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	0019      	movs	r1, r3
 800244e:	0010      	movs	r0, r2
 8002450:	f7fe f970 	bl	8000734 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <setAddrWindow+0x200>)
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	003b      	movs	r3, r7
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f7fe f968 	bl	8000734 <WriteCmdData>
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bdb0      	pop	{r4, r5, r7, pc}
 800246c:	20000080 	.word	0x20000080
 8002470:	2000008a 	.word	0x2000008a
 8002474:	20000082 	.word	0x20000082
 8002478:	2000002f 	.word	0x2000002f
 800247c:	2000008e 	.word	0x2000008e
 8002480:	20000088 	.word	0x20000088
 8002484:	20000086 	.word	0x20000086
 8002488:	20000031 	.word	0x20000031
 800248c:	20000092 	.word	0x20000092
 8002490:	2000008c 	.word	0x2000008c

08002494 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	0004      	movs	r4, r0
 800249c:	0008      	movs	r0, r1
 800249e:	0011      	movs	r1, r2
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	1c22      	adds	r2, r4, #0
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	1c02      	adds	r2, r0, #0
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	1cbb      	adds	r3, r7, #2
 80024ae:	1c0a      	adds	r2, r1, #0
 80024b0:	801a      	strh	r2, [r3, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80024b2:	1dbb      	adds	r3, r7, #6
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	425b      	negs	r3, r3
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	33e1      	adds	r3, #225	; 0xe1
 80024c4:	33ff      	adds	r3, #255	; 0xff
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2316      	movs	r3, #22
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	801a      	strh	r2, [r3, #0]
    int16_t vsp;
    int16_t sea = top;
 80024ce:	2312      	movs	r3, #18
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	1dba      	adds	r2, r7, #6
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	801a      	strh	r2, [r3, #0]
	if (_lcd_ID == 0x9327) bfa += 32;
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <vertScroll+0x284>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	4a8f      	ldr	r2, [pc, #572]	; (800271c <vertScroll+0x288>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d106      	bne.n	80024f0 <vertScroll+0x5c>
 80024e2:	2116      	movs	r1, #22
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3320      	adds	r3, #32
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	801a      	strh	r2, [r3, #0]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80024f0:	1cbb      	adds	r3, r7, #2
 80024f2:	2200      	movs	r2, #0
 80024f4:	5e9a      	ldrsh	r2, [r3, r2]
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2100      	movs	r1, #0
 80024fa:	5e5b      	ldrsh	r3, [r3, r1]
 80024fc:	425b      	negs	r3, r3
 80024fe:	429a      	cmp	r2, r3
 8002500:	dd07      	ble.n	8002512 <vertScroll+0x7e>
 8002502:	1cba      	adds	r2, r7, #2
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2100      	movs	r1, #0
 8002508:	5e52      	ldrsh	r2, [r2, r1]
 800250a:	2100      	movs	r1, #0
 800250c:	5e5b      	ldrsh	r3, [r3, r1]
 800250e:	429a      	cmp	r2, r3
 8002510:	db02      	blt.n	8002518 <vertScroll+0x84>
 8002512:	1cbb      	adds	r3, r7, #2
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
	vsp = top + offset; // vertical start position
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	1cbb      	adds	r3, r7, #2
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	b29a      	uxth	r2, r3
 8002524:	2314      	movs	r3, #20
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	801a      	strh	r2, [r3, #0]
    if (offset < 0)
 800252a:	1cbb      	adds	r3, r7, #2
 800252c:	2200      	movs	r2, #0
 800252e:	5e9b      	ldrsh	r3, [r3, r2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da08      	bge.n	8002546 <vertScroll+0xb2>
        vsp += scrollines;          //keep in unsigned range
 8002534:	2114      	movs	r1, #20
 8002536:	187b      	adds	r3, r7, r1
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	b29a      	uxth	r2, r3
 8002542:	187b      	adds	r3, r7, r1
 8002544:	801a      	strh	r2, [r3, #0]
    sea = top + scrollines - 1;
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	18d3      	adds	r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	2312      	movs	r3, #18
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800255c:	4b70      	ldr	r3, [pc, #448]	; (8002720 <vertScroll+0x28c>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	001a      	movs	r2, r3
 8002562:	2301      	movs	r3, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d100      	bne.n	800256a <vertScroll+0xd6>
 8002568:	e089      	b.n	800267e <vertScroll+0x1ea>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	2200      	movs	r2, #0
 800256e:	5e9b      	ldrsh	r3, [r3, r2]
 8002570:	121b      	asrs	r3, r3, #8
 8002572:	b21b      	sxth	r3, r3
 8002574:	b2da      	uxtb	r2, r3
 8002576:	210c      	movs	r1, #12
 8002578:	187b      	adds	r3, r7, r1
 800257a:	701a      	strb	r2, [r3, #0]
        d[1] = top;
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	187b      	adds	r3, r7, r1
 8002584:	705a      	strb	r2, [r3, #1]
        d[2] = scrollines >> 8; //VSA
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2200      	movs	r2, #0
 800258a:	5e9b      	ldrsh	r3, [r3, r2]
 800258c:	121b      	asrs	r3, r3, #8
 800258e:	b21b      	sxth	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	187b      	adds	r3, r7, r1
 8002594:	709a      	strb	r2, [r3, #2]
        d[3] = scrollines;
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	187b      	adds	r3, r7, r1
 800259e:	70da      	strb	r2, [r3, #3]
        d[4] = bfa >> 8;        //BFA
 80025a0:	2016      	movs	r0, #22
 80025a2:	183b      	adds	r3, r7, r0
 80025a4:	2200      	movs	r2, #0
 80025a6:	5e9b      	ldrsh	r3, [r3, r2]
 80025a8:	121b      	asrs	r3, r3, #8
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	711a      	strb	r2, [r3, #4]
        d[5] = bfa;
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	715a      	strb	r2, [r3, #5]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <vertScroll+0x290>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <vertScroll+0x134>
 80025c4:	230e      	movs	r3, #14
 80025c6:	e000      	b.n	80025ca <vertScroll+0x136>
 80025c8:	2333      	movs	r3, #51	; 0x33
 80025ca:	210c      	movs	r1, #12
 80025cc:	000c      	movs	r4, r1
 80025ce:	187a      	adds	r2, r7, r1
 80025d0:	2106      	movs	r1, #6
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fe fc26 	bl	8000e24 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80025d8:	2014      	movs	r0, #20
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	2200      	movs	r2, #0
 80025de:	5e9b      	ldrsh	r3, [r3, r2]
 80025e0:	121b      	asrs	r3, r3, #8
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	0021      	movs	r1, r4
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	701a      	strb	r2, [r3, #0]
        d[1] = vsp;
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	705a      	strb	r2, [r3, #1]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80025f6:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <vertScroll+0x290>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <vertScroll+0x16e>
 80025fe:	2314      	movs	r3, #20
 8002600:	e000      	b.n	8002604 <vertScroll+0x170>
 8002602:	2337      	movs	r3, #55	; 0x37
 8002604:	220c      	movs	r2, #12
 8002606:	18ba      	adds	r2, r7, r2
 8002608:	2102      	movs	r1, #2
 800260a:	0018      	movs	r0, r3
 800260c:	f7fe fc0a 	bl	8000e24 <WriteCmdParamN>
		if (is8347) {
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <vertScroll+0x290>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <vertScroll+0x1c6>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8002618:	1cbb      	adds	r3, r7, #2
 800261a:	2200      	movs	r2, #0
 800261c:	5e9b      	ldrsh	r3, [r3, r2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <vertScroll+0x1a0>
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <vertScroll+0x284>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	4a40      	ldr	r2, [pc, #256]	; (8002728 <vertScroll+0x294>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <vertScroll+0x19c>
 800262c:	2302      	movs	r3, #2
 800262e:	e002      	b.n	8002636 <vertScroll+0x1a2>
 8002630:	2308      	movs	r3, #8
 8002632:	e000      	b.n	8002636 <vertScroll+0x1a2>
 8002634:	2300      	movs	r3, #0
 8002636:	220c      	movs	r2, #12
 8002638:	18ba      	adds	r2, r7, r2
 800263a:	7013      	strb	r3, [r2, #0]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <vertScroll+0x284>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	4a39      	ldr	r2, [pc, #228]	; (8002728 <vertScroll+0x294>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <vertScroll+0x1b6>
 8002646:	2318      	movs	r3, #24
 8002648:	e000      	b.n	800264c <vertScroll+0x1b8>
 800264a:	2301      	movs	r3, #1
 800264c:	220c      	movs	r2, #12
 800264e:	18ba      	adds	r2, r7, r2
 8002650:	2101      	movs	r1, #1
 8002652:	0018      	movs	r0, r3
 8002654:	f7fe fbe6 	bl	8000e24 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8002658:	e05a      	b.n	8002710 <vertScroll+0x27c>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800265a:	1cbb      	adds	r3, r7, #2
 800265c:	2200      	movs	r2, #0
 800265e:	5e9b      	ldrsh	r3, [r3, r2]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d155      	bne.n	8002710 <vertScroll+0x27c>
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <vertScroll+0x28c>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	001a      	movs	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d04f      	beq.n	8002710 <vertScroll+0x27c>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2013      	movs	r0, #19
 8002676:	f7fe fbd5 	bl	8000e24 <WriteCmdParamN>
		return;
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	e048      	b.n	8002710 <vertScroll+0x27c>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <vertScroll+0x284>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <vertScroll+0x298>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d01e      	beq.n	80026c6 <vertScroll+0x232>
 8002688:	4a28      	ldr	r2, [pc, #160]	; (800272c <vertScroll+0x298>)
 800268a:	4293      	cmp	r3, r2
 800268c:	dc06      	bgt.n	800269c <vertScroll+0x208>
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <vertScroll+0x29c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <vertScroll+0x232>
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <vertScroll+0x2a0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <vertScroll+0x216>
 800269a:	e027      	b.n	80026ec <vertScroll+0x258>
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <vertScroll+0x2a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d011      	beq.n	80026c6 <vertScroll+0x232>
 80026a2:	4a26      	ldr	r2, [pc, #152]	; (800273c <vertScroll+0x2a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <vertScroll+0x232>
 80026a8:	e020      	b.n	80026ec <vertScroll+0x258>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <vertScroll+0x2ac>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	0019      	movs	r1, r3
 80026b0:	2061      	movs	r0, #97	; 0x61
 80026b2:	f7fe f83f 	bl	8000734 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80026b6:	2314      	movs	r3, #20
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	0019      	movs	r1, r3
 80026be:	206a      	movs	r0, #106	; 0x6a
 80026c0:	f7fe f838 	bl	8000734 <WriteCmdData>
        break;
 80026c4:	e025      	b.n	8002712 <vertScroll+0x27e>
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <vertScroll+0x2ac>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2202      	movs	r2, #2
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <vertScroll+0x2b0>)
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f7fe f82d 	bl	8000734 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80026da:	2314      	movs	r3, #20
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <vertScroll+0x2b4>)
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7fe f825 	bl	8000734 <WriteCmdData>
        break;
 80026ea:	e012      	b.n	8002712 <vertScroll+0x27e>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <vertScroll+0x2ac>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	0019      	movs	r1, r3
 80026f8:	2061      	movs	r0, #97	; 0x61
 80026fa:	f7fe f81b 	bl	8000734 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80026fe:	2314      	movs	r3, #20
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	0019      	movs	r1, r3
 8002706:	206a      	movs	r0, #106	; 0x6a
 8002708:	f7fe f814 	bl	8000734 <WriteCmdData>
        break;
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	e000      	b.n	8002712 <vertScroll+0x27e>
		return;
 8002710:	46c0      	nop			; (mov r8, r8)
    }
}
 8002712:	46bd      	mov	sp, r7
 8002714:	b007      	add	sp, #28
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	2000008e 	.word	0x2000008e
 800271c:	00009327 	.word	0x00009327
 8002720:	20000080 	.word	0x20000080
 8002724:	2000002f 	.word	0x2000002f
 8002728:	00008347 	.word	0x00008347
 800272c:	00007793 	.word	0x00007793
 8002730:	00005420 	.word	0x00005420
 8002734:	00007783 	.word	0x00007783
 8002738:	00009326 	.word	0x00009326
 800273c:	0000b509 	.word	0x0000b509
 8002740:	20000084 	.word	0x20000084
 8002744:	00000401 	.word	0x00000401
 8002748:	00000404 	.word	0x00000404

0800274c <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af02      	add	r7, sp, #8
 8002752:	0002      	movs	r2, r0
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <fillScreen+0x30>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b21a      	sxth	r2, r3
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <fillScreen+0x34>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b219      	sxth	r1, r3
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	000b      	movs	r3, r1
 800276c:	2100      	movs	r1, #0
 800276e:	2000      	movs	r0, #0
 8002770:	f000 fd72 	bl	8003258 <fillRect>
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000004 	.word	0x20000004
 8002780:	20000006 	.word	0x20000006

08002784 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	0002      	movs	r2, r0
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <invertDisplay+0x124>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	001a      	movs	r2, r3
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	015b      	lsls	r3, r3, #5
 800279a:	4013      	ands	r3, r2
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	4193      	sbcs	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4053      	eors	r3, r2
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <invertDisplay+0x128>)
 80027b2:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <invertDisplay+0x124>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	001a      	movs	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d037      	beq.n	8002830 <invertDisplay+0xac>
        if (is8347) {
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <invertDisplay+0x12c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d026      	beq.n	8002816 <invertDisplay+0x92>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <invertDisplay+0x130>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <invertDisplay+0x134>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <invertDisplay+0x58>
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <invertDisplay+0x130>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	4a39      	ldr	r2, [pc, #228]	; (80028bc <invertDisplay+0x138>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10a      	bne.n	80027f2 <invertDisplay+0x6e>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80027dc:	4b33      	ldr	r3, [pc, #204]	; (80028ac <invertDisplay+0x128>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <invertDisplay+0x64>
 80027e4:	2206      	movs	r2, #6
 80027e6:	e000      	b.n	80027ea <invertDisplay+0x66>
 80027e8:	2202      	movs	r2, #2
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e009      	b.n	8002806 <invertDisplay+0x82>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <invertDisplay+0x128>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <invertDisplay+0x7a>
 80027fa:	2208      	movs	r2, #8
 80027fc:	e000      	b.n	8002800 <invertDisplay+0x7c>
 80027fe:	220a      	movs	r2, #10
 8002800:	230f      	movs	r3, #15
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	701a      	strb	r2, [r3, #0]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8002806:	230f      	movs	r3, #15
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	001a      	movs	r2, r3
 800280c:	2101      	movs	r1, #1
 800280e:	2001      	movs	r0, #1
 8002810:	f7fe fb08 	bl	8000e24 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8002814:	e044      	b.n	80028a0 <invertDisplay+0x11c>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <invertDisplay+0x128>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <invertDisplay+0x9e>
 800281e:	2321      	movs	r3, #33	; 0x21
 8002820:	e000      	b.n	8002824 <invertDisplay+0xa0>
 8002822:	2320      	movs	r3, #32
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe fafb 	bl	8000e24 <WriteCmdParamN>
 800282e:	e037      	b.n	80028a0 <invertDisplay+0x11c>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <invertDisplay+0x130>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <invertDisplay+0x13c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d020      	beq.n	800287c <invertDisplay+0xf8>
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <invertDisplay+0x13c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	dc07      	bgt.n	8002850 <invertDisplay+0xcc>
 8002840:	22aa      	movs	r2, #170	; 0xaa
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	4293      	cmp	r3, r2
 8002846:	d00c      	beq.n	8002862 <invertDisplay+0xde>
 8002848:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <invertDisplay+0x140>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d016      	beq.n	800287c <invertDisplay+0xf8>
 800284e:	e020      	b.n	8002892 <invertDisplay+0x10e>
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <invertDisplay+0x144>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d012      	beq.n	800287c <invertDisplay+0xf8>
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <invertDisplay+0x148>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00f      	beq.n	800287c <invertDisplay+0xf8>
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <invertDisplay+0x14c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d117      	bne.n	8002892 <invertDisplay+0x10e>
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <invertDisplay+0x128>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	b21b      	sxth	r3, r3
 800286a:	2213      	movs	r2, #19
 800286c:	4313      	orrs	r3, r2
 800286e:	b21b      	sxth	r3, r3
 8002870:	b29b      	uxth	r3, r3
 8002872:	0019      	movs	r1, r3
 8002874:	2007      	movs	r0, #7
 8002876:	f7fd ff5d 	bl	8000734 <WriteCmdData>
        break;
 800287a:	e011      	b.n	80028a0 <invertDisplay+0x11c>
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <invertDisplay+0x128>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	2202      	movs	r2, #2
 8002882:	4313      	orrs	r3, r2
 8002884:	b29b      	uxth	r3, r3
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <invertDisplay+0x150>)
 8002888:	0019      	movs	r1, r3
 800288a:	0010      	movs	r0, r2
 800288c:	f7fd ff52 	bl	8000734 <WriteCmdData>
        break;
 8002890:	e006      	b.n	80028a0 <invertDisplay+0x11c>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <invertDisplay+0x128>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	0019      	movs	r1, r3
 8002898:	2061      	movs	r0, #97	; 0x61
 800289a:	f7fd ff4b 	bl	8000734 <WriteCmdData>
        break;
 800289e:	46c0      	nop			; (mov r8, r8)
    }
}
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000080 	.word	0x20000080
 80028ac:	20000084 	.word	0x20000084
 80028b0:	2000002f 	.word	0x2000002f
 80028b4:	2000008e 	.word	0x2000008e
 80028b8:	00008347 	.word	0x00008347
 80028bc:	00005252 	.word	0x00005252
 80028c0:	00007793 	.word	0x00007793
 80028c4:	00005420 	.word	0x00005420
 80028c8:	00009326 	.word	0x00009326
 80028cc:	0000b509 	.word	0x0000b509
 80028d0:	00009225 	.word	0x00009225
 80028d4:	00000401 	.word	0x00000401

080028d8 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af02      	add	r7, sp, #8
 80028de:	0005      	movs	r5, r0
 80028e0:	000c      	movs	r4, r1
 80028e2:	0010      	movs	r0, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	1c2a      	adds	r2, r5, #0
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	1c22      	adds	r2, r4, #0
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	1cbb      	adds	r3, r7, #2
 80028f4:	1c02      	adds	r2, r0, #0
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	003b      	movs	r3, r7
 80028fa:	1c0a      	adds	r2, r1, #0
 80028fc:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, 1, h, color);
 80028fe:	1cbb      	adds	r3, r7, #2
 8002900:	2200      	movs	r2, #0
 8002902:	5e9a      	ldrsh	r2, [r3, r2]
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	2100      	movs	r1, #0
 8002908:	5e59      	ldrsh	r1, [r3, r1]
 800290a:	1dbb      	adds	r3, r7, #6
 800290c:	2000      	movs	r0, #0
 800290e:	5e18      	ldrsh	r0, [r3, r0]
 8002910:	003b      	movs	r3, r7
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	0013      	movs	r3, r2
 8002918:	2201      	movs	r2, #1
 800291a:	f000 fc9d 	bl	8003258 <fillRect>
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bdb0      	pop	{r4, r5, r7, pc}

08002926 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002926:	b5b0      	push	{r4, r5, r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af02      	add	r7, sp, #8
 800292c:	0005      	movs	r5, r0
 800292e:	000c      	movs	r4, r1
 8002930:	0010      	movs	r0, r2
 8002932:	0019      	movs	r1, r3
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	1c2a      	adds	r2, r5, #0
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	1c22      	adds	r2, r4, #0
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	1cbb      	adds	r3, r7, #2
 8002942:	1c02      	adds	r2, r0, #0
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	003b      	movs	r3, r7
 8002948:	1c0a      	adds	r2, r1, #0
 800294a:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, w, 1, color);
 800294c:	1cbb      	adds	r3, r7, #2
 800294e:	2200      	movs	r2, #0
 8002950:	5e9a      	ldrsh	r2, [r3, r2]
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	2100      	movs	r1, #0
 8002956:	5e59      	ldrsh	r1, [r3, r1]
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	2000      	movs	r0, #0
 800295c:	5e18      	ldrsh	r0, [r3, r0]
 800295e:	003b      	movs	r3, r7
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	f000 fc77 	bl	8003258 <fillRect>
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bdb0      	pop	{r4, r5, r7, pc}

08002972 <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002972:	b590      	push	{r4, r7, lr}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	0004      	movs	r4, r0
 800297a:	0008      	movs	r0, r1
 800297c:	0011      	movs	r1, r2
 800297e:	1dbb      	adds	r3, r7, #6
 8002980:	1c22      	adds	r2, r4, #0
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	1c02      	adds	r2, r0, #0
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	1cbb      	adds	r3, r7, #2
 800298c:	1c0a      	adds	r2, r1, #0
 800298e:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2100      	movs	r1, #0
 8002998:	5e59      	ldrsh	r1, [r3, r1]
 800299a:	1dbb      	adds	r3, r7, #6
 800299c:	2000      	movs	r0, #0
 800299e:	5e1b      	ldrsh	r3, [r3, r0]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff fb3d 	bl	8002020 <drawPixel>
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b003      	add	sp, #12
 80029ac:	bd90      	pop	{r4, r7, pc}

080029ae <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80029ae:	b5b0      	push	{r4, r5, r7, lr}
 80029b0:	b088      	sub	sp, #32
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	0005      	movs	r5, r0
 80029b6:	000c      	movs	r4, r1
 80029b8:	0010      	movs	r0, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	1c2a      	adds	r2, r5, #0
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	1c22      	adds	r2, r4, #0
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	1cbb      	adds	r3, r7, #2
 80029ca:	1c02      	adds	r2, r0, #0
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	003b      	movs	r3, r7
 80029d0:	1c0a      	adds	r2, r1, #0
 80029d2:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80029d4:	003b      	movs	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	5e9a      	ldrsh	r2, [r3, r2]
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2100      	movs	r1, #0
 80029de:	5e5b      	ldrsh	r3, [r3, r1]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	17d9      	asrs	r1, r3, #31
 80029e4:	185a      	adds	r2, r3, r1
 80029e6:	404a      	eors	r2, r1
 80029e8:	1cbb      	adds	r3, r7, #2
 80029ea:	2100      	movs	r1, #0
 80029ec:	5e59      	ldrsh	r1, [r3, r1]
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	2000      	movs	r0, #0
 80029f2:	5e1b      	ldrsh	r3, [r3, r0]
 80029f4:	1acb      	subs	r3, r1, r3
 80029f6:	17d9      	asrs	r1, r3, #31
 80029f8:	185b      	adds	r3, r3, r1
 80029fa:	404b      	eors	r3, r1
 80029fc:	2101      	movs	r1, #1
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dc01      	bgt.n	8002a06 <writeLine+0x58>
 8002a02:	2300      	movs	r3, #0
 8002a04:	1c19      	adds	r1, r3, #0
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	211a      	movs	r1, #26
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	5e9b      	ldrsh	r3, [r3, r2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d019      	beq.n	8002a4c <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8002a18:	2118      	movs	r1, #24
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	1dba      	adds	r2, r7, #6
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	1dbb      	adds	r3, r7, #6
 8002a24:	1d3a      	adds	r2, r7, #4
 8002a26:	8812      	ldrh	r2, [r2, #0]
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	187a      	adds	r2, r7, r1
 8002a2e:	8812      	ldrh	r2, [r2, #0]
 8002a30:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002a32:	2116      	movs	r1, #22
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	1cba      	adds	r2, r7, #2
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	801a      	strh	r2, [r3, #0]
 8002a3c:	1cbb      	adds	r3, r7, #2
 8002a3e:	003a      	movs	r2, r7
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	003b      	movs	r3, r7
 8002a46:	187a      	adds	r2, r7, r1
 8002a48:	8812      	ldrh	r2, [r2, #0]
 8002a4a:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8002a4c:	1dba      	adds	r2, r7, #6
 8002a4e:	1cbb      	adds	r3, r7, #2
 8002a50:	2100      	movs	r1, #0
 8002a52:	5e52      	ldrsh	r2, [r2, r1]
 8002a54:	2100      	movs	r1, #0
 8002a56:	5e5b      	ldrsh	r3, [r3, r1]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dd19      	ble.n	8002a90 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8002a5c:	2114      	movs	r1, #20
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	1dba      	adds	r2, r7, #6
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	1dbb      	adds	r3, r7, #6
 8002a68:	1cba      	adds	r2, r7, #2
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	1cbb      	adds	r3, r7, #2
 8002a70:	187a      	adds	r2, r7, r1
 8002a72:	8812      	ldrh	r2, [r2, #0]
 8002a74:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002a76:	2112      	movs	r1, #18
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	1d3a      	adds	r2, r7, #4
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	003a      	movs	r2, r7
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	003b      	movs	r3, r7
 8002a8a:	187a      	adds	r2, r7, r1
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002a90:	1cbb      	adds	r3, r7, #2
 8002a92:	881a      	ldrh	r2, [r3, #0]
 8002a94:	1dbb      	adds	r3, r7, #6
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002aa2:	003b      	movs	r3, r7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	5e9a      	ldrsh	r2, [r3, r2]
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2000      	movs	r0, #0
 8002aac:	5e1b      	ldrsh	r3, [r3, r0]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	17d8      	asrs	r0, r3, #31
 8002ab2:	181a      	adds	r2, r3, r0
 8002ab4:	4042      	eors	r2, r0
 8002ab6:	230e      	movs	r3, #14
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002abc:	231e      	movs	r3, #30
 8002abe:	18fa      	adds	r2, r7, r3
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5e5b      	ldrsh	r3, [r3, r1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da00      	bge.n	8002acc <writeLine+0x11e>
 8002aca:	3301      	adds	r3, #1
 8002acc:	105b      	asrs	r3, r3, #1
 8002ace:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002ad0:	1d3a      	adds	r2, r7, #4
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5e52      	ldrsh	r2, [r2, r1]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5e5b      	ldrsh	r3, [r3, r1]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	da04      	bge.n	8002aea <writeLine+0x13c>
        ystep = 1;
 8002ae0:	231c      	movs	r3, #28
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e04e      	b.n	8002b88 <writeLine+0x1da>
    } else {
        ystep = -1;
 8002aea:	231c      	movs	r3, #28
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	4252      	negs	r2, r2
 8002af2:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002af4:	e048      	b.n	8002b88 <writeLine+0x1da>
        if (steep) {
 8002af6:	231a      	movs	r3, #26
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	5e9b      	ldrsh	r3, [r3, r2]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002b02:	2330      	movs	r3, #48	; 0x30
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5e59      	ldrsh	r1, [r3, r1]
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2000      	movs	r0, #0
 8002b12:	5e1b      	ldrsh	r3, [r3, r0]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff ff2c 	bl	8002972 <writePixel>
 8002b1a:	e00b      	b.n	8002b34 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8002b1c:	2330      	movs	r3, #48	; 0x30
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2100      	movs	r1, #0
 8002b26:	5e59      	ldrsh	r1, [r3, r1]
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	5e1b      	ldrsh	r3, [r3, r0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff ff1f 	bl	8002972 <writePixel>
        }
        err -= dy;
 8002b34:	211e      	movs	r1, #30
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	230e      	movs	r3, #14
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da12      	bge.n	8002b78 <writeLine+0x1ca>
            y0 += ystep;
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	231c      	movs	r3, #28
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002b64:	211e      	movs	r1, #30
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	1dba      	adds	r2, r7, #6
 8002b8a:	1cbb      	adds	r3, r7, #2
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5e52      	ldrsh	r2, [r2, r1]
 8002b90:	2100      	movs	r1, #0
 8002b92:	5e5b      	ldrsh	r3, [r3, r1]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	ddae      	ble.n	8002af6 <writeLine+0x148>
        }
    }
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b008      	add	sp, #32
 8002b9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ba0 <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	0005      	movs	r5, r0
 8002ba8:	000c      	movs	r4, r1
 8002baa:	0010      	movs	r0, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	1dbb      	adds	r3, r7, #6
 8002bb0:	1c2a      	adds	r2, r5, #0
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	1c22      	adds	r2, r4, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	1cbb      	adds	r3, r7, #2
 8002bbc:	1c02      	adds	r2, r0, #0
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	003b      	movs	r3, r7
 8002bc2:	1c0a      	adds	r2, r1, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8002bc6:	1dba      	adds	r2, r7, #6
 8002bc8:	1cbb      	adds	r3, r7, #2
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5e52      	ldrsh	r2, [r2, r1]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5e5b      	ldrsh	r3, [r3, r1]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d12a      	bne.n	8002c2c <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8002bd6:	1d3a      	adds	r2, r7, #4
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5e52      	ldrsh	r2, [r2, r1]
 8002bde:	2100      	movs	r1, #0
 8002be0:	5e5b      	ldrsh	r3, [r3, r1]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dd0c      	ble.n	8002c00 <drawLine+0x60>
 8002be6:	210c      	movs	r1, #12
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	003a      	movs	r2, r7
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	003b      	movs	r3, r7
 8002bfa:	187a      	adds	r2, r7, r1
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8002c00:	003b      	movs	r3, r7
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	2320      	movs	r3, #32
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	881c      	ldrh	r4, [r3, #0]
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5e59      	ldrsh	r1, [r3, r1]
 8002c1e:	1dbb      	adds	r3, r7, #6
 8002c20:	2000      	movs	r0, #0
 8002c22:	5e18      	ldrsh	r0, [r3, r0]
 8002c24:	0023      	movs	r3, r4
 8002c26:	f7ff fe57 	bl	80028d8 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002c2a:	e045      	b.n	8002cb8 <drawLine+0x118>
    } else if(y0 == y1){
 8002c2c:	1d3a      	adds	r2, r7, #4
 8002c2e:	003b      	movs	r3, r7
 8002c30:	2100      	movs	r1, #0
 8002c32:	5e52      	ldrsh	r2, [r2, r1]
 8002c34:	2100      	movs	r1, #0
 8002c36:	5e5b      	ldrsh	r3, [r3, r1]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d12a      	bne.n	8002c92 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8002c3c:	1dba      	adds	r2, r7, #6
 8002c3e:	1cbb      	adds	r3, r7, #2
 8002c40:	2100      	movs	r1, #0
 8002c42:	5e52      	ldrsh	r2, [r2, r1]
 8002c44:	2100      	movs	r1, #0
 8002c46:	5e5b      	ldrsh	r3, [r3, r1]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dd0c      	ble.n	8002c66 <drawLine+0xc6>
 8002c4c:	210e      	movs	r1, #14
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	1dba      	adds	r2, r7, #6
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	1dbb      	adds	r3, r7, #6
 8002c58:	1cba      	adds	r2, r7, #2
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	801a      	strh	r2, [r3, #0]
 8002c5e:	1cbb      	adds	r3, r7, #2
 8002c60:	187a      	adds	r2, r7, r1
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	1dbb      	adds	r3, r7, #6
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b21a      	sxth	r2, r3
 8002c78:	2320      	movs	r3, #32
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	881c      	ldrh	r4, [r3, #0]
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	2100      	movs	r1, #0
 8002c82:	5e59      	ldrsh	r1, [r3, r1]
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	2000      	movs	r0, #0
 8002c88:	5e18      	ldrsh	r0, [r3, r0]
 8002c8a:	0023      	movs	r3, r4
 8002c8c:	f7ff fe4b 	bl	8002926 <drawFastHLine>
}
 8002c90:	e012      	b.n	8002cb8 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8002c92:	003b      	movs	r3, r7
 8002c94:	2400      	movs	r4, #0
 8002c96:	5f1c      	ldrsh	r4, [r3, r4]
 8002c98:	1cbb      	adds	r3, r7, #2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	5e9a      	ldrsh	r2, [r3, r2]
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5e59      	ldrsh	r1, [r3, r1]
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	5e18      	ldrsh	r0, [r3, r0]
 8002caa:	2320      	movs	r3, #32
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	0023      	movs	r3, r4
 8002cb4:	f7ff fe7b 	bl	80029ae <writeLine>
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}

08002cc0 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	0005      	movs	r5, r0
 8002cc8:	000c      	movs	r4, r1
 8002cca:	0010      	movs	r0, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	1dbb      	adds	r3, r7, #6
 8002cd0:	1c2a      	adds	r2, r5, #0
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	1c22      	adds	r2, r4, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	1cbb      	adds	r3, r7, #2
 8002cdc:	1c02      	adds	r2, r0, #0
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	003b      	movs	r3, r7
 8002ce2:	1c0a      	adds	r2, r1, #0
 8002ce4:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	2316      	movs	r3, #22
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002cf6:	2314      	movs	r3, #20
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002cfe:	1cbb      	adds	r3, r7, #2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	1c1a      	adds	r2, r3, #0
 8002d04:	03d2      	lsls	r2, r2, #15
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 8002d12:	2310      	movs	r3, #16
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2200      	movs	r2, #0
 8002d18:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 8002d1a:	230e      	movs	r3, #14
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	1cba      	adds	r2, r7, #2
 8002d20:	8812      	ldrh	r2, [r2, #0]
 8002d22:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	1cbb      	adds	r3, r7, #2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b219      	sxth	r1, r3
 8002d32:	003b      	movs	r3, r7
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	1dbb      	adds	r3, r7, #6
 8002d38:	2000      	movs	r0, #0
 8002d3a:	5e1b      	ldrsh	r3, [r3, r0]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fe18 	bl	8002972 <writePixel>
    writePixel(x0  , y0-r, color);
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	1cbb      	adds	r3, r7, #2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b219      	sxth	r1, r3
 8002d50:	003b      	movs	r3, r7
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	1dbb      	adds	r3, r7, #6
 8002d56:	2000      	movs	r0, #0
 8002d58:	5e1b      	ldrsh	r3, [r3, r0]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff fe09 	bl	8002972 <writePixel>
    writePixel(x0+r, y0  , color);
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	1cbb      	adds	r3, r7, #2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b218      	sxth	r0, r3
 8002d6e:	003b      	movs	r3, r7
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2100      	movs	r1, #0
 8002d76:	5e5b      	ldrsh	r3, [r3, r1]
 8002d78:	0019      	movs	r1, r3
 8002d7a:	f7ff fdfa 	bl	8002972 <writePixel>
    writePixel(x0-r, y0  , color);
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b218      	sxth	r0, r3
 8002d8c:	003b      	movs	r3, r7
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2100      	movs	r1, #0
 8002d94:	5e5b      	ldrsh	r3, [r3, r1]
 8002d96:	0019      	movs	r1, r3
 8002d98:	f7ff fdeb 	bl	8002972 <writePixel>

    while (x<y) {
 8002d9c:	e0d1      	b.n	8002f42 <drawCircle+0x282>
        if (f >= 0) {
 8002d9e:	2316      	movs	r3, #22
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2200      	movs	r2, #0
 8002da4:	5e9b      	ldrsh	r3, [r3, r2]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db18      	blt.n	8002ddc <drawCircle+0x11c>
            y--;
 8002daa:	210e      	movs	r1, #14
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	5e9b      	ldrsh	r3, [r3, r2]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002dbc:	2112      	movs	r1, #18
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 8002dca:	2016      	movs	r0, #22
 8002dcc:	183b      	adds	r3, r7, r0
 8002dce:	881a      	ldrh	r2, [r3, #0]
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	18d3      	adds	r3, r2, r3
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	183b      	adds	r3, r7, r0
 8002dda:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002ddc:	2110      	movs	r1, #16
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	5e9b      	ldrsh	r3, [r3, r2]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002dee:	2014      	movs	r0, #20
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	3302      	adds	r3, #2
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 8002dfc:	2416      	movs	r4, #22
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	18d3      	adds	r3, r2, r3
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 8002e0e:	1dbb      	adds	r3, r7, #6
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	000c      	movs	r4, r1
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	b218      	sxth	r0, r3
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	250e      	movs	r5, #14
 8002e24:	197b      	adds	r3, r7, r5
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b219      	sxth	r1, r3
 8002e2e:	003b      	movs	r3, r7
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	001a      	movs	r2, r3
 8002e34:	f7ff fd9d 	bl	8002972 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8002e38:	1dbb      	adds	r3, r7, #6
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	b218      	sxth	r0, r3
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	18d3      	adds	r3, r2, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b219      	sxth	r1, r3
 8002e54:	003b      	movs	r3, r7
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	001a      	movs	r2, r3
 8002e5a:	f7ff fd8a 	bl	8002972 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8002e5e:	1dbb      	adds	r3, r7, #6
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b218      	sxth	r0, r3
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	197b      	adds	r3, r7, r5
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	b219      	sxth	r1, r3
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	001a      	movs	r2, r3
 8002e80:	f7ff fd77 	bl	8002972 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b218      	sxth	r0, r3
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	197b      	adds	r3, r7, r5
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b219      	sxth	r1, r3
 8002ea0:	003b      	movs	r3, r7
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	f7ff fd64 	bl	8002972 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8002eaa:	1dbb      	adds	r3, r7, #6
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	197b      	adds	r3, r7, r5
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b218      	sxth	r0, r3
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b219      	sxth	r1, r3
 8002ec6:	003b      	movs	r3, r7
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	001a      	movs	r2, r3
 8002ecc:	f7ff fd51 	bl	8002972 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	197b      	adds	r3, r7, r5
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b218      	sxth	r0, r3
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	18d3      	adds	r3, r2, r3
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b219      	sxth	r1, r3
 8002eec:	003b      	movs	r3, r7
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	f7ff fd3e 	bl	8002972 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b218      	sxth	r0, r3
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b219      	sxth	r1, r3
 8002f12:	003b      	movs	r3, r7
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	001a      	movs	r2, r3
 8002f18:	f7ff fd2b 	bl	8002972 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8002f1c:	1dbb      	adds	r3, r7, #6
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	197b      	adds	r3, r7, r5
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b218      	sxth	r0, r3
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b219      	sxth	r1, r3
 8002f38:	003b      	movs	r3, r7
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	f7ff fd18 	bl	8002972 <writePixel>
    while (x<y) {
 8002f42:	2310      	movs	r3, #16
 8002f44:	18fa      	adds	r2, r7, r3
 8002f46:	230e      	movs	r3, #14
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5e52      	ldrsh	r2, [r2, r1]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5e5b      	ldrsh	r3, [r3, r1]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	da00      	bge.n	8002f58 <drawCircle+0x298>
 8002f56:	e722      	b.n	8002d9e <drawCircle+0xde>
    }
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b006      	add	sp, #24
 8002f5e:	bdb0      	pop	{r4, r5, r7, pc}

08002f60 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	0005      	movs	r5, r0
 8002f68:	000c      	movs	r4, r1
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	1dbb      	adds	r3, r7, #6
 8002f70:	1c2a      	adds	r2, r5, #0
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	1c22      	adds	r2, r4, #0
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	1cbb      	adds	r3, r7, #2
 8002f7c:	1c02      	adds	r2, r0, #0
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	003b      	movs	r3, r7
 8002f82:	1c0a      	adds	r2, r1, #0
 8002f84:	801a      	strh	r2, [r3, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	1cbb      	adds	r3, r7, #2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b219      	sxth	r1, r3
 8002f94:	1cbb      	adds	r3, r7, #2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	18db      	adds	r3, r3, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	003b      	movs	r3, r7
 8002fa4:	881c      	ldrh	r4, [r3, #0]
 8002fa6:	1dbb      	adds	r3, r7, #6
 8002fa8:	2000      	movs	r0, #0
 8002faa:	5e18      	ldrsh	r0, [r3, r0]
 8002fac:	0023      	movs	r3, r4
 8002fae:	f7ff fc93 	bl	80028d8 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8002fb2:	1cbb      	adds	r3, r7, #2
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	5e9a      	ldrsh	r2, [r3, r2]
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5e59      	ldrsh	r1, [r3, r1]
 8002fbe:	1dbb      	adds	r3, r7, #6
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	5e18      	ldrsh	r0, [r3, r0]
 8002fc4:	003b      	movs	r3, r7
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f000 f804 	bl	8002fdc <fillCircleHelper>
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bdb0      	pop	{r4, r5, r7, pc}

08002fdc <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	000c      	movs	r4, r1
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	1dbb      	adds	r3, r7, #6
 8002fec:	1c2a      	adds	r2, r5, #0
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	1d3b      	adds	r3, r7, #4
 8002ff2:	1c22      	adds	r2, r4, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	1cbb      	adds	r3, r7, #2
 8002ff8:	1c02      	adds	r2, r0, #0
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	1c7b      	adds	r3, r7, #1
 8002ffe:	1c0a      	adds	r2, r1, #0
 8003000:	701a      	strb	r2, [r3, #0]

    int16_t f     = 1 - r;
 8003002:	1cbb      	adds	r3, r7, #2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	b29a      	uxth	r2, r3
 800300c:	2316      	movs	r3, #22
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8003012:	2314      	movs	r3, #20
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2201      	movs	r2, #1
 8003018:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 800301a:	1cbb      	adds	r3, r7, #2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	1c1a      	adds	r2, r3, #0
 8003020:	03d2      	lsls	r2, r2, #15
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	18db      	adds	r3, r3, r3
 8003026:	b29a      	uxth	r2, r3
 8003028:	2312      	movs	r3, #18
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 800302e:	2110      	movs	r1, #16
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8003036:	200e      	movs	r0, #14
 8003038:	183b      	adds	r3, r7, r0
 800303a:	1cba      	adds	r2, r7, #2
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 8003040:	230c      	movs	r3, #12
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	187a      	adds	r2, r7, r1
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 800304a:	230a      	movs	r3, #10
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	183a      	adds	r2, r7, r0
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 8003054:	2128      	movs	r1, #40	; 0x28
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	5e9b      	ldrsh	r3, [r3, r2]
 800305c:	b29b      	uxth	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	187b      	adds	r3, r7, r1
 8003064:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 8003066:	e0e7      	b.n	8003238 <fillCircleHelper+0x25c>
        if (f >= 0) {
 8003068:	2316      	movs	r3, #22
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	5e9b      	ldrsh	r3, [r3, r2]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db18      	blt.n	80030a6 <fillCircleHelper+0xca>
            y--;
 8003074:	210e      	movs	r1, #14
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	5e9b      	ldrsh	r3, [r3, r2]
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	187b      	adds	r3, r7, r1
 8003084:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8003086:	2112      	movs	r1, #18
 8003088:	187b      	adds	r3, r7, r1
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	3302      	adds	r3, #2
 800308e:	b29a      	uxth	r2, r3
 8003090:	187b      	adds	r3, r7, r1
 8003092:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8003094:	2016      	movs	r0, #22
 8003096:	183b      	adds	r3, r7, r0
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	187b      	adds	r3, r7, r1
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	801a      	strh	r2, [r3, #0]
        }
        x++;
 80030a6:	2110      	movs	r1, #16
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	5e9b      	ldrsh	r3, [r3, r2]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 80030b8:	2014      	movs	r0, #20
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	3302      	adds	r3, #2
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	183b      	adds	r3, r7, r0
 80030c4:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 80030c6:	2416      	movs	r4, #22
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	881a      	ldrh	r2, [r3, #0]
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	18d3      	adds	r3, r2, r3
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2200      	movs	r2, #0
 80030dc:	5e9a      	ldrsh	r2, [r3, r2]
 80030de:	230e      	movs	r3, #14
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	5e5b      	ldrsh	r3, [r3, r1]
 80030e6:	3301      	adds	r3, #1
 80030e8:	429a      	cmp	r2, r3
 80030ea:	da47      	bge.n	800317c <fillCircleHelper+0x1a0>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80030ec:	1c7b      	adds	r3, r7, #1
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d01e      	beq.n	8003134 <fillCircleHelper+0x158>
 80030f6:	1dbb      	adds	r3, r7, #6
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	2310      	movs	r3, #16
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	b218      	sxth	r0, r3
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	881a      	ldrh	r2, [r3, #0]
 800310a:	240e      	movs	r4, #14
 800310c:	193b      	adds	r3, r7, r4
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	b219      	sxth	r1, r3
 8003116:	193b      	adds	r3, r7, r4
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	18db      	adds	r3, r3, r3
 800311c:	b29a      	uxth	r2, r3
 800311e:	2328      	movs	r3, #40	; 0x28
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	b21a      	sxth	r2, r3
 800312a:	232c      	movs	r3, #44	; 0x2c
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f7ff fbd2 	bl	80028d8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8003134:	1c7b      	adds	r3, r7, #1
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d01e      	beq.n	800317c <fillCircleHelper+0x1a0>
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	2310      	movs	r3, #16
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	b29b      	uxth	r3, r3
 800314c:	b218      	sxth	r0, r3
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	240e      	movs	r4, #14
 8003154:	193b      	adds	r3, r7, r4
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	b29b      	uxth	r3, r3
 800315c:	b219      	sxth	r1, r3
 800315e:	193b      	adds	r3, r7, r4
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	18db      	adds	r3, r3, r3
 8003164:	b29a      	uxth	r2, r3
 8003166:	2328      	movs	r3, #40	; 0x28
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	b29b      	uxth	r3, r3
 8003170:	b21a      	sxth	r2, r3
 8003172:	232c      	movs	r3, #44	; 0x2c
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	f7ff fbae 	bl	80028d8 <drawFastVLine>
        }
        if(y != py) {
 800317c:	230e      	movs	r3, #14
 800317e:	18fa      	adds	r2, r7, r3
 8003180:	230a      	movs	r3, #10
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2100      	movs	r1, #0
 8003186:	5e52      	ldrsh	r2, [r2, r1]
 8003188:	2100      	movs	r1, #0
 800318a:	5e5b      	ldrsh	r3, [r3, r1]
 800318c:	429a      	cmp	r2, r3
 800318e:	d04d      	beq.n	800322c <fillCircleHelper+0x250>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003190:	1c7b      	adds	r3, r7, #1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d01e      	beq.n	80031d8 <fillCircleHelper+0x1fc>
 800319a:	1dbb      	adds	r3, r7, #6
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	230a      	movs	r3, #10
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	b218      	sxth	r0, r3
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	240c      	movs	r4, #12
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	b219      	sxth	r1, r3
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	2328      	movs	r3, #40	; 0x28
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	232c      	movs	r3, #44	; 0x2c
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	f7ff fb80 	bl	80028d8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80031d8:	1c7b      	adds	r3, r7, #1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d01e      	beq.n	8003220 <fillCircleHelper+0x244>
 80031e2:	1dbb      	adds	r3, r7, #6
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	230a      	movs	r3, #10
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b218      	sxth	r0, r3
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	240c      	movs	r4, #12
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b219      	sxth	r1, r3
 8003202:	193b      	adds	r3, r7, r4
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	18db      	adds	r3, r3, r3
 8003208:	b29a      	uxth	r2, r3
 800320a:	2328      	movs	r3, #40	; 0x28
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	b29b      	uxth	r3, r3
 8003214:	b21a      	sxth	r2, r3
 8003216:	232c      	movs	r3, #44	; 0x2c
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	f7ff fb5c 	bl	80028d8 <drawFastVLine>
            py = y;
 8003220:	230a      	movs	r3, #10
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	220e      	movs	r2, #14
 8003226:	18ba      	adds	r2, r7, r2
 8003228:	8812      	ldrh	r2, [r2, #0]
 800322a:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 800322c:	230c      	movs	r3, #12
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2210      	movs	r2, #16
 8003232:	18ba      	adds	r2, r7, r2
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 8003238:	2310      	movs	r3, #16
 800323a:	18fa      	adds	r2, r7, r3
 800323c:	230e      	movs	r3, #14
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2100      	movs	r1, #0
 8003242:	5e52      	ldrsh	r2, [r2, r1]
 8003244:	2100      	movs	r1, #0
 8003246:	5e5b      	ldrsh	r3, [r3, r1]
 8003248:	429a      	cmp	r2, r3
 800324a:	da00      	bge.n	800324e <fillCircleHelper+0x272>
 800324c:	e70c      	b.n	8003068 <fillCircleHelper+0x8c>
    }
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003258 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	0005      	movs	r5, r0
 8003260:	000c      	movs	r4, r1
 8003262:	0010      	movs	r0, r2
 8003264:	0019      	movs	r1, r3
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	1c2a      	adds	r2, r5, #0
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	1c22      	adds	r2, r4, #0
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	1cbb      	adds	r3, r7, #2
 8003274:	1c02      	adds	r2, r0, #0
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	003b      	movs	r3, r7
 800327a:	1c0a      	adds	r2, r1, #0
 800327c:	801a      	strh	r2, [r3, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
#endif
    if (w < 0) {
 800327e:	1cbb      	adds	r3, r7, #2
 8003280:	2200      	movs	r2, #0
 8003282:	5e9b      	ldrsh	r3, [r3, r2]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da0d      	bge.n	80032a4 <fillRect+0x4c>
        w = -w;
 8003288:	1cbb      	adds	r3, r7, #2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	425b      	negs	r3, r3
 800328e:	b29a      	uxth	r2, r3
 8003290:	1cbb      	adds	r3, r7, #2
 8003292:	801a      	strh	r2, [r3, #0]
        x -= w;
 8003294:	1dbb      	adds	r3, r7, #6
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	1cbb      	adds	r3, r7, #2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	b29a      	uxth	r2, r3
 80032a0:	1dbb      	adds	r3, r7, #6
 80032a2:	801a      	strh	r2, [r3, #0]
    }                           //+ve w
    end = x + w;
 80032a4:	1dbb      	adds	r3, r7, #6
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	1cbb      	adds	r3, r7, #2
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	18d3      	adds	r3, r2, r3
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	230e      	movs	r3, #14
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	801a      	strh	r2, [r3, #0]
    if (x < 0)
 80032b6:	1dbb      	adds	r3, r7, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	5e9b      	ldrsh	r3, [r3, r2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da02      	bge.n	80032c6 <fillRect+0x6e>
        x = 0;
 80032c0:	1dbb      	adds	r3, r7, #6
 80032c2:	2200      	movs	r2, #0
 80032c4:	801a      	strh	r2, [r3, #0]
    if (end > width())
 80032c6:	230e      	movs	r3, #14
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2400      	movs	r4, #0
 80032cc:	5f1c      	ldrsh	r4, [r3, r4]
 80032ce:	f7fd f9ed 	bl	80006ac <width>
 80032d2:	0003      	movs	r3, r0
 80032d4:	429c      	cmp	r4, r3
 80032d6:	dd06      	ble.n	80032e6 <fillRect+0x8e>
        end = width();
 80032d8:	f7fd f9e8 	bl	80006ac <width>
 80032dc:	0003      	movs	r3, r0
 80032de:	001a      	movs	r2, r3
 80032e0:	230e      	movs	r3, #14
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	801a      	strh	r2, [r3, #0]
    w = end - x;
 80032e6:	230e      	movs	r3, #14
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	1dbb      	adds	r3, r7, #6
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	1cbb      	adds	r3, r7, #2
 80032f6:	801a      	strh	r2, [r3, #0]
    if (h < 0) {
 80032f8:	003b      	movs	r3, r7
 80032fa:	2200      	movs	r2, #0
 80032fc:	5e9b      	ldrsh	r3, [r3, r2]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0d      	bge.n	800331e <fillRect+0xc6>
        h = -h;
 8003302:	003b      	movs	r3, r7
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	425b      	negs	r3, r3
 8003308:	b29a      	uxth	r2, r3
 800330a:	003b      	movs	r3, r7
 800330c:	801a      	strh	r2, [r3, #0]
        y -= h;
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	003b      	movs	r3, r7
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b29a      	uxth	r2, r3
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	801a      	strh	r2, [r3, #0]
    }                           //+ve h
    end = y + h;
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	881a      	ldrh	r2, [r3, #0]
 8003322:	003b      	movs	r3, r7
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	18d3      	adds	r3, r2, r3
 8003328:	b29a      	uxth	r2, r3
 800332a:	230e      	movs	r3, #14
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	801a      	strh	r2, [r3, #0]
    if (y < 0)
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	5e9b      	ldrsh	r3, [r3, r2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	da02      	bge.n	8003340 <fillRect+0xe8>
        y = 0;
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2200      	movs	r2, #0
 800333e:	801a      	strh	r2, [r3, #0]
    if (end > height())
 8003340:	230e      	movs	r3, #14
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2400      	movs	r4, #0
 8003346:	5f1c      	ldrsh	r4, [r3, r4]
 8003348:	f7fd f9ba 	bl	80006c0 <height>
 800334c:	0003      	movs	r3, r0
 800334e:	429c      	cmp	r4, r3
 8003350:	dd06      	ble.n	8003360 <fillRect+0x108>
        end = height();
 8003352:	f7fd f9b5 	bl	80006c0 <height>
 8003356:	0003      	movs	r3, r0
 8003358:	001a      	movs	r2, r3
 800335a:	230e      	movs	r3, #14
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	801a      	strh	r2, [r3, #0]
    h = end - y;
 8003360:	230e      	movs	r3, #14
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	b29a      	uxth	r2, r3
 800336e:	003b      	movs	r3, r7
 8003370:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	1cbb      	adds	r3, r7, #2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	18d3      	adds	r3, r2, r3
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	b21c      	sxth	r4, r3
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	003b      	movs	r3, r7
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29b      	uxth	r3, r3
 8003394:	b21a      	sxth	r2, r3
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	2100      	movs	r1, #0
 800339a:	5e59      	ldrsh	r1, [r3, r1]
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	2000      	movs	r0, #0
 80033a0:	5e18      	ldrsh	r0, [r3, r0]
 80033a2:	0013      	movs	r3, r2
 80033a4:	0022      	movs	r2, r4
 80033a6:	f7fe ff73 	bl	8002290 <setAddrWindow>
    CS_ACTIVE;
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <fillRect+0x344>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	2101      	movs	r1, #1
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 febf 	bl	8004134 <HAL_GPIO_WritePin>
    WriteCmd(_MW);
 80033b6:	2390      	movs	r3, #144	; 0x90
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	2200      	movs	r2, #0
 80033bc:	2110      	movs	r1, #16
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 feb8 	bl	8004134 <HAL_GPIO_WritePin>
 80033c4:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <fillRect+0x348>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	210d      	movs	r1, #13
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <fillRect+0x348>)
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	240c      	movs	r4, #12
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	2390      	movs	r3, #144	; 0x90
 80033de:	05db      	lsls	r3, r3, #23
 80033e0:	22e0      	movs	r2, #224	; 0xe0
 80033e2:	04d2      	lsls	r2, r2, #19
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	4b6d      	ldr	r3, [pc, #436]	; (800359c <fillRect+0x344>)
 80033e8:	2287      	movs	r2, #135	; 0x87
 80033ea:	04d2      	lsls	r2, r2, #19
 80033ec:	619a      	str	r2, [r3, #24]
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <fillRect+0x34c>)
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	0412      	lsls	r2, r2, #16
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	0008      	movs	r0, r1
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	025a      	lsls	r2, r3, #9
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	401a      	ands	r2, r3
 8003404:	183b      	adds	r3, r7, r0
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	0219      	lsls	r1, r3, #8
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	400b      	ands	r3, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	183b      	adds	r3, r7, r0
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	0059      	lsls	r1, r3, #1
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	400b      	ands	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	2390      	movs	r3, #144	; 0x90
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	183b      	adds	r3, r7, r0
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	401a      	ands	r2, r3
 800342e:	183b      	adds	r3, r7, r0
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2120      	movs	r1, #32
 8003436:	400b      	ands	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	183b      	adds	r3, r7, r0
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	105b      	asrs	r3, r3, #1
 8003440:	2110      	movs	r1, #16
 8003442:	400b      	ands	r3, r1
 8003444:	431a      	orrs	r2, r3
 8003446:	183b      	adds	r3, r7, r0
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	0119      	lsls	r1, r3, #4
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	400b      	ands	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	4b51      	ldr	r3, [pc, #324]	; (800359c <fillRect+0x344>)
 8003456:	619a      	str	r2, [r3, #24]
 8003458:	183b      	adds	r3, r7, r0
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	0019      	movs	r1, r3
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <fillRect+0x34c>)
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	400a      	ands	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
 8003468:	2390      	movs	r3, #144	; 0x90
 800346a:	05db      	lsls	r3, r3, #23
 800346c:	2200      	movs	r2, #0
 800346e:	2102      	movs	r1, #2
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fe5f 	bl	8004134 <HAL_GPIO_WritePin>
 8003476:	2390      	movs	r3, #144	; 0x90
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	2201      	movs	r2, #1
 800347c:	2102      	movs	r1, #2
 800347e:	0018      	movs	r0, r3
 8003480:	f000 fe58 	bl	8004134 <HAL_GPIO_WritePin>
 8003484:	2390      	movs	r3, #144	; 0x90
 8003486:	05db      	lsls	r3, r3, #23
 8003488:	2201      	movs	r2, #1
 800348a:	2102      	movs	r1, #2
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fe51 	bl	8004134 <HAL_GPIO_WritePin>
 8003492:	2390      	movs	r3, #144	; 0x90
 8003494:	05db      	lsls	r3, r3, #23
 8003496:	22e0      	movs	r2, #224	; 0xe0
 8003498:	04d2      	lsls	r2, r2, #19
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	4b3f      	ldr	r3, [pc, #252]	; (800359c <fillRect+0x344>)
 800349e:	2287      	movs	r2, #135	; 0x87
 80034a0:	04d2      	lsls	r2, r2, #19
 80034a2:	619a      	str	r2, [r3, #24]
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <fillRect+0x34c>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	0412      	lsls	r2, r2, #16
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	025a      	lsls	r2, r3, #9
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	401a      	ands	r2, r3
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	0219      	lsls	r1, r3, #8
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	400b      	ands	r3, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	0059      	lsls	r1, r3, #1
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	400b      	ands	r3, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	2390      	movs	r3, #144	; 0x90
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	0020      	movs	r0, r4
 80034dc:	183b      	adds	r3, r7, r0
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2208      	movs	r2, #8
 80034e2:	401a      	ands	r2, r3
 80034e4:	183b      	adds	r3, r7, r0
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2120      	movs	r1, #32
 80034ec:	400b      	ands	r3, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	183b      	adds	r3, r7, r0
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	105b      	asrs	r3, r3, #1
 80034f6:	2110      	movs	r1, #16
 80034f8:	400b      	ands	r3, r1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	183b      	adds	r3, r7, r0
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	0119      	lsls	r1, r3, #4
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	400b      	ands	r3, r1
 8003508:	431a      	orrs	r2, r3
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <fillRect+0x344>)
 800350c:	619a      	str	r2, [r3, #24]
 800350e:	183b      	adds	r3, r7, r0
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	019b      	lsls	r3, r3, #6
 8003514:	0019      	movs	r1, r3
 8003516:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <fillRect+0x34c>)
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	400a      	ands	r2, r1
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	2390      	movs	r3, #144	; 0x90
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	2200      	movs	r2, #0
 8003524:	2102      	movs	r1, #2
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fe04 	bl	8004134 <HAL_GPIO_WritePin>
 800352c:	2390      	movs	r3, #144	; 0x90
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	2201      	movs	r2, #1
 8003532:	2102      	movs	r1, #2
 8003534:	0018      	movs	r0, r3
 8003536:	f000 fdfd 	bl	8004134 <HAL_GPIO_WritePin>
 800353a:	2390      	movs	r3, #144	; 0x90
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	2201      	movs	r2, #1
 8003540:	2102      	movs	r1, #2
 8003542:	0018      	movs	r0, r3
 8003544:	f000 fdf6 	bl	8004134 <HAL_GPIO_WritePin>
 8003548:	2390      	movs	r3, #144	; 0x90
 800354a:	05db      	lsls	r3, r3, #23
 800354c:	2201      	movs	r2, #1
 800354e:	2110      	movs	r1, #16
 8003550:	0018      	movs	r0, r3
 8003552:	f000 fdef 	bl	8004134 <HAL_GPIO_WritePin>
    if (h > w) {
 8003556:	003a      	movs	r2, r7
 8003558:	1cbb      	adds	r3, r7, #2
 800355a:	2100      	movs	r1, #0
 800355c:	5e52      	ldrsh	r2, [r2, r1]
 800355e:	2100      	movs	r1, #0
 8003560:	5e5b      	ldrsh	r3, [r3, r1]
 8003562:	429a      	cmp	r2, r3
 8003564:	dd0c      	ble.n	8003580 <fillRect+0x328>
        end = h;
 8003566:	210e      	movs	r1, #14
 8003568:	187b      	adds	r3, r7, r1
 800356a:	003a      	movs	r2, r7
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	801a      	strh	r2, [r3, #0]
        h = w;
 8003570:	003b      	movs	r3, r7
 8003572:	1cba      	adds	r2, r7, #2
 8003574:	8812      	ldrh	r2, [r2, #0]
 8003576:	801a      	strh	r2, [r3, #0]
        w = end;
 8003578:	1cbb      	adds	r3, r7, #2
 800357a:	187a      	adds	r2, r7, r1
 800357c:	8812      	ldrh	r2, [r2, #0]
 800357e:	801a      	strh	r2, [r3, #0]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003580:	2120      	movs	r1, #32
 8003582:	187b      	adds	r3, r7, r1
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29a      	uxth	r2, r3
 800358a:	230b      	movs	r3, #11
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	230a      	movs	r3, #10
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	187a      	adds	r2, r7, r1
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	701a      	strb	r2, [r3, #0]
    while (h-- > 0) {
 800359a:	e0cd      	b.n	8003738 <fillRect+0x4e0>
 800359c:	48000400 	.word	0x48000400
 80035a0:	2000007e 	.word	0x2000007e
 80035a4:	48000800 	.word	0x48000800
        end = w;
 80035a8:	230e      	movs	r3, #14
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	1cba      	adds	r2, r7, #2
 80035ae:	8812      	ldrh	r2, [r2, #0]
 80035b0:	801a      	strh	r2, [r3, #0]

        do {
            write8(hi);
 80035b2:	2390      	movs	r3, #144	; 0x90
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	22e0      	movs	r2, #224	; 0xe0
 80035b8:	04d2      	lsls	r2, r2, #19
 80035ba:	619a      	str	r2, [r3, #24]
 80035bc:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <fillRect+0x550>)
 80035be:	2287      	movs	r2, #135	; 0x87
 80035c0:	04d2      	lsls	r2, r2, #19
 80035c2:	619a      	str	r2, [r3, #24]
 80035c4:	4b79      	ldr	r3, [pc, #484]	; (80037ac <fillRect+0x554>)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0412      	lsls	r2, r2, #16
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	200b      	movs	r0, #11
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	025a      	lsls	r2, r3, #9
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	401a      	ands	r2, r3
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	0219      	lsls	r1, r3, #8
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	400b      	ands	r3, r1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	183b      	adds	r3, r7, r0
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	0059      	lsls	r1, r3, #1
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	400b      	ands	r3, r1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	2390      	movs	r3, #144	; 0x90
 80035f8:	05db      	lsls	r3, r3, #23
 80035fa:	619a      	str	r2, [r3, #24]
 80035fc:	183b      	adds	r3, r7, r0
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	401a      	ands	r2, r3
 8003604:	183b      	adds	r3, r7, r0
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2120      	movs	r1, #32
 800360c:	400b      	ands	r3, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	183b      	adds	r3, r7, r0
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	105b      	asrs	r3, r3, #1
 8003616:	2110      	movs	r1, #16
 8003618:	400b      	ands	r3, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	183b      	adds	r3, r7, r0
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	0119      	lsls	r1, r3, #4
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	400b      	ands	r3, r1
 8003628:	431a      	orrs	r2, r3
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <fillRect+0x550>)
 800362c:	619a      	str	r2, [r3, #24]
 800362e:	183b      	adds	r3, r7, r0
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	0019      	movs	r1, r3
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <fillRect+0x554>)
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	400a      	ands	r2, r1
 800363c:	619a      	str	r2, [r3, #24]
 800363e:	2390      	movs	r3, #144	; 0x90
 8003640:	05db      	lsls	r3, r3, #23
 8003642:	2200      	movs	r2, #0
 8003644:	2102      	movs	r1, #2
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fd74 	bl	8004134 <HAL_GPIO_WritePin>
 800364c:	2390      	movs	r3, #144	; 0x90
 800364e:	05db      	lsls	r3, r3, #23
 8003650:	2201      	movs	r2, #1
 8003652:	2102      	movs	r1, #2
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fd6d 	bl	8004134 <HAL_GPIO_WritePin>
 800365a:	2390      	movs	r3, #144	; 0x90
 800365c:	05db      	lsls	r3, r3, #23
 800365e:	2201      	movs	r2, #1
 8003660:	2102      	movs	r1, #2
 8003662:	0018      	movs	r0, r3
 8003664:	f000 fd66 	bl	8004134 <HAL_GPIO_WritePin>
            write8(lo);
 8003668:	2390      	movs	r3, #144	; 0x90
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	22e0      	movs	r2, #224	; 0xe0
 800366e:	04d2      	lsls	r2, r2, #19
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <fillRect+0x550>)
 8003674:	2287      	movs	r2, #135	; 0x87
 8003676:	04d2      	lsls	r2, r2, #19
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <fillRect+0x554>)
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	0412      	lsls	r2, r2, #16
 8003680:	619a      	str	r2, [r3, #24]
 8003682:	200a      	movs	r0, #10
 8003684:	183b      	adds	r3, r7, r0
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	025a      	lsls	r2, r3, #9
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	401a      	ands	r2, r3
 8003690:	183b      	adds	r3, r7, r0
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	0219      	lsls	r1, r3, #8
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	400b      	ands	r3, r1
 800369c:	431a      	orrs	r2, r3
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	0059      	lsls	r1, r3, #1
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	400b      	ands	r3, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	2390      	movs	r3, #144	; 0x90
 80036ae:	05db      	lsls	r3, r3, #23
 80036b0:	619a      	str	r2, [r3, #24]
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2208      	movs	r2, #8
 80036b8:	401a      	ands	r2, r3
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2120      	movs	r1, #32
 80036c2:	400b      	ands	r3, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	105b      	asrs	r3, r3, #1
 80036cc:	2110      	movs	r1, #16
 80036ce:	400b      	ands	r3, r1
 80036d0:	431a      	orrs	r2, r3
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	0119      	lsls	r1, r3, #4
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	400b      	ands	r3, r1
 80036de:	431a      	orrs	r2, r3
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <fillRect+0x550>)
 80036e2:	619a      	str	r2, [r3, #24]
 80036e4:	183b      	adds	r3, r7, r0
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	0019      	movs	r1, r3
 80036ec:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <fillRect+0x554>)
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	400a      	ands	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
 80036f4:	2390      	movs	r3, #144	; 0x90
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	2200      	movs	r2, #0
 80036fa:	2102      	movs	r1, #2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fd19 	bl	8004134 <HAL_GPIO_WritePin>
 8003702:	2390      	movs	r3, #144	; 0x90
 8003704:	05db      	lsls	r3, r3, #23
 8003706:	2201      	movs	r2, #1
 8003708:	2102      	movs	r1, #2
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fd12 	bl	8004134 <HAL_GPIO_WritePin>
 8003710:	2390      	movs	r3, #144	; 0x90
 8003712:	05db      	lsls	r3, r3, #23
 8003714:	2201      	movs	r2, #1
 8003716:	2102      	movs	r1, #2
 8003718:	0018      	movs	r0, r3
 800371a:	f000 fd0b 	bl	8004134 <HAL_GPIO_WritePin>
        } while (--end != 0);
 800371e:	210e      	movs	r1, #14
 8003720:	187b      	adds	r3, r7, r1
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	187b      	adds	r3, r7, r1
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2200      	movs	r2, #0
 8003730:	5e9b      	ldrsh	r3, [r3, r2]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d000      	beq.n	8003738 <fillRect+0x4e0>
 8003736:	e73c      	b.n	80035b2 <fillRect+0x35a>
    while (h-- > 0) {
 8003738:	003b      	movs	r3, r7
 800373a:	2200      	movs	r2, #0
 800373c:	5e9b      	ldrsh	r3, [r3, r2]
 800373e:	b29a      	uxth	r2, r3
 8003740:	3a01      	subs	r2, #1
 8003742:	b291      	uxth	r1, r2
 8003744:	003a      	movs	r2, r7
 8003746:	8011      	strh	r1, [r2, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	dd00      	ble.n	800374e <fillRect+0x4f6>
 800374c:	e72c      	b.n	80035a8 <fillRect+0x350>
    }
    CS_IDLE;
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <fillRect+0x550>)
 8003750:	2201      	movs	r2, #1
 8003752:	2101      	movs	r1, #1
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fced 	bl	8004134 <HAL_GPIO_WritePin>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <fillRect+0x558>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	001a      	movs	r2, r3
 8003760:	2301      	movs	r3, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d00a      	beq.n	800377c <fillRect+0x524>
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <fillRect+0x55c>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <fillRect+0x560>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d116      	bne.n	800379e <fillRect+0x546>
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <fillRect+0x564>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	001a      	movs	r2, r3
 8003776:	2301      	movs	r3, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d010      	beq.n	800379e <fillRect+0x546>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800377c:	f7fc ff96 	bl	80006ac <width>
 8003780:	0003      	movs	r3, r0
 8003782:	3b01      	subs	r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	b21c      	sxth	r4, r3
 8003788:	f7fc ff9a 	bl	80006c0 <height>
 800378c:	0003      	movs	r3, r0
 800378e:	3b01      	subs	r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	b21b      	sxth	r3, r3
 8003794:	0022      	movs	r2, r4
 8003796:	2100      	movs	r1, #0
 8003798:	2000      	movs	r0, #0
 800379a:	f7fe fd79 	bl	8002290 <setAddrWindow>
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bdb0      	pop	{r4, r5, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	48000400 	.word	0x48000400
 80037ac:	48000800 	.word	0x48000800
 80037b0:	20000080 	.word	0x20000080
 80037b4:	2000008e 	.word	0x2000008e
 80037b8:	00001526 	.word	0x00001526
 80037bc:	20000031 	.word	0x20000031

080037c0 <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fe ffc1 	bl	800274c <fillScreen>
    fillScreen(RED);
 80037ca:	23f8      	movs	r3, #248	; 0xf8
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7fe ffbc 	bl	800274c <fillScreen>
    fillScreen(GREEN);
 80037d4:	23fc      	movs	r3, #252	; 0xfc
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fe ffb7 	bl	800274c <fillScreen>
    fillScreen(BLUE);
 80037de:	201f      	movs	r0, #31
 80037e0:	f7fe ffb4 	bl	800274c <fillScreen>
    fillScreen(BLACK);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fe ffb1 	bl	800274c <fillScreen>
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <testLines>:

void testLines(uint16_t color)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b08b      	sub	sp, #44	; 0x2c
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	0002      	movs	r2, r0
 80037f8:	1dbb      	adds	r3, r7, #6
 80037fa:	801a      	strh	r2, [r3, #0]
    int           x1, y1, x2, y2,
                  w = width(),
 80037fc:	f7fc ff56 	bl	80006ac <width>
 8003800:	0003      	movs	r3, r0
 8003802:	617b      	str	r3, [r7, #20]
                  h = height();
 8003804:	f7fc ff5c 	bl	80006c0 <height>
 8003808:	0003      	movs	r3, r0
 800380a:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800380c:	2000      	movs	r0, #0
 800380e:	f7fe ff9d 	bl	800274c <fillScreen>

    x1 = y1 = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3b01      	subs	r3, #1
 800381e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e010      	b.n	8003848 <testLines+0x58>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	b218      	sxth	r0, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b219      	sxth	r1, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	b21a      	sxth	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	b21c      	sxth	r4, r3
 8003836:	1dbb      	adds	r3, r7, #6
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	0023      	movs	r3, r4
 800383e:	f7ff f9af 	bl	8002ba0 <drawLine>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3306      	adds	r3, #6
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbea      	blt.n	8003826 <testLines+0x36>
    x2    = w - 1;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3b01      	subs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e010      	b.n	800387e <testLines+0x8e>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	b218      	sxth	r0, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b219      	sxth	r1, r3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	b21a      	sxth	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	b21c      	sxth	r4, r3
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	0023      	movs	r3, r4
 8003874:	f7ff f994 	bl	8002ba0 <drawLine>
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3306      	adds	r3, #6
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	dbea      	blt.n	800385c <testLines+0x6c>

    fillScreen(BLACK);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe ff60 	bl	800274c <fillScreen>

    x1    = w - 1;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3b01      	subs	r3, #1
 8003890:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3b01      	subs	r3, #1
 800389a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e010      	b.n	80038c4 <testLines+0xd4>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	b218      	sxth	r0, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	b219      	sxth	r1, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	b21c      	sxth	r4, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	0023      	movs	r3, r4
 80038ba:	f7ff f971 	bl	8002ba0 <drawLine>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3306      	adds	r3, #6
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	dbea      	blt.n	80038a2 <testLines+0xb2>
    x2    = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e010      	b.n	80038f8 <testLines+0x108>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	b218      	sxth	r0, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	b219      	sxth	r1, r3
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	b21c      	sxth	r4, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	0023      	movs	r3, r4
 80038ee:	f7ff f957 	bl	8002ba0 <drawLine>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3306      	adds	r3, #6
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dbea      	blt.n	80038d6 <testLines+0xe6>

    fillScreen(BLACK);
 8003900:	2000      	movs	r0, #0
 8003902:	f7fe ff23 	bl	800274c <fillScreen>

    x1    = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	3b01      	subs	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e010      	b.n	800393c <testLines+0x14c>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	b218      	sxth	r0, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	b219      	sxth	r1, r3
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	b21a      	sxth	r2, r3
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	b21c      	sxth	r4, r3
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	0023      	movs	r3, r4
 8003932:	f7ff f935 	bl	8002ba0 <drawLine>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3306      	adds	r3, #6
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbea      	blt.n	800391a <testLines+0x12a>
    x2    = w - 1;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3b01      	subs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e010      	b.n	8003972 <testLines+0x182>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	b218      	sxth	r0, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	b219      	sxth	r1, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	b21a      	sxth	r2, r3
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	b21c      	sxth	r4, r3
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	0023      	movs	r3, r4
 8003968:	f7ff f91a 	bl	8002ba0 <drawLine>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3306      	adds	r3, #6
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	429a      	cmp	r2, r3
 8003978:	dbea      	blt.n	8003950 <testLines+0x160>

    fillScreen(BLACK);
 800397a:	2000      	movs	r0, #0
 800397c:	f7fe fee6 	bl	800274c <fillScreen>

    x1    = w - 1;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3b01      	subs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e010      	b.n	80039b8 <testLines+0x1c8>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	b218      	sxth	r0, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	b219      	sxth	r1, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	b21c      	sxth	r4, r3
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	0023      	movs	r3, r4
 80039ae:	f7ff f8f7 	bl	8002ba0 <drawLine>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3306      	adds	r3, #6
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbea      	blt.n	8003996 <testLines+0x1a6>
    x2    = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e010      	b.n	80039ec <testLines+0x1fc>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	b218      	sxth	r0, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b219      	sxth	r1, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	b21a      	sxth	r2, r3
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	b21c      	sxth	r4, r3
 80039da:	1dbb      	adds	r3, r7, #6
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	0023      	movs	r3, r4
 80039e2:	f7ff f8dd 	bl	8002ba0 <drawLine>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	3306      	adds	r3, #6
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dbea      	blt.n	80039ca <testLines+0x1da>

}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b009      	add	sp, #36	; 0x24
 80039fa:	bd90      	pop	{r4, r7, pc}

080039fc <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0002      	movs	r2, r0
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	1c0a      	adds	r2, r1, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
    int           x, y, w = width(), h = height();
 8003a0e:	f7fc fe4d 	bl	80006ac <width>
 8003a12:	0003      	movs	r3, r0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	f7fc fe53 	bl	80006c0 <height>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fe fe94 	bl	800274c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e00b      	b.n	8003a42 <testFastLines+0x46>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	b219      	sxth	r1, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	b21a      	sxth	r2, r3
 8003a32:	1dbb      	adds	r3, r7, #6
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fe ff75 	bl	8002926 <drawFastHLine>
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3305      	adds	r3, #5
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	dbef      	blt.n	8003a2a <testFastLines+0x2e>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e00b      	b.n	8003a68 <testFastLines+0x6c>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	b218      	sxth	r0, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	b21a      	sxth	r2, r3
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f7fe ff3b 	bl	80028d8 <drawFastVLine>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3305      	adds	r3, #5
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dbef      	blt.n	8003a50 <testFastLines+0x54>
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b006      	add	sp, #24
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	0002      	movs	r2, r0
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	1c0a      	adds	r2, r1, #0
 8003a88:	801a      	strh	r2, [r3, #0]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8003a8a:	f7fc fe0f 	bl	80006ac <width>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	f7fc fe15 	bl	80006c0 <height>
 8003a96:	0003      	movs	r3, r0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fe fe52 	bl	800274c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e01a      	b.n	8003ae6 <testFilledCircles+0x6e>
        for (y = radius; y < h; y += r2) {
 8003ab0:	1dfb      	adds	r3, r7, #7
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e00e      	b.n	8003ad6 <testFilledCircles+0x5e>
            fillCircle(x, y, radius, color);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	b218      	sxth	r0, r3
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	b219      	sxth	r1, r3
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b21a      	sxth	r2, r3
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f7ff fa49 	bl	8002f60 <fillCircle>
        for (y = radius; y < h; y += r2) {
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	dbec      	blt.n	8003ab8 <testFilledCircles+0x40>
    for (x = radius; x < w; x += r2) {
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	dbe0      	blt.n	8003ab0 <testFilledCircles+0x38>
        }
    }

}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b008      	add	sp, #32
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b088      	sub	sp, #32
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	0002      	movs	r2, r0
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	1c0a      	adds	r2, r1, #0
 8003b06:	801a      	strh	r2, [r3, #0]
    int           x, y, r2 = radius * 2,
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8003b10:	f7fc fdcc 	bl	80006ac <width>
 8003b14:	0003      	movs	r3, r0
 8003b16:	001a      	movs	r2, r3
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8003b20:	f7fc fdce 	bl	80006c0 <height>
 8003b24:	0003      	movs	r3, r0
 8003b26:	001a      	movs	r2, r3
 8003b28:	1dfb      	adds	r3, r7, #7
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e019      	b.n	8003b6a <testCircles+0x74>
        for (y = 0; y < h; y += r2) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e00e      	b.n	8003b5a <testCircles+0x64>
            drawCircle(x, y, radius, color);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	b218      	sxth	r0, r3
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	b219      	sxth	r1, r3
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b21a      	sxth	r2, r3
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f7ff f8b7 	bl	8002cc0 <drawCircle>
        for (y = 0; y < h; y += r2) {
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	18d3      	adds	r3, r2, r3
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dbec      	blt.n	8003b3c <testCircles+0x46>
    for (x = 0; x < w; x += r2) {
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dbe1      	blt.n	8003b36 <testCircles+0x40>
        }
    }

}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b82:	490e      	ldr	r1, [pc, #56]	; (8003bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b84:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <LoopForever+0xe>)
  movs r3, #0
 8003b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b88:	e002      	b.n	8003b90 <LoopCopyDataInit>

08003b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8e:	3304      	adds	r3, #4

08003b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b94:	d3f9      	bcc.n	8003b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b98:	4c0b      	ldr	r4, [pc, #44]	; (8003bc8 <LoopForever+0x16>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b9c:	e001      	b.n	8003ba2 <LoopFillZerobss>

08003b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba0:	3204      	adds	r2, #4

08003ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba4:	d3fb      	bcc.n	8003b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ba6:	f7fc fd2a 	bl	80005fe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003baa:	f001 fa8f 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bae:	f7fc fb37 	bl	8000220 <main>

08003bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb2:	e7fe      	b.n	8003bb2 <LoopForever>
  ldr   r0, =_estack
 8003bb4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003bc0:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8003bc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003bc8:	2000009c 	.word	0x2000009c

08003bcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC1_COMP_IRQHandler>
	...

08003bd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_Init+0x24>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_Init+0x24>)
 8003bda:	2110      	movs	r1, #16
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f000 f809 	bl	8003bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be6:	f7fc fcad 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	40022000 	.word	0x40022000

08003bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <HAL_InitTick+0x5c>)
 8003c02:	681c      	ldr	r4, [r3, #0]
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_InitTick+0x60>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	0019      	movs	r1, r3
 8003c0a:	23fa      	movs	r3, #250	; 0xfa
 8003c0c:	0098      	lsls	r0, r3, #2
 8003c0e:	f7fc fa7b 	bl	8000108 <__udivsi3>
 8003c12:	0003      	movs	r3, r0
 8003c14:	0019      	movs	r1, r3
 8003c16:	0020      	movs	r0, r4
 8003c18:	f7fc fa76 	bl	8000108 <__udivsi3>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f903 	bl	8003e2a <HAL_SYSTICK_Config>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e00f      	b.n	8003c4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d80b      	bhi.n	8003c4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f8e0 	bl	8003e00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_InitTick+0x64>)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b003      	add	sp, #12
 8003c52:	bd90      	pop	{r4, r7, pc}
 8003c54:	20000000 	.word	0x20000000
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	20000008 	.word	0x20000008

08003c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_IncTick+0x1c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	001a      	movs	r2, r3
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_IncTick+0x20>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	18d2      	adds	r2, r2, r3
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_IncTick+0x20>)
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	20000098 	.word	0x20000098

08003c84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  return uwTick;
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <HAL_GetTick+0x10>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000098 	.word	0x20000098

08003c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	d005      	beq.n	8003cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_Delay+0x40>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	f7ff ffe0 	bl	8003c84 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8f7      	bhi.n	8003cc0 <HAL_Delay+0x28>
  {
  }
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf0:	d828      	bhi.n	8003d44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <__NVIC_SetPriority+0xd4>)
 8003cf4:	1dfb      	adds	r3, r7, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b25b      	sxtb	r3, r3
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	33c0      	adds	r3, #192	; 0xc0
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	589b      	ldr	r3, [r3, r2]
 8003d02:	1dfa      	adds	r2, r7, #7
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	0011      	movs	r1, r2
 8003d08:	2203      	movs	r2, #3
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	00d2      	lsls	r2, r2, #3
 8003d0e:	21ff      	movs	r1, #255	; 0xff
 8003d10:	4091      	lsls	r1, r2
 8003d12:	000a      	movs	r2, r1
 8003d14:	43d2      	mvns	r2, r2
 8003d16:	401a      	ands	r2, r3
 8003d18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	019b      	lsls	r3, r3, #6
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	401a      	ands	r2, r3
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	0018      	movs	r0, r3
 8003d28:	2303      	movs	r3, #3
 8003d2a:	4003      	ands	r3, r0
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d30:	481f      	ldr	r0, [pc, #124]	; (8003db0 <__NVIC_SetPriority+0xd4>)
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b25b      	sxtb	r3, r3
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	33c0      	adds	r3, #192	; 0xc0
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d42:	e031      	b.n	8003da8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d44:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <__NVIC_SetPriority+0xd8>)
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	230f      	movs	r3, #15
 8003d4e:	400b      	ands	r3, r1
 8003d50:	3b08      	subs	r3, #8
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	3306      	adds	r3, #6
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	18d3      	adds	r3, r2, r3
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1dfa      	adds	r2, r7, #7
 8003d60:	7812      	ldrb	r2, [r2, #0]
 8003d62:	0011      	movs	r1, r2
 8003d64:	2203      	movs	r2, #3
 8003d66:	400a      	ands	r2, r1
 8003d68:	00d2      	lsls	r2, r2, #3
 8003d6a:	21ff      	movs	r1, #255	; 0xff
 8003d6c:	4091      	lsls	r1, r2
 8003d6e:	000a      	movs	r2, r1
 8003d70:	43d2      	mvns	r2, r2
 8003d72:	401a      	ands	r2, r3
 8003d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	0018      	movs	r0, r3
 8003d84:	2303      	movs	r3, #3
 8003d86:	4003      	ands	r3, r0
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d8c:	4809      	ldr	r0, [pc, #36]	; (8003db4 <__NVIC_SetPriority+0xd8>)
 8003d8e:	1dfb      	adds	r3, r7, #7
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	001c      	movs	r4, r3
 8003d94:	230f      	movs	r3, #15
 8003d96:	4023      	ands	r3, r4
 8003d98:	3b08      	subs	r3, #8
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	3306      	adds	r3, #6
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	18c3      	adds	r3, r0, r3
 8003da4:	3304      	adds	r3, #4
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b003      	add	sp, #12
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	e000e100 	.word	0xe000e100
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <SysTick_Config+0x40>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e010      	b.n	8003df0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <SysTick_Config+0x44>)
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	3a01      	subs	r2, #1
 8003dd4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	425b      	negs	r3, r3
 8003dda:	2103      	movs	r1, #3
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff ff7d 	bl	8003cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <SysTick_Config+0x44>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <SysTick_Config+0x44>)
 8003dea:	2207      	movs	r2, #7
 8003dec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	00ffffff 	.word	0x00ffffff
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	1c02      	adds	r2, r0, #0
 8003e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff ff5d 	bl	8003cdc <__NVIC_SetPriority>
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b004      	add	sp, #16
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff ffbf 	bl	8003db8 <SysTick_Config>
 8003e3a:	0003      	movs	r3, r0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e52:	e155      	b.n	8004100 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4091      	lsls	r1, r2
 8003e5e:	000a      	movs	r2, r1
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d100      	bne.n	8003e6c <HAL_GPIO_Init+0x28>
 8003e6a:	e146      	b.n	80040fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d00b      	beq.n	8003e8c <HAL_GPIO_Init+0x48>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d007      	beq.n	8003e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e80:	2b11      	cmp	r3, #17
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b12      	cmp	r3, #18
 8003e8a:	d130      	bne.n	8003eee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	2203      	movs	r2, #3
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	409a      	lsls	r2, r3
 8003eae:	0013      	movs	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	0013      	movs	r3, r2
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	2201      	movs	r2, #1
 8003eda:	401a      	ands	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	409a      	lsls	r2, r3
 8003efc:	0013      	movs	r3, r2
 8003efe:	43da      	mvns	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	0013      	movs	r3, r2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0xea>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b12      	cmp	r3, #18
 8003f2c:	d123      	bne.n	8003f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	08da      	lsrs	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	58d3      	ldr	r3, [r2, r3]
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2207      	movs	r2, #7
 8003f40:	4013      	ands	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	220f      	movs	r2, #15
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2107      	movs	r1, #7
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	08da      	lsrs	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3208      	adds	r2, #8
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	409a      	lsls	r2, r3
 8003f84:	0013      	movs	r3, r2
 8003f86:	43da      	mvns	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	401a      	ands	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	055b      	lsls	r3, r3, #21
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d100      	bne.n	8003fb8 <HAL_GPIO_Init+0x174>
 8003fb6:	e0a0      	b.n	80040fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb8:	4b57      	ldr	r3, [pc, #348]	; (8004118 <HAL_GPIO_Init+0x2d4>)
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_GPIO_Init+0x2d4>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
 8003fc4:	4b54      	ldr	r3, [pc, #336]	; (8004118 <HAL_GPIO_Init+0x2d4>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_GPIO_Init+0x2d8>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	589b      	ldr	r3, [r3, r2]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	0013      	movs	r3, r2
 8003fec:	43da      	mvns	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	2390      	movs	r3, #144	; 0x90
 8003ff8:	05db      	lsls	r3, r3, #23
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x1ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_GPIO_Init+0x2dc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x1ea>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a46      	ldr	r2, [pc, #280]	; (8004124 <HAL_GPIO_Init+0x2e0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x1e6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a45      	ldr	r2, [pc, #276]	; (8004128 <HAL_GPIO_Init+0x2e4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x1e2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a44      	ldr	r2, [pc, #272]	; (800412c <HAL_GPIO_Init+0x2e8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x1de>
 800401e:	2304      	movs	r3, #4
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x1f0>
 8004022:	2305      	movs	r3, #5
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x1f0>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x1f0>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x1f0>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x1f0>
 8004032:	2300      	movs	r3, #0
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	2103      	movs	r1, #3
 8004038:	400a      	ands	r2, r1
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	; (800411c <HAL_GPIO_Init+0x2d8>)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43da      	mvns	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	025b      	lsls	r3, r3, #9
 800406a:	4013      	ands	r3, r2
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004076:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43da      	mvns	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	4013      	ands	r3, r2
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43da      	mvns	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	035b      	lsls	r3, r3, #13
 80040be:	4013      	ands	r3, r2
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040ca:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43da      	mvns	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	039b      	lsls	r3, r3, #14
 80040e8:	4013      	ands	r3, r2
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_GPIO_Init+0x2ec>)
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	40da      	lsrs	r2, r3
 8004108:	1e13      	subs	r3, r2, #0
 800410a:	d000      	beq.n	800410e <HAL_GPIO_Init+0x2ca>
 800410c:	e6a2      	b.n	8003e54 <HAL_GPIO_Init+0x10>
  } 
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b006      	add	sp, #24
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	40021000 	.word	0x40021000
 800411c:	40010000 	.word	0x40010000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000800 	.word	0x48000800
 8004128:	48000c00 	.word	0x48000c00
 800412c:	48001000 	.word	0x48001000
 8004130:	40010400 	.word	0x40010400

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	0008      	movs	r0, r1
 800413e:	0011      	movs	r1, r2
 8004140:	1cbb      	adds	r3, r7, #2
 8004142:	1c02      	adds	r2, r0, #0
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	1c7b      	adds	r3, r7, #1
 8004148:	1c0a      	adds	r2, r1, #0
 800414a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800414c:	1c7b      	adds	r3, r7, #1
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004154:	1cbb      	adds	r3, r7, #2
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800415c:	e003      	b.n	8004166 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415e:	1cbb      	adds	r3, r7, #2
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f000 fb76 	bl	8004870 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	d100      	bne.n	8004190 <HAL_RCC_OscConfig+0x20>
 800418e:	e08e      	b.n	80042ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004190:	4bc5      	ldr	r3, [pc, #788]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	220c      	movs	r2, #12
 8004196:	4013      	ands	r3, r2
 8004198:	2b04      	cmp	r3, #4
 800419a:	d00e      	beq.n	80041ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800419c:	4bc2      	ldr	r3, [pc, #776]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	220c      	movs	r2, #12
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d117      	bne.n	80041d8 <HAL_RCC_OscConfig+0x68>
 80041a8:	4bbf      	ldr	r3, [pc, #764]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	23c0      	movs	r3, #192	; 0xc0
 80041ae:	025b      	lsls	r3, r3, #9
 80041b0:	401a      	ands	r2, r3
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	025b      	lsls	r3, r3, #9
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d10e      	bne.n	80041d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ba:	4bbb      	ldr	r3, [pc, #748]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	029b      	lsls	r3, r3, #10
 80041c2:	4013      	ands	r3, r2
 80041c4:	d100      	bne.n	80041c8 <HAL_RCC_OscConfig+0x58>
 80041c6:	e071      	b.n	80042ac <HAL_RCC_OscConfig+0x13c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d000      	beq.n	80041d2 <HAL_RCC_OscConfig+0x62>
 80041d0:	e06c      	b.n	80042ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f000 fb4c 	bl	8004870 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_OscConfig+0x80>
 80041e0:	4bb1      	ldr	r3, [pc, #708]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4bb0      	ldr	r3, [pc, #704]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	0249      	lsls	r1, r1, #9
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e02f      	b.n	8004250 <HAL_RCC_OscConfig+0xe0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10c      	bne.n	8004212 <HAL_RCC_OscConfig+0xa2>
 80041f8:	4bab      	ldr	r3, [pc, #684]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4baa      	ldr	r3, [pc, #680]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80041fe:	49ab      	ldr	r1, [pc, #684]	; (80044ac <HAL_RCC_OscConfig+0x33c>)
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4ba8      	ldr	r3, [pc, #672]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4ba7      	ldr	r3, [pc, #668]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800420a:	49a9      	ldr	r1, [pc, #676]	; (80044b0 <HAL_RCC_OscConfig+0x340>)
 800420c:	400a      	ands	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e01e      	b.n	8004250 <HAL_RCC_OscConfig+0xe0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d10e      	bne.n	8004238 <HAL_RCC_OscConfig+0xc8>
 800421a:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4ba2      	ldr	r3, [pc, #648]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	02c9      	lsls	r1, r1, #11
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b9f      	ldr	r3, [pc, #636]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	0249      	lsls	r1, r1, #9
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xe0>
 8004238:	4b9b      	ldr	r3, [pc, #620]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b9a      	ldr	r3, [pc, #616]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800423e:	499b      	ldr	r1, [pc, #620]	; (80044ac <HAL_RCC_OscConfig+0x33c>)
 8004240:	400a      	ands	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	4b98      	ldr	r3, [pc, #608]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b97      	ldr	r3, [pc, #604]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800424a:	4999      	ldr	r1, [pc, #612]	; (80044b0 <HAL_RCC_OscConfig+0x340>)
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7ff fd14 	bl	8003c84 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004262:	f7ff fd0f 	bl	8003c84 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	; 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e2fd      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004274:	4b8c      	ldr	r3, [pc, #560]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	029b      	lsls	r3, r3, #10
 800427c:	4013      	ands	r3, r2
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0xf2>
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004282:	f7ff fcff 	bl	8003c84 <HAL_GetTick>
 8004286:	0003      	movs	r3, r0
 8004288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428c:	f7ff fcfa 	bl	8003c84 <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e2e8      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429e:	4b82      	ldr	r3, [pc, #520]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	029b      	lsls	r3, r3, #10
 80042a6:	4013      	ands	r3, r2
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x11c>
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2202      	movs	r2, #2
 80042b4:	4013      	ands	r3, r2
 80042b6:	d100      	bne.n	80042ba <HAL_RCC_OscConfig+0x14a>
 80042b8:	e06c      	b.n	8004394 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042ba:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	220c      	movs	r2, #12
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042c4:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	220c      	movs	r2, #12
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d11f      	bne.n	8004310 <HAL_RCC_OscConfig+0x1a0>
 80042d0:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	23c0      	movs	r3, #192	; 0xc0
 80042d6:	025b      	lsls	r3, r3, #9
 80042d8:	401a      	ands	r2, r3
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	429a      	cmp	r2, r3
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2202      	movs	r2, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_OscConfig+0x188>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e2bb      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	22f8      	movs	r2, #248	; 0xf8
 80042fe:	4393      	bics	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00da      	lsls	r2, r3, #3
 8004308:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e041      	b.n	8004394 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d024      	beq.n	8004362 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800431e:	2101      	movs	r1, #1
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7ff fcae 	bl	8003c84 <HAL_GetTick>
 8004328:	0003      	movs	r3, r0
 800432a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432e:	f7ff fca9 	bl	8003c84 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e297      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2202      	movs	r2, #2
 8004346:	4013      	ands	r3, r2
 8004348:	d0f1      	beq.n	800432e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	22f8      	movs	r2, #248	; 0xf8
 8004350:	4393      	bics	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	00da      	lsls	r2, r3, #3
 800435a:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e018      	b.n	8004394 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004368:	2101      	movs	r1, #1
 800436a:	438a      	bics	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436e:	f7ff fc89 	bl	8003c84 <HAL_GetTick>
 8004372:	0003      	movs	r3, r0
 8004374:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004378:	f7ff fc84 	bl	8003c84 <HAL_GetTick>
 800437c:	0002      	movs	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e272      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2202      	movs	r2, #2
 8004390:	4013      	ands	r3, r2
 8004392:	d1f1      	bne.n	8004378 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2208      	movs	r2, #8
 800439a:	4013      	ands	r3, r2
 800439c:	d036      	beq.n	800440c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d019      	beq.n	80043da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80043a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	430a      	orrs	r2, r1
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b2:	f7ff fc67 	bl	8003c84 <HAL_GetTick>
 80043b6:	0003      	movs	r3, r0
 80043b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043bc:	f7ff fc62 	bl	8003c84 <HAL_GetTick>
 80043c0:	0002      	movs	r2, r0
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e250      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2202      	movs	r2, #2
 80043d4:	4013      	ands	r3, r2
 80043d6:	d0f1      	beq.n	80043bc <HAL_RCC_OscConfig+0x24c>
 80043d8:	e018      	b.n	800440c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043da:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80043dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80043e0:	2101      	movs	r1, #1
 80043e2:	438a      	bics	r2, r1
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7ff fc4d 	bl	8003c84 <HAL_GetTick>
 80043ea:	0003      	movs	r3, r0
 80043ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7ff fc48 	bl	8003c84 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e236      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004402:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	d1f1      	bne.n	80043f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2204      	movs	r2, #4
 8004412:	4013      	ands	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_RCC_OscConfig+0x2a8>
 8004416:	e0b5      	b.n	8004584 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004418:	231f      	movs	r3, #31
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	055b      	lsls	r3, r3, #21
 8004428:	4013      	ands	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	0549      	lsls	r1, r1, #21
 8004436:	430a      	orrs	r2, r1
 8004438:	61da      	str	r2, [r3, #28]
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	055b      	lsls	r3, r3, #21
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004448:	231f      	movs	r3, #31
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_RCC_OscConfig+0x344>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d11a      	bne.n	8004492 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445c:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_RCC_OscConfig+0x344>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_OscConfig+0x344>)
 8004462:	2180      	movs	r1, #128	; 0x80
 8004464:	0049      	lsls	r1, r1, #1
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7ff fc0b 	bl	8003c84 <HAL_GetTick>
 800446e:	0003      	movs	r3, r0
 8004470:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004474:	f7ff fc06 	bl	8003c84 <HAL_GetTick>
 8004478:	0002      	movs	r2, r0
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1f4      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x344>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10e      	bne.n	80044b8 <HAL_RCC_OscConfig+0x348>
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	4b02      	ldr	r3, [pc, #8]	; (80044a8 <HAL_RCC_OscConfig+0x338>)
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	e035      	b.n	8004514 <HAL_RCC_OscConfig+0x3a4>
 80044a8:	40021000 	.word	0x40021000
 80044ac:	fffeffff 	.word	0xfffeffff
 80044b0:	fffbffff 	.word	0xfffbffff
 80044b4:	40007000 	.word	0x40007000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x36a>
 80044c0:	4bca      	ldr	r3, [pc, #808]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	4bc9      	ldr	r3, [pc, #804]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	4bc7      	ldr	r3, [pc, #796]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	4bc6      	ldr	r3, [pc, #792]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044d2:	2104      	movs	r1, #4
 80044d4:	438a      	bics	r2, r1
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e01c      	b.n	8004514 <HAL_RCC_OscConfig+0x3a4>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x38c>
 80044e2:	4bc2      	ldr	r3, [pc, #776]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	4bc1      	ldr	r3, [pc, #772]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044e8:	2104      	movs	r1, #4
 80044ea:	430a      	orrs	r2, r1
 80044ec:	621a      	str	r2, [r3, #32]
 80044ee:	4bbf      	ldr	r3, [pc, #764]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	4bbe      	ldr	r3, [pc, #760]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	621a      	str	r2, [r3, #32]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0x3a4>
 80044fc:	4bbb      	ldr	r3, [pc, #748]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80044fe:	6a1a      	ldr	r2, [r3, #32]
 8004500:	4bba      	ldr	r3, [pc, #744]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004502:	2101      	movs	r1, #1
 8004504:	438a      	bics	r2, r1
 8004506:	621a      	str	r2, [r3, #32]
 8004508:	4bb8      	ldr	r3, [pc, #736]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	4bb7      	ldr	r3, [pc, #732]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800450e:	2104      	movs	r1, #4
 8004510:	438a      	bics	r2, r1
 8004512:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d014      	beq.n	8004546 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7ff fbb2 	bl	8003c84 <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e009      	b.n	800453a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7ff fbad 	bl	8003c84 <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	4aaf      	ldr	r2, [pc, #700]	; (80047f0 <HAL_RCC_OscConfig+0x680>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e19a      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	4bac      	ldr	r3, [pc, #688]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	2202      	movs	r2, #2
 8004540:	4013      	ands	r3, r2
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x3b6>
 8004544:	e013      	b.n	800456e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7ff fb9d 	bl	8003c84 <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	e009      	b.n	8004564 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7ff fb98 	bl	8003c84 <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	4aa5      	ldr	r2, [pc, #660]	; (80047f0 <HAL_RCC_OscConfig+0x680>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e185      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004564:	4ba1      	ldr	r3, [pc, #644]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	2202      	movs	r2, #2
 800456a:	4013      	ands	r3, r2
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800456e:	231f      	movs	r3, #31
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	4b9b      	ldr	r3, [pc, #620]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800457e:	499d      	ldr	r1, [pc, #628]	; (80047f4 <HAL_RCC_OscConfig+0x684>)
 8004580:	400a      	ands	r2, r1
 8004582:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2210      	movs	r2, #16
 800458a:	4013      	ands	r3, r2
 800458c:	d063      	beq.n	8004656 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d12a      	bne.n	80045ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004596:	4b95      	ldr	r3, [pc, #596]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459a:	4b94      	ldr	r3, [pc, #592]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800459c:	2104      	movs	r1, #4
 800459e:	430a      	orrs	r2, r1
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a6:	4b91      	ldr	r3, [pc, #580]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7ff fb69 	bl	8003c84 <HAL_GetTick>
 80045b2:	0003      	movs	r3, r0
 80045b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045b8:	f7ff fb64 	bl	8003c84 <HAL_GetTick>
 80045bc:	0002      	movs	r2, r0
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e152      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	2202      	movs	r2, #2
 80045d0:	4013      	ands	r3, r2
 80045d2:	d0f1      	beq.n	80045b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045d4:	4b85      	ldr	r3, [pc, #532]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	22f8      	movs	r2, #248	; 0xf8
 80045da:	4393      	bics	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	00da      	lsls	r2, r3, #3
 80045e4:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045e6:	430a      	orrs	r2, r1
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ea:	e034      	b.n	8004656 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	3305      	adds	r3, #5
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80045f4:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80045fa:	2104      	movs	r1, #4
 80045fc:	438a      	bics	r2, r1
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004600:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	22f8      	movs	r2, #248	; 0xf8
 8004606:	4393      	bics	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	00da      	lsls	r2, r3, #3
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004612:	430a      	orrs	r2, r1
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
 8004616:	e01e      	b.n	8004656 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004618:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800461a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461c:	4b73      	ldr	r3, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800461e:	2104      	movs	r1, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004624:	4b71      	ldr	r3, [pc, #452]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004628:	4b70      	ldr	r3, [pc, #448]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800462a:	2101      	movs	r1, #1
 800462c:	438a      	bics	r2, r1
 800462e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004630:	f7ff fb28 	bl	8003c84 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800463a:	f7ff fb23 	bl	8003c84 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e111      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800464c:	4b67      	ldr	r3, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d1f1      	bne.n	800463a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2220      	movs	r2, #32
 800465c:	4013      	ands	r3, r2
 800465e:	d05c      	beq.n	800471a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004660:	4b62      	ldr	r3, [pc, #392]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	220c      	movs	r2, #12
 8004666:	4013      	ands	r3, r2
 8004668:	2b0c      	cmp	r3, #12
 800466a:	d00e      	beq.n	800468a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800466c:	4b5f      	ldr	r3, [pc, #380]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	220c      	movs	r2, #12
 8004672:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004674:	2b08      	cmp	r3, #8
 8004676:	d114      	bne.n	80046a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004678:	4b5c      	ldr	r3, [pc, #368]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	23c0      	movs	r3, #192	; 0xc0
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	401a      	ands	r2, r3
 8004682:	23c0      	movs	r3, #192	; 0xc0
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	429a      	cmp	r2, r3
 8004688:	d10b      	bne.n	80046a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800468a:	4b58      	ldr	r3, [pc, #352]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800468c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	025b      	lsls	r3, r3, #9
 8004692:	4013      	ands	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_RCC_OscConfig+0x5a8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d03c      	beq.n	8004718 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0e6      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80046aa:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80046ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ae:	4b4f      	ldr	r3, [pc, #316]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	0249      	lsls	r1, r1, #9
 80046b4:	430a      	orrs	r2, r1
 80046b6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7ff fae4 	bl	8003c84 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c2:	f7ff fadf 	bl	8003c84 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0cd      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046d4:	4b45      	ldr	r3, [pc, #276]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80046d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	025b      	lsls	r3, r3, #9
 80046dc:	4013      	ands	r3, r2
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x552>
 80046e0:	e01b      	b.n	800471a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80046e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80046e8:	4943      	ldr	r1, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0x688>)
 80046ea:	400a      	ands	r2, r1
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7ff fac9 	bl	8003c84 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f8:	f7ff fac4 	bl	8003c84 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0b2      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	4013      	ands	r3, r2
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x588>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004718:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d100      	bne.n	8004724 <HAL_RCC_OscConfig+0x5b4>
 8004722:	e0a4      	b.n	800486e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004724:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	220c      	movs	r2, #12
 800472a:	4013      	ands	r3, r2
 800472c:	2b08      	cmp	r3, #8
 800472e:	d100      	bne.n	8004732 <HAL_RCC_OscConfig+0x5c2>
 8004730:	e078      	b.n	8004824 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b02      	cmp	r3, #2
 8004738:	d14c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004740:	492e      	ldr	r1, [pc, #184]	; (80047fc <HAL_RCC_OscConfig+0x68c>)
 8004742:	400a      	ands	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7ff fa9d 	bl	8003c84 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7ff fa98 	bl	8003c84 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e086      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	049b      	lsls	r3, r3, #18
 800476a:	4013      	ands	r3, r2
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	220f      	movs	r2, #15
 8004774:	4393      	bics	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800477e:	430a      	orrs	r2, r1
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_RCC_OscConfig+0x690>)
 8004788:	4013      	ands	r3, r2
 800478a:	0019      	movs	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	431a      	orrs	r2, r3
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	0449      	lsls	r1, r1, #17
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7ff fa6b 	bl	8003c84 <HAL_GetTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7ff fa66 	bl	8003c84 <HAL_GetTick>
 80047b8:	0002      	movs	r2, r0
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e054      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	049b      	lsls	r3, r3, #18
 80047ce:	4013      	ands	r3, r2
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x644>
 80047d2:	e04c      	b.n	800486e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCC_OscConfig+0x67c>)
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <HAL_RCC_OscConfig+0x68c>)
 80047dc:	400a      	ands	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7ff fa50 	bl	8003c84 <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e8:	e015      	b.n	8004816 <HAL_RCC_OscConfig+0x6a6>
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	40021000 	.word	0x40021000
 80047f0:	00001388 	.word	0x00001388
 80047f4:	efffffff 	.word	0xefffffff
 80047f8:	fffeffff 	.word	0xfffeffff
 80047fc:	feffffff 	.word	0xfeffffff
 8004800:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004804:	f7ff fa3e 	bl	8003c84 <HAL_GetTick>
 8004808:	0002      	movs	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e02c      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <HAL_RCC_OscConfig+0x708>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	049b      	lsls	r3, r3, #18
 800481e:	4013      	ands	r3, r2
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x694>
 8004822:	e024      	b.n	800486e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e01f      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_RCC_OscConfig+0x708>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_OscConfig+0x708>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	23c0      	movs	r3, #192	; 0xc0
 8004840:	025b      	lsls	r3, r3, #9
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	429a      	cmp	r2, r3
 800484a:	d10e      	bne.n	800486a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	220f      	movs	r2, #15
 8004850:	401a      	ands	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d107      	bne.n	800486a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	23f0      	movs	r3, #240	; 0xf0
 800485e:	039b      	lsls	r3, r3, #14
 8004860:	401a      	ands	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b008      	add	sp, #32
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0bf      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	4013      	ands	r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d911      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	4393      	bics	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b0:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2201      	movs	r2, #1
 80048b6:	4013      	ands	r3, r2
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0a6      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2202      	movs	r2, #2
 80048c8:	4013      	ands	r3, r2
 80048ca:	d015      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	4013      	ands	r3, r2
 80048d4:	d006      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80048dc:	21e0      	movs	r1, #224	; 0xe0
 80048de:	00c9      	lsls	r1, r1, #3
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b4d      	ldr	r3, [pc, #308]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	22f0      	movs	r2, #240	; 0xf0
 80048ea:	4393      	bics	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	d04c      	beq.n	800499c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b44      	ldr	r3, [pc, #272]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	4013      	ands	r3, r2
 8004914:	d120      	bne.n	8004958 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b3e      	ldr	r3, [pc, #248]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	049b      	lsls	r3, r3, #18
 800492a:	4013      	ands	r3, r2
 800492c:	d114      	bne.n	8004958 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800493a:	4b38      	ldr	r3, [pc, #224]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 800493c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	025b      	lsls	r3, r3, #9
 8004942:	4013      	ands	r3, r2
 8004944:	d108      	bne.n	8004958 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e062      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2202      	movs	r2, #2
 8004950:	4013      	ands	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e05b      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004958:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	4393      	bics	r3, r2
 8004960:	0019      	movs	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800496c:	f7ff f98a 	bl	8003c84 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004974:	e009      	b.n	800498a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004976:	f7ff f985 	bl	8003c84 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <HAL_RCC_ClockConfig+0x1a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e042      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	220c      	movs	r2, #12
 8004990:	401a      	ands	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	429a      	cmp	r2, r3
 800499a:	d1ec      	bne.n	8004976 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d211      	bcs.n	80049ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	4393      	bics	r3, r2
 80049b2:	0019      	movs	r1, r3
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_RCC_ClockConfig+0x19c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2201      	movs	r2, #1
 80049c2:	4013      	ands	r3, r2
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e020      	b.n	8004a10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <HAL_RCC_ClockConfig+0x1a8>)
 80049de:	4013      	ands	r3, r2
 80049e0:	0019      	movs	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049ec:	f000 f820 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049f0:	0001      	movs	r1, r0
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1a0>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	220f      	movs	r2, #15
 80049fa:	4013      	ands	r3, r2
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1ac>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	000a      	movs	r2, r1
 8004a02:	40da      	lsrs	r2, r3
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1b0>)
 8004a06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f7ff f8f5 	bl	8003bf8 <HAL_InitTick>
  
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b004      	add	sp, #16
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	00001388 	.word	0x00001388
 8004a24:	fffff8ff 	.word	0xfffff8ff
 8004a28:	0800515c 	.word	0x0800515c
 8004a2c:	20000000 	.word	0x20000000

08004a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b08f      	sub	sp, #60	; 0x3c
 8004a34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004a36:	2314      	movs	r3, #20
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	4a37      	ldr	r2, [pc, #220]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004a3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a3e:	c313      	stmia	r3!, {r0, r1, r4}
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	4a35      	ldr	r2, [pc, #212]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xec>)
 8004a48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a4a:	c313      	stmia	r3!, {r0, r1, r4}
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a54:	2300      	movs	r3, #0
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a58:	2300      	movs	r3, #0
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a64:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	220c      	movs	r2, #12
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d006      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x52>
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d043      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0xd0>
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d144      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a80:	e044      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	0c9b      	lsrs	r3, r3, #18
 8004a86:	220f      	movs	r2, #15
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2214      	movs	r2, #20
 8004a8c:	18ba      	adds	r2, r7, r2
 8004a8e:	5cd3      	ldrb	r3, [r2, r3]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	220f      	movs	r2, #15
 8004a98:	4013      	ands	r3, r2
 8004a9a:	1d3a      	adds	r2, r7, #4
 8004a9c:	5cd3      	ldrb	r3, [r2, r3]
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa2:	23c0      	movs	r3, #192	; 0xc0
 8004aa4:	025b      	lsls	r3, r3, #9
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	025b      	lsls	r3, r3, #9
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d109      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab2:	481c      	ldr	r0, [pc, #112]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ab4:	f7fb fb28 	bl	8000108 <__udivsi3>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	001a      	movs	r2, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	4353      	muls	r3, r2
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	e01a      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac6:	23c0      	movs	r3, #192	; 0xc0
 8004ac8:	025b      	lsls	r3, r3, #9
 8004aca:	401a      	ands	r2, r3
 8004acc:	23c0      	movs	r3, #192	; 0xc0
 8004ace:	025b      	lsls	r3, r3, #9
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d109      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	4814      	ldr	r0, [pc, #80]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ad8:	f7fb fb16 	bl	8000108 <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	001a      	movs	r2, r3
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	4353      	muls	r3, r2
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aea:	480e      	ldr	r0, [pc, #56]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004aec:	f7fb fb0c 	bl	8000108 <__udivsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	001a      	movs	r2, r3
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	4353      	muls	r3, r2
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b04:	e002      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b00f      	add	sp, #60	; 0x3c
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	0800513c 	.word	0x0800513c
 8004b1c:	0800514c 	.word	0x0800514c
 8004b20:	40021000 	.word	0x40021000
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	02dc6c00 	.word	0x02dc6c00

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e042      	b.n	8004bc4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	223d      	movs	r2, #61	; 0x3d
 8004b42:	5c9b      	ldrb	r3, [r3, r2]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223c      	movs	r2, #60	; 0x3c
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fd19 	bl	800058c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	223d      	movs	r2, #61	; 0x3d
 8004b5e:	2102      	movs	r1, #2
 8004b60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	0010      	movs	r0, r2
 8004b6e:	f000 f935 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2246      	movs	r2, #70	; 0x46
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223e      	movs	r2, #62	; 0x3e
 8004b7e:	2101      	movs	r1, #1
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	223f      	movs	r2, #63	; 0x3f
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	; 0x40
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2241      	movs	r2, #65	; 0x41
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2242      	movs	r2, #66	; 0x42
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2243      	movs	r2, #67	; 0x43
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	5499      	strb	r1, [r3, r2]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2244      	movs	r2, #68	; 0x44
 8004bae:	2101      	movs	r1, #1
 8004bb0:	5499      	strb	r1, [r3, r2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2245      	movs	r2, #69	; 0x45
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	223d      	movs	r2, #61	; 0x3d
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	223d      	movs	r2, #61	; 0x3d
 8004bd8:	5c9b      	ldrb	r3, [r3, r2]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e033      	b.n	8004c4c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	223d      	movs	r2, #61	; 0x3d
 8004be8:	2102      	movs	r1, #2
 8004bea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_TIM_Base_Start+0x88>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <HAL_TIM_Base_Start+0x4a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	05db      	lsls	r3, r3, #23
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d009      	beq.n	8004c16 <HAL_TIM_Base_Start+0x4a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <HAL_TIM_Base_Start+0x8c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_Base_Start+0x4a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <HAL_TIM_Base_Start+0x90>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d111      	bne.n	8004c3a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d010      	beq.n	8004c4a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	e007      	b.n	8004c4a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2101      	movs	r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40014000 	.word	0x40014000

08004c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	223c      	movs	r2, #60	; 0x3c
 8004c6e:	5c9b      	ldrb	r3, [r3, r2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0ab      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x170>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	223c      	movs	r2, #60	; 0x3c
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	223d      	movs	r2, #61	; 0x3d
 8004c84:	2102      	movs	r1, #2
 8004c86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2277      	movs	r2, #119	; 0x77
 8004c94:	4393      	bics	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a4f      	ldr	r2, [pc, #316]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x178>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d100      	bne.n	8004cb2 <HAL_TIM_ConfigClockSource+0x52>
 8004cb0:	e06b      	b.n	8004d8a <HAL_TIM_ConfigClockSource+0x12a>
 8004cb2:	d80e      	bhi.n	8004cd2 <HAL_TIM_ConfigClockSource+0x72>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d100      	bne.n	8004cba <HAL_TIM_ConfigClockSource+0x5a>
 8004cb8:	e077      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x14a>
 8004cba:	d803      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x64>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d100      	bne.n	8004cc2 <HAL_TIM_ConfigClockSource+0x62>
 8004cc0:	e073      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004cc2:	e07c      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d100      	bne.n	8004cca <HAL_TIM_ConfigClockSource+0x6a>
 8004cc8:	e06f      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x14a>
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d100      	bne.n	8004cd0 <HAL_TIM_ConfigClockSource+0x70>
 8004cce:	e06c      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004cd0:	e075      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004cd2:	2b70      	cmp	r3, #112	; 0x70
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x94>
 8004cd6:	d804      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x82>
 8004cd8:	2b50      	cmp	r3, #80	; 0x50
 8004cda:	d036      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xea>
 8004cdc:	2b60      	cmp	r3, #96	; 0x60
 8004cde:	d044      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004ce0:	e06d      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	0152      	lsls	r2, r2, #5
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d068      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x15c>
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	0192      	lsls	r2, r2, #6
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d017      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004cf2:	e064      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6899      	ldr	r1, [r3, #8]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f000 f964 	bl	8004fd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2277      	movs	r2, #119	; 0x77
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
      break;
 8004d20:	e04d      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f000 f94d 	bl	8004fd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	01c9      	lsls	r1, r1, #7
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e039      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	001a      	movs	r2, r3
 8004d58:	f000 f8c0 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2150      	movs	r1, #80	; 0x50
 8004d62:	0018      	movs	r0, r3
 8004d64:	f000 f91a 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004d68:	e029      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	001a      	movs	r2, r3
 8004d78:	f000 f8de 	bl	8004f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2160      	movs	r1, #96	; 0x60
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 f90a 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004d88:	e019      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	001a      	movs	r2, r3
 8004d98:	f000 f8a0 	bl	8004edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 f8fa 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004da8:	e009      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0019      	movs	r1, r3
 8004db4:	0010      	movs	r0, r2
 8004db6:	f000 f8f1 	bl	8004f9c <TIM_ITRx_SetConfig>
        break;
 8004dba:	e000      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004dbc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	223d      	movs	r2, #61	; 0x3d
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	223c      	movs	r2, #60	; 0x3c
 8004dca:	2100      	movs	r1, #0
 8004dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b004      	add	sp, #16
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	ffff00ff 	.word	0xffff00ff

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a34      	ldr	r2, [pc, #208]	; (8004ec0 <TIM_Base_SetConfig+0xe4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d008      	beq.n	8004e06 <TIM_Base_SetConfig+0x2a>
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	05db      	lsls	r3, r3, #23
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d003      	beq.n	8004e06 <TIM_Base_SetConfig+0x2a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <TIM_Base_SetConfig+0xe8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d108      	bne.n	8004e18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2270      	movs	r2, #112	; 0x70
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	; (8004ec0 <TIM_Base_SetConfig+0xe4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d018      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <TIM_Base_SetConfig+0xe8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <TIM_Base_SetConfig+0xec>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <TIM_Base_SetConfig+0xf0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <TIM_Base_SetConfig+0xf4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x76>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <TIM_Base_SetConfig+0xf8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <TIM_Base_SetConfig+0xfc>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	4393      	bics	r3, r2
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <TIM_Base_SetConfig+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0xce>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <TIM_Base_SetConfig+0xf0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0xce>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <TIM_Base_SetConfig+0xf4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0xce>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <TIM_Base_SetConfig+0xf8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d103      	bne.n	8004eb2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	615a      	str	r2, [r3, #20]
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b004      	add	sp, #16
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40002000 	.word	0x40002000
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	fffffcff 	.word	0xfffffcff

08004edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	22f0      	movs	r2, #240	; 0xf0
 8004f06:	4393      	bics	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	220a      	movs	r2, #10
 8004f18:	4393      	bics	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	2210      	movs	r2, #16
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <TIM_TI2_ConfigInputStage+0x60>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	22a0      	movs	r2, #160	; 0xa0
 8004f74:	4393      	bics	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b006      	add	sp, #24
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	ffff0fff 	.word	0xffff0fff

08004f9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2270      	movs	r2, #112	; 0x70
 8004fb0:	4393      	bics	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	2207      	movs	r2, #7
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b004      	add	sp, #16
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4a09      	ldr	r2, [pc, #36]	; (800500c <TIM_ETR_SetConfig+0x3c>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b006      	add	sp, #24
 800500a:	bd80      	pop	{r7, pc}
 800500c:	ffff00ff 	.word	0xffff00ff

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	223c      	movs	r2, #60	; 0x3c
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e047      	b.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	223c      	movs	r2, #60	; 0x3c
 800502c:	2101      	movs	r1, #1
 800502e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	223d      	movs	r2, #61	; 0x3d
 8005034:	2102      	movs	r1, #2
 8005036:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2270      	movs	r2, #112	; 0x70
 800504c:	4393      	bics	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	05db      	lsls	r3, r3, #23
 8005074:	429a      	cmp	r2, r3
 8005076:	d009      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2280      	movs	r2, #128	; 0x80
 8005090:	4393      	bics	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	223d      	movs	r2, #61	; 0x3d
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	223c      	movs	r2, #60	; 0x3c
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40014000 	.word	0x40014000

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	2600      	movs	r6, #0
 80050d0:	4d0c      	ldr	r5, [pc, #48]	; (8005104 <__libc_init_array+0x38>)
 80050d2:	4c0d      	ldr	r4, [pc, #52]	; (8005108 <__libc_init_array+0x3c>)
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	2600      	movs	r6, #0
 80050de:	f000 f821 	bl	8005124 <_init>
 80050e2:	4d0a      	ldr	r5, [pc, #40]	; (800510c <__libc_init_array+0x40>)
 80050e4:	4c0a      	ldr	r4, [pc, #40]	; (8005110 <__libc_init_array+0x44>)
 80050e6:	1b64      	subs	r4, r4, r5
 80050e8:	10a4      	asrs	r4, r4, #2
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	00b3      	lsls	r3, r6, #2
 80050f2:	58eb      	ldr	r3, [r5, r3]
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	00b3      	lsls	r3, r6, #2
 80050fc:	58eb      	ldr	r3, [r5, r3]
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	080051bc 	.word	0x080051bc
 8005108:	080051bc 	.word	0x080051bc
 800510c:	080051bc 	.word	0x080051bc
 8005110:	080051c0 	.word	0x080051c0

08005114 <memset>:
 8005114:	0003      	movs	r3, r0
 8005116:	1812      	adds	r2, r2, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	7019      	strb	r1, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
