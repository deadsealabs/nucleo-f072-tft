
nucleo-f072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dfc  08004dfc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004dfc  08004dfc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dfc  08004dfc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000018  08004e1c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004e1c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a53f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001681  00000000  00000000  0002a57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018cdd  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008c0a  00000000  00000000  000453ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000938b6  00000000  00000000  0004dff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e18ad  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a58  00000000  00000000  000e1928  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000281c  00000000  00000000  000e2380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004390 	.word	0x08004390

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08004390 	.word	0x08004390

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f002 fe09 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f839 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8e1 	bl	80003f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000232:	f000 f871 	bl	8000318 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ID = readID();
 8000236:	f001 f93f 	bl	80014b8 <readID>
 800023a:	0003      	movs	r3, r0
 800023c:	001a      	movs	r2, r3
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <main+0x6c>)
 8000240:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f002 fe5e 	bl	8002f04 <HAL_Delay>

  tft_init (ID);
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <main+0x6c>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	0018      	movs	r0, r3
 800024e:	f001 f8d9 	bl	8001404 <tft_init>

  setRotation(3);
 8000252:	2003      	movs	r0, #3
 8000254:	f001 f93a 	bl	80014cc <setRotation>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fillScreen(BLACK);
 8000258:	2000      	movs	r0, #0
 800025a:	f001 fc79 	bl	8001b50 <fillScreen>
//
//	testFillScreen();
//	testLines(CYAN);
//	testFastLines(RED, BLUE);
	testFilledCircles(10, MAGENTA);
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <main+0x70>)
 8000260:	0019      	movs	r1, r3
 8000262:	200a      	movs	r0, #10
 8000264:	f002 fa8c 	bl	8002780 <testFilledCircles>
	testCircles(10, WHITE);
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0x74>)
 800026a:	0019      	movs	r1, r3
 800026c:	200a      	movs	r0, #10
 800026e:	f002 fac6 	bl	80027fe <testCircles>

	printnewtstr(100, RED, &mono12x7bold, 1, "HELLO WORLD");
 8000272:	4a09      	ldr	r2, [pc, #36]	; (8000298 <main+0x78>)
 8000274:	23f8      	movs	r3, #248	; 0xf8
 8000276:	0219      	lsls	r1, r3, #8
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <main+0x7c>)
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	2064      	movs	r0, #100	; 0x64
 8000280:	f002 fcfe 	bl	8002c80 <printnewtstr>

	scrollup(100);
 8000284:	2064      	movs	r0, #100	; 0x64
 8000286:	f002 fd5d 	bl	8002d44 <scrollup>
	fillScreen(BLACK);
 800028a:	e7e5      	b.n	8000258 <main+0x38>
 800028c:	20000034 	.word	0x20000034
 8000290:	0000f81f 	.word	0x0000f81f
 8000294:	0000ffff 	.word	0x0000ffff
 8000298:	08004d90 	.word	0x08004d90
 800029c:	080043a8 	.word	0x080043a8

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b093      	sub	sp, #76	; 0x4c
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2414      	movs	r4, #20
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2334      	movs	r3, #52	; 0x34
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f004 f865 	bl	8004380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f004 f85e 	bl	8004380 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2220      	movs	r2, #32
 80002c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2201      	movs	r2, #1
 80002ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2200      	movs	r2, #0
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	0018      	movs	r0, r3
 80002da:	f003 f87f 	bl	80033dc <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f915 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2207      	movs	r2, #7
 80002ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2203      	movs	r2, #3
 80002f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2101      	movs	r1, #1
 8000302:	0018      	movs	r0, r3
 8000304:	f003 fbf0 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800030c:	f000 f900 	bl	8000510 <Error_Handler>
  }
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b013      	add	sp, #76	; 0x4c
 8000316:	bd90      	pop	{r4, r7, pc}

08000318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	2310      	movs	r3, #16
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f004 f829 	bl	8004380 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032e:	2308      	movs	r3, #8
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	0018      	movs	r0, r3
 8000334:	2308      	movs	r3, #8
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f004 f821 	bl	8004380 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __TIM1_CLK_ENABLE();
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <MX_TIM1_Init+0xcc>)
 8000340:	699a      	ldr	r2, [r3, #24]
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <MX_TIM1_Init+0xcc>)
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	0109      	lsls	r1, r1, #4
 8000348:	430a      	orrs	r2, r1
 800034a:	619a      	str	r2, [r3, #24]
 800034c:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <MX_TIM1_Init+0xcc>)
 800034e:	699a      	ldr	r2, [r3, #24]
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	011b      	lsls	r3, r3, #4
 8000354:	4013      	ands	r3, r2
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035a:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <MX_TIM1_Init+0xd0>)
 800035c:	4a23      	ldr	r2, [pc, #140]	; (80003ec <MX_TIM1_Init+0xd4>)
 800035e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_TIM1_Init+0xd0>)
 8000362:	222f      	movs	r2, #47	; 0x2f
 8000364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_TIM1_Init+0xd0>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_TIM1_Init+0xd0>)
 800036e:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <MX_TIM1_Init+0xd8>)
 8000370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_TIM1_Init+0xd0>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_TIM1_Init+0xd0>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_TIM1_Init+0xd0>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_TIM1_Init+0xd0>)
 8000386:	0018      	movs	r0, r3
 8000388:	f003 fd06 	bl	8003d98 <HAL_TIM_Base_Init>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000390:	f000 f8be 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000394:	2110      	movs	r1, #16
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	0152      	lsls	r2, r2, #5
 800039c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800039e:	187a      	adds	r2, r7, r1
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_TIM1_Init+0xd0>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f003 fd91 	bl	8003ecc <HAL_TIM_ConfigClockSource>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003ae:	f000 f8af 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b2:	2108      	movs	r1, #8
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c0:	187a      	adds	r2, r7, r1
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_TIM1_Init+0xd0>)
 80003c4:	0011      	movs	r1, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f003 ff58 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80003d0:	f000 f89e 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <MX_TIM1_Init+0xd0>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f003 fd2e 	bl	8003e38 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b008      	add	sp, #32
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	20000040 	.word	0x20000040
 80003ec:	40012c00 	.word	0x40012c00
 80003f0:	0000fffe 	.word	0x0000fffe

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	240c      	movs	r4, #12
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 ffbb 	bl	8004380 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <MX_GPIO_Init+0x108>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <MX_GPIO_Init+0x108>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0309      	lsls	r1, r1, #12
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <MX_GPIO_Init+0x108>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	031b      	lsls	r3, r3, #12
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b35      	ldr	r3, [pc, #212]	; (80004fc <MX_GPIO_Init+0x108>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <MX_GPIO_Init+0x108>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	0289      	lsls	r1, r1, #10
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <MX_GPIO_Init+0x108>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	029b      	lsls	r3, r3, #10
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <MX_GPIO_Init+0x108>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_GPIO_Init+0x108>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	02c9      	lsls	r1, r1, #11
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_GPIO_Init+0x108>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	02db      	lsls	r3, r3, #11
 8000458:	4013      	ands	r3, r2
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D1_Pin, GPIO_PIN_RESET);
 800045e:	4b28      	ldr	r3, [pc, #160]	; (8000500 <MX_GPIO_Init+0x10c>)
 8000460:	2200      	movs	r2, #0
 8000462:	2182      	movs	r1, #130	; 0x82
 8000464:	0018      	movs	r0, r3
 8000466:	f002 ff9b 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RD_Pin|WR_Pin|RS_Pin|D7_Pin
 800046a:	4926      	ldr	r1, [pc, #152]	; (8000504 <MX_GPIO_Init+0x110>)
 800046c:	2390      	movs	r3, #144	; 0x90
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2200      	movs	r2, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f002 ff94 	bl	80033a0 <HAL_GPIO_WritePin>
                          |D0_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000478:	4923      	ldr	r1, [pc, #140]	; (8000508 <MX_GPIO_Init+0x114>)
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <MX_GPIO_Init+0x118>)
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 ff8e 	bl	80033a0 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D1_Pin;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2282      	movs	r2, #130	; 0x82
 8000488:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2201      	movs	r2, #1
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049c:	193b      	adds	r3, r7, r4
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <MX_GPIO_Init+0x10c>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f002 fe04 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin WR_Pin RS_Pin D7_Pin
                           D0_Pin D2_Pin */
  GPIO_InitStruct.Pin = RD_Pin|WR_Pin|RS_Pin|D7_Pin
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <MX_GPIO_Init+0x110>)
 80004ac:	601a      	str	r2, [r3, #0]
                          |D0_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	193a      	adds	r2, r7, r4
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 fdf1 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <MX_GPIO_Init+0x114>)
 80004d4:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2201      	movs	r2, #1
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <MX_GPIO_Init+0x118>)
 80004ec:	0019      	movs	r1, r3
 80004ee:	0010      	movs	r0, r2
 80004f0:	f002 fdde 	bl	80030b0 <HAL_GPIO_Init>

}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b009      	add	sp, #36	; 0x24
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000800 	.word	0x48000800
 8000504:	00000713 	.word	0x00000713
 8000508:	00000439 	.word	0x00000439
 800050c:	48000400 	.word	0x48000400

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0549      	lsls	r1, r1, #21
 8000544:	430a      	orrs	r2, r1
 8000546:	61da      	str	r2, [r3, #28]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_MspInit+0x44>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	055b      	lsls	r3, r3, #21
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <HAL_TIM_Base_MspInit+0x38>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d10d      	bne.n	8000592 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_TIM_Base_MspInit+0x3c>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	0109      	lsls	r1, r1, #4
 8000580:	430a      	orrs	r2, r1
 8000582:	619a      	str	r2, [r3, #24]
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000586:	699a      	ldr	r2, [r3, #24]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	4013      	ands	r3, r2
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40012c00 	.word	0x40012c00
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f002 fc7e 	bl	8002ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <delay>:
#define  HEIGHT   ((uint16_t)480)

/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <delay+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <delay+0x28>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f9      	bhi.n	80005f2 <delay+0x12>
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	20000040 	.word	0x20000040

0800060c <PIN_INPUT>:
#include "functions.h"
#include "user_setting.h"
#include "stdlib.h"

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	000a      	movs	r2, r1
 8000616:	1cbb      	adds	r3, r7, #2
 8000618:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800061a:	1cbb      	adds	r3, r7, #2
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	210c      	movs	r1, #12
 8000620:	187b      	adds	r3, r7, r1
 8000622:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000630:	187a      	adds	r2, r7, r1
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f002 fd3a 	bl	80030b0 <HAL_GPIO_Init>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b008      	add	sp, #32
 8000642:	bd80      	pop	{r7, pc}

08000644 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	801a      	strh	r2, [r3, #0]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000652:	1cbb      	adds	r3, r7, #2
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	210c      	movs	r1, #12
 8000658:	187b      	adds	r3, r7, r1
 800065a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2203      	movs	r2, #3
 800066c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800066e:	187a      	adds	r2, r7, r1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fd1b 	bl	80030b0 <HAL_GPIO_Init>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b008      	add	sp, #32
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <width+0x10>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000004 	.word	0x20000004

08000698 <height>:

uint16_t height(void)
{ return _height; }
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <height+0x10>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000006 	.word	0x20000006

080006ac <WriteCmdData>:

static void pushColors_any(uint16_t cmd, uint8_t * block, int16_t n, uint8_t first, uint8_t flags);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	1dbb      	adds	r3, r7, #6
 80006b6:	801a      	strh	r2, [r3, #0]
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	1c0a      	adds	r2, r1, #0
 80006bc:	801a      	strh	r2, [r3, #0]
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 f87d 	bl	80007c8 <writecmddata>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <setReadDir>:
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }

uint16_t _lcd_capable, _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

void setReadDir (void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009a      	lsls	r2, r3, #2
 80006e0:	2390      	movs	r3, #144	; 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff ff90 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <setReadDir+0x70>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff8b 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	00da      	lsls	r2, r3, #3
 80006fa:	2390      	movs	r3, #144	; 0x90
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ff83 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <setReadDir+0x74>)
 8000708:	2108      	movs	r1, #8
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff ff7e 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <setReadDir+0x74>)
 8000712:	2120      	movs	r1, #32
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff79 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <setReadDir+0x74>)
 800071c:	2110      	movs	r1, #16
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff ff74 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4a08      	ldr	r2, [pc, #32]	; (800074c <setReadDir+0x74>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f7ff ff6d 	bl	800060c <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	005a      	lsls	r2, r3, #1
 8000736:	2390      	movs	r3, #144	; 0x90
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff65 	bl	800060c <PIN_INPUT>
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	48000800 	.word	0x48000800
 800074c:	48000400 	.word	0x48000400

08000750 <setWriteDir>:

void setWriteDir (void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009a      	lsls	r2, r3, #2
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff70 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <setWriteDir+0x70>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ff6b 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	00da      	lsls	r2, r3, #3
 8000772:	2390      	movs	r3, #144	; 0x90
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff ff63 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <setWriteDir+0x74>)
 8000780:	2108      	movs	r1, #8
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff5e 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <setWriteDir+0x74>)
 800078a:	2120      	movs	r1, #32
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff ff59 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <setWriteDir+0x74>)
 8000794:	2110      	movs	r1, #16
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <setWriteDir+0x74>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f7ff ff4d 	bl	8000644 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	005a      	lsls	r2, r3, #1
 80007ae:	2390      	movs	r3, #144	; 0x90
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ff45 	bl	8000644 <PIN_OUTPUT>
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	48000800 	.word	0x48000800
 80007c4:	48000400 	.word	0x48000400

080007c8 <writecmddata>:
    }
    CS_IDLE;
}

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	1dbb      	adds	r3, r7, #6
 80007d2:	801a      	strh	r2, [r3, #0]
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	1c0a      	adds	r2, r1, #0
 80007d8:	801a      	strh	r2, [r3, #0]
    CS_ACTIVE;
 80007da:	4bd1      	ldr	r3, [pc, #836]	; (8000b20 <writecmddata+0x358>)
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fddd 	bl	80033a0 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2200      	movs	r2, #0
 80007ec:	2110      	movs	r1, #16
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fdd6 	bl	80033a0 <HAL_GPIO_WritePin>
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	210f      	movs	r1, #15
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	240e      	movs	r4, #14
 8000804:	193b      	adds	r3, r7, r4
 8000806:	1dba      	adds	r2, r7, #6
 8000808:	8812      	ldrh	r2, [r2, #0]
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	22e0      	movs	r2, #224	; 0xe0
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	619a      	str	r2, [r3, #24]
 8000816:	4bc2      	ldr	r3, [pc, #776]	; (8000b20 <writecmddata+0x358>)
 8000818:	2287      	movs	r2, #135	; 0x87
 800081a:	04d2      	lsls	r2, r2, #19
 800081c:	619a      	str	r2, [r3, #24]
 800081e:	4bc1      	ldr	r3, [pc, #772]	; (8000b24 <writecmddata+0x35c>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0412      	lsls	r2, r2, #16
 8000824:	619a      	str	r2, [r3, #24]
 8000826:	0008      	movs	r0, r1
 8000828:	183b      	adds	r3, r7, r0
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	025a      	lsls	r2, r3, #9
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	401a      	ands	r2, r3
 8000834:	183b      	adds	r3, r7, r0
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0219      	lsls	r1, r3, #8
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	400b      	ands	r3, r1
 8000840:	431a      	orrs	r2, r3
 8000842:	183b      	adds	r3, r7, r0
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0059      	lsls	r1, r3, #1
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	400b      	ands	r3, r1
 800084e:	431a      	orrs	r2, r3
 8000850:	2390      	movs	r3, #144	; 0x90
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	183b      	adds	r3, r7, r0
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2208      	movs	r2, #8
 800085c:	401a      	ands	r2, r3
 800085e:	183b      	adds	r3, r7, r0
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	2120      	movs	r1, #32
 8000866:	400b      	ands	r3, r1
 8000868:	431a      	orrs	r2, r3
 800086a:	183b      	adds	r3, r7, r0
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	105b      	asrs	r3, r3, #1
 8000870:	2110      	movs	r1, #16
 8000872:	400b      	ands	r3, r1
 8000874:	431a      	orrs	r2, r3
 8000876:	183b      	adds	r3, r7, r0
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0119      	lsls	r1, r3, #4
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	400b      	ands	r3, r1
 8000882:	431a      	orrs	r2, r3
 8000884:	4ba6      	ldr	r3, [pc, #664]	; (8000b20 <writecmddata+0x358>)
 8000886:	619a      	str	r2, [r3, #24]
 8000888:	183b      	adds	r3, r7, r0
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	019b      	lsls	r3, r3, #6
 800088e:	0019      	movs	r1, r3
 8000890:	4ba4      	ldr	r3, [pc, #656]	; (8000b24 <writecmddata+0x35c>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	400a      	ands	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	2102      	movs	r1, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fd7d 	bl	80033a0 <HAL_GPIO_WritePin>
 80008a6:	2390      	movs	r3, #144	; 0x90
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2201      	movs	r2, #1
 80008ac:	2102      	movs	r1, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 fd76 	bl	80033a0 <HAL_GPIO_WritePin>
 80008b4:	2390      	movs	r3, #144	; 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fd6f 	bl	80033a0 <HAL_GPIO_WritePin>
 80008c2:	2390      	movs	r3, #144	; 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	22e0      	movs	r2, #224	; 0xe0
 80008c8:	04d2      	lsls	r2, r2, #19
 80008ca:	619a      	str	r2, [r3, #24]
 80008cc:	4b94      	ldr	r3, [pc, #592]	; (8000b20 <writecmddata+0x358>)
 80008ce:	2287      	movs	r2, #135	; 0x87
 80008d0:	04d2      	lsls	r2, r2, #19
 80008d2:	619a      	str	r2, [r3, #24]
 80008d4:	4b93      	ldr	r3, [pc, #588]	; (8000b24 <writecmddata+0x35c>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	0412      	lsls	r2, r2, #16
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	025a      	lsls	r2, r3, #9
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	401a      	ands	r2, r3
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0219      	lsls	r1, r3, #8
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	400b      	ands	r3, r1
 80008f4:	431a      	orrs	r2, r3
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0059      	lsls	r1, r3, #1
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	400b      	ands	r3, r1
 8000902:	431a      	orrs	r2, r3
 8000904:	2390      	movs	r3, #144	; 0x90
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	0020      	movs	r0, r4
 800090c:	183b      	adds	r3, r7, r0
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2208      	movs	r2, #8
 8000912:	401a      	ands	r2, r3
 8000914:	183b      	adds	r3, r7, r0
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2120      	movs	r1, #32
 800091c:	400b      	ands	r3, r1
 800091e:	431a      	orrs	r2, r3
 8000920:	183b      	adds	r3, r7, r0
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	105b      	asrs	r3, r3, #1
 8000926:	2110      	movs	r1, #16
 8000928:	400b      	ands	r3, r1
 800092a:	431a      	orrs	r2, r3
 800092c:	183b      	adds	r3, r7, r0
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0119      	lsls	r1, r3, #4
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	400b      	ands	r3, r1
 8000938:	431a      	orrs	r2, r3
 800093a:	4b79      	ldr	r3, [pc, #484]	; (8000b20 <writecmddata+0x358>)
 800093c:	619a      	str	r2, [r3, #24]
 800093e:	183b      	adds	r3, r7, r0
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	0019      	movs	r1, r3
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <writecmddata+0x35c>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	400a      	ands	r2, r1
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f002 fd22 	bl	80033a0 <HAL_GPIO_WritePin>
 800095c:	2390      	movs	r3, #144	; 0x90
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	0018      	movs	r0, r3
 8000966:	f002 fd1b 	bl	80033a0 <HAL_GPIO_WritePin>
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fd14 	bl	80033a0 <HAL_GPIO_WritePin>
 8000978:	2390      	movs	r3, #144	; 0x90
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fd0d 	bl	80033a0 <HAL_GPIO_WritePin>
    WriteData(dat);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29a      	uxth	r2, r3
 800098e:	210d      	movs	r1, #13
 8000990:	187b      	adds	r3, r7, r1
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	240c      	movs	r4, #12
 8000996:	193b      	adds	r3, r7, r4
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	8812      	ldrh	r2, [r2, #0]
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	22e0      	movs	r2, #224	; 0xe0
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	619a      	str	r2, [r3, #24]
 80009a8:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <writecmddata+0x358>)
 80009aa:	2287      	movs	r2, #135	; 0x87
 80009ac:	04d2      	lsls	r2, r2, #19
 80009ae:	619a      	str	r2, [r3, #24]
 80009b0:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <writecmddata+0x35c>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0412      	lsls	r2, r2, #16
 80009b6:	619a      	str	r2, [r3, #24]
 80009b8:	0008      	movs	r0, r1
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	025a      	lsls	r2, r3, #9
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	401a      	ands	r2, r3
 80009c6:	183b      	adds	r3, r7, r0
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0219      	lsls	r1, r3, #8
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	400b      	ands	r3, r1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0059      	lsls	r1, r3, #1
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	400b      	ands	r3, r1
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2390      	movs	r3, #144	; 0x90
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	183b      	adds	r3, r7, r0
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2208      	movs	r2, #8
 80009ee:	401a      	ands	r2, r3
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2120      	movs	r1, #32
 80009f8:	400b      	ands	r3, r1
 80009fa:	431a      	orrs	r2, r3
 80009fc:	183b      	adds	r3, r7, r0
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	105b      	asrs	r3, r3, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	400b      	ands	r3, r1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0119      	lsls	r1, r3, #4
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	400b      	ands	r3, r1
 8000a14:	431a      	orrs	r2, r3
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <writecmddata+0x358>)
 8000a18:	619a      	str	r2, [r3, #24]
 8000a1a:	183b      	adds	r3, r7, r0
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	019b      	lsls	r3, r3, #6
 8000a20:	0019      	movs	r1, r3
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <writecmddata+0x35c>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	400a      	ands	r2, r1
 8000a28:	619a      	str	r2, [r3, #24]
 8000a2a:	2390      	movs	r3, #144	; 0x90
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fcb4 	bl	80033a0 <HAL_GPIO_WritePin>
 8000a38:	2390      	movs	r3, #144	; 0x90
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2102      	movs	r1, #2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fcad 	bl	80033a0 <HAL_GPIO_WritePin>
 8000a46:	2390      	movs	r3, #144	; 0x90
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fca6 	bl	80033a0 <HAL_GPIO_WritePin>
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	22e0      	movs	r2, #224	; 0xe0
 8000a5a:	04d2      	lsls	r2, r2, #19
 8000a5c:	619a      	str	r2, [r3, #24]
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <writecmddata+0x358>)
 8000a60:	2287      	movs	r2, #135	; 0x87
 8000a62:	04d2      	lsls	r2, r2, #19
 8000a64:	619a      	str	r2, [r3, #24]
 8000a66:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <writecmddata+0x35c>)
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0412      	lsls	r2, r2, #16
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	025a      	lsls	r2, r3, #9
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	401a      	ands	r2, r3
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0219      	lsls	r1, r3, #8
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	400b      	ands	r3, r1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0059      	lsls	r1, r3, #1
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	400b      	ands	r3, r1
 8000a94:	431a      	orrs	r2, r3
 8000a96:	2390      	movs	r3, #144	; 0x90
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	619a      	str	r2, [r3, #24]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2120      	movs	r1, #32
 8000aae:	400b      	ands	r3, r1
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	183b      	adds	r3, r7, r0
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	105b      	asrs	r3, r3, #1
 8000ab8:	2110      	movs	r1, #16
 8000aba:	400b      	ands	r3, r1
 8000abc:	431a      	orrs	r2, r3
 8000abe:	183b      	adds	r3, r7, r0
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0119      	lsls	r1, r3, #4
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	400b      	ands	r3, r1
 8000aca:	431a      	orrs	r2, r3
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <writecmddata+0x358>)
 8000ace:	619a      	str	r2, [r3, #24]
 8000ad0:	183b      	adds	r3, r7, r0
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <writecmddata+0x35c>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	400a      	ands	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	2390      	movs	r3, #144	; 0x90
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fc59 	bl	80033a0 <HAL_GPIO_WritePin>
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fc52 	bl	80033a0 <HAL_GPIO_WritePin>
 8000afc:	2390      	movs	r3, #144	; 0x90
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 fc4b 	bl	80033a0 <HAL_GPIO_WritePin>
    CS_IDLE;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <writecmddata+0x358>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 fc45 	bl	80033a0 <HAL_GPIO_WritePin>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b005      	add	sp, #20
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800

08000b28 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	603a      	str	r2, [r7, #0]
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	801a      	strh	r2, [r3, #0]
 8000b36:	1d7b      	adds	r3, r7, #5
 8000b38:	1c0a      	adds	r2, r1, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
    CS_ACTIVE;
 8000b3c:	4ba6      	ldr	r3, [pc, #664]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 fc2c 	bl	80033a0 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2110      	movs	r1, #16
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fc25 	bl	80033a0 <HAL_GPIO_WritePin>
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	0a1b      	lsrs	r3, r3, #8
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	210f      	movs	r1, #15
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	240e      	movs	r4, #14
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	1dba      	adds	r2, r7, #6
 8000b6a:	8812      	ldrh	r2, [r2, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	22e0      	movs	r2, #224	; 0xe0
 8000b74:	04d2      	lsls	r2, r2, #19
 8000b76:	619a      	str	r2, [r3, #24]
 8000b78:	4b97      	ldr	r3, [pc, #604]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000b7a:	2287      	movs	r2, #135	; 0x87
 8000b7c:	04d2      	lsls	r2, r2, #19
 8000b7e:	619a      	str	r2, [r3, #24]
 8000b80:	4b96      	ldr	r3, [pc, #600]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	0412      	lsls	r2, r2, #16
 8000b86:	619a      	str	r2, [r3, #24]
 8000b88:	0008      	movs	r0, r1
 8000b8a:	183b      	adds	r3, r7, r0
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	025a      	lsls	r2, r3, #9
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	401a      	ands	r2, r3
 8000b96:	183b      	adds	r3, r7, r0
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0219      	lsls	r1, r3, #8
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	183b      	adds	r3, r7, r0
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0059      	lsls	r1, r3, #1
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	400b      	ands	r3, r1
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	2390      	movs	r3, #144	; 0x90
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	619a      	str	r2, [r3, #24]
 8000bb8:	183b      	adds	r3, r7, r0
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	400b      	ands	r3, r1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	183b      	adds	r3, r7, r0
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	105b      	asrs	r3, r3, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	183b      	adds	r3, r7, r0
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0119      	lsls	r1, r3, #4
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	400b      	ands	r3, r1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	183b      	adds	r3, r7, r0
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	019b      	lsls	r3, r3, #6
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	4b7a      	ldr	r3, [pc, #488]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	619a      	str	r2, [r3, #24]
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 fbcc 	bl	80033a0 <HAL_GPIO_WritePin>
 8000c08:	2390      	movs	r3, #144	; 0x90
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2102      	movs	r1, #2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fbc5 	bl	80033a0 <HAL_GPIO_WritePin>
 8000c16:	2390      	movs	r3, #144	; 0x90
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fbbe 	bl	80033a0 <HAL_GPIO_WritePin>
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	22e0      	movs	r2, #224	; 0xe0
 8000c2a:	04d2      	lsls	r2, r2, #19
 8000c2c:	619a      	str	r2, [r3, #24]
 8000c2e:	4b6a      	ldr	r3, [pc, #424]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000c30:	2287      	movs	r2, #135	; 0x87
 8000c32:	04d2      	lsls	r2, r2, #19
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	619a      	str	r2, [r3, #24]
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	025a      	lsls	r2, r3, #9
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	401a      	ands	r2, r3
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0219      	lsls	r1, r3, #8
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	400b      	ands	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0059      	lsls	r1, r3, #1
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	400b      	ands	r3, r1
 8000c64:	431a      	orrs	r2, r3
 8000c66:	2390      	movs	r3, #144	; 0x90
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	619a      	str	r2, [r3, #24]
 8000c6c:	0020      	movs	r0, r4
 8000c6e:	183b      	adds	r3, r7, r0
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2208      	movs	r2, #8
 8000c74:	401a      	ands	r2, r3
 8000c76:	183b      	adds	r3, r7, r0
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	400b      	ands	r3, r1
 8000c80:	431a      	orrs	r2, r3
 8000c82:	183b      	adds	r3, r7, r0
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	105b      	asrs	r3, r3, #1
 8000c88:	2110      	movs	r1, #16
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	183b      	adds	r3, r7, r0
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0119      	lsls	r1, r3, #4
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	400b      	ands	r3, r1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	400a      	ands	r2, r1
 8000cae:	619a      	str	r2, [r3, #24]
 8000cb0:	2390      	movs	r3, #144	; 0x90
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 fb71 	bl	80033a0 <HAL_GPIO_WritePin>
 8000cbe:	2390      	movs	r3, #144	; 0x90
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f002 fb6a 	bl	80033a0 <HAL_GPIO_WritePin>
 8000ccc:	2390      	movs	r3, #144	; 0x90
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f002 fb63 	bl	80033a0 <HAL_GPIO_WritePin>
 8000cda:	2390      	movs	r3, #144	; 0x90
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fb5c 	bl	80033a0 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000ce8:	e061      	b.n	8000dae <WriteCmdParamN+0x286>
        uint8_t u8 = *block++;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	603a      	str	r2, [r7, #0]
 8000cf0:	210d      	movs	r1, #13
 8000cf2:	187a      	adds	r2, r7, r1
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	7013      	strb	r3, [r2, #0]
        write8(u8);
 8000cf8:	2390      	movs	r3, #144	; 0x90
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	22e0      	movs	r2, #224	; 0xe0
 8000cfe:	04d2      	lsls	r2, r2, #19
 8000d00:	619a      	str	r2, [r3, #24]
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000d04:	2287      	movs	r2, #135	; 0x87
 8000d06:	04d2      	lsls	r2, r2, #19
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	0412      	lsls	r2, r2, #16
 8000d10:	619a      	str	r2, [r3, #24]
 8000d12:	0008      	movs	r0, r1
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	025a      	lsls	r2, r3, #9
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	183b      	adds	r3, r7, r0
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0219      	lsls	r1, r3, #8
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	183b      	adds	r3, r7, r0
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0059      	lsls	r1, r3, #1
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	400b      	ands	r3, r1
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	2390      	movs	r3, #144	; 0x90
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	183b      	adds	r3, r7, r0
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2208      	movs	r2, #8
 8000d48:	401a      	ands	r2, r3
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	400b      	ands	r3, r1
 8000d54:	431a      	orrs	r2, r3
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	105b      	asrs	r3, r3, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	400b      	ands	r3, r1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0119      	lsls	r1, r3, #4
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <WriteCmdParamN+0x2b4>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	400a      	ands	r2, r1
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	2390      	movs	r3, #144	; 0x90
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 fb07 	bl	80033a0 <HAL_GPIO_WritePin>
 8000d92:	2390      	movs	r3, #144	; 0x90
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2201      	movs	r2, #1
 8000d98:	2102      	movs	r1, #2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 fb00 	bl	80033a0 <HAL_GPIO_WritePin>
 8000da0:	2390      	movs	r3, #144	; 0x90
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	2201      	movs	r2, #1
 8000da6:	2102      	movs	r1, #2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 faf9 	bl	80033a0 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000dae:	1d7b      	adds	r3, r7, #5
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	3a01      	subs	r2, #1
 8000db8:	b2d1      	uxtb	r1, r2
 8000dba:	1d7a      	adds	r2, r7, #5
 8000dbc:	7011      	strb	r1, [r2, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dc93      	bgt.n	8000cea <WriteCmdParamN+0x1c2>
    }
    CS_IDLE;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <WriteCmdParamN+0x2b0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fae9 	bl	80033a0 <HAL_GPIO_WritePin>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b005      	add	sp, #20
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800

08000de0 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0005      	movs	r5, r0
 8000de8:	000c      	movs	r4, r1
 8000dea:	0010      	movs	r0, r2
 8000dec:	0019      	movs	r1, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	1c2a      	adds	r2, r5, #0
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1dbb      	adds	r3, r7, #6
 8000df6:	1c22      	adds	r2, r4, #0
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	1d7b      	adds	r3, r7, #5
 8000dfc:	1c02      	adds	r2, r0, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	1c0a      	adds	r2, r1, #0
 8000e04:	701a      	strb	r2, [r3, #0]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000e06:	210c      	movs	r1, #12
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	1dba      	adds	r2, r7, #6
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	1d7a      	adds	r2, r7, #5
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	705a      	strb	r2, [r3, #1]
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	1d3a      	adds	r2, r7, #4
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	709a      	strb	r2, [r3, #2]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2220      	movs	r2, #32
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	70da      	strb	r2, [r3, #3]
    WriteCmdParamN(cmd, 4, d);
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	2104      	movs	r1, #4
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fe77 	bl	8000b28 <WriteCmdParamN>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}

08000e42 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b08b      	sub	sp, #44	; 0x2c
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	000a      	movs	r2, r1
 8000e4c:	1cbb      	adds	r3, r7, #2
 8000e4e:	801a      	strh	r2, [r3, #0]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000e54:	e050      	b.n	8000ef8 <init_table+0xb6>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	627a      	str	r2, [r7, #36]	; 0x24
 8000e5c:	2121      	movs	r1, #33	; 0x21
 8000e5e:	187a      	adds	r2, r7, r1
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	7013      	strb	r3, [r2, #0]
        uint8_t len = pgm_read_byte(p++);
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	627a      	str	r2, [r7, #36]	; 0x24
 8000e6a:	2223      	movs	r2, #35	; 0x23
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	7013      	strb	r3, [r2, #0]
        if (cmd == TFTLCD_DELAY8)
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b7f      	cmp	r3, #127	; 0x7f
 8000e78:	d109      	bne.n	8000e8e <init_table+0x4c>
        {
            delay(len);
 8000e7a:	2423      	movs	r4, #35	; 0x23
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fbad 	bl	80005e0 <delay>
            len = 0;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e028      	b.n	8000ee0 <init_table+0x9e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000e8e:	2322      	movs	r3, #34	; 0x22
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e00e      	b.n	8000eb6 <init_table+0x74>
                dat[i] = pgm_read_byte(p++);
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8000e9e:	2022      	movs	r0, #34	; 0x22
 8000ea0:	183a      	adds	r2, r7, r0
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	7819      	ldrb	r1, [r3, #0]
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	5499      	strb	r1, [r3, r2]
            for (uint8_t i = 0; i < len; i++)
 8000eac:	183b      	adds	r3, r7, r0
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	183b      	adds	r3, r7, r0
 8000eb2:	3201      	adds	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	2322      	movs	r3, #34	; 0x22
 8000eb8:	18fa      	adds	r2, r7, r3
 8000eba:	2323      	movs	r3, #35	; 0x23
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e8      	bcc.n	8000e98 <init_table+0x56>
            WriteCmdParamN(cmd, len, dat);
 8000ec6:	2321      	movs	r3, #33	; 0x21
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b298      	uxth	r0, r3
 8000ece:	2323      	movs	r3, #35	; 0x23
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	0019      	movs	r1, r3
 8000edc:	f7ff fe24 	bl	8000b28 <WriteCmdParamN>
        }
        size -= len + 2;
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	2323      	movs	r3, #35	; 0x23
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3b02      	subs	r3, #2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	1cbb      	adds	r3, r7, #2
 8000ef6:	801a      	strh	r2, [r3, #0]
    while (size > 0)
 8000ef8:	1cbb      	adds	r3, r7, #2
 8000efa:	2200      	movs	r2, #0
 8000efc:	5e9b      	ldrsh	r3, [r3, r2]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dca9      	bgt.n	8000e56 <init_table+0x14>
    }
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b00b      	add	sp, #44	; 0x2c
 8000f08:	bd90      	pop	{r4, r7, pc}
	...

08000f0c <reset>:

void reset(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <reset+0x7c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000f16:	f7ff fc1b 	bl	8000750 <setWriteDir>
    CS_IDLE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <reset+0x80>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	0018      	movs	r0, r3
 8000f22:	f002 fa3d 	bl	80033a0 <HAL_GPIO_WritePin>
    RD_IDLE;
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fa36 	bl	80033a0 <HAL_GPIO_WritePin>
    WR_IDLE;
 8000f34:	2390      	movs	r3, #144	; 0x90
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f002 fa2f 	bl	80033a0 <HAL_GPIO_WritePin>
    RESET_IDLE;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <reset+0x84>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	2102      	movs	r1, #2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f002 fa29 	bl	80033a0 <HAL_GPIO_WritePin>
    delay(50);
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f7ff fb46 	bl	80005e0 <delay>
    RESET_ACTIVE;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <reset+0x84>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 fa20 	bl	80033a0 <HAL_GPIO_WritePin>
    delay(100);
 8000f60:	2064      	movs	r0, #100	; 0x64
 8000f62:	f7ff fb3d 	bl	80005e0 <delay>
    RESET_IDLE;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <reset+0x84>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f002 fa17 	bl	80033a0 <HAL_GPIO_WritePin>
    delay(100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f7ff fb34 	bl	80005e0 <delay>
	WriteCmdData(0xB0, 0x0000);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	20b0      	movs	r0, #176	; 0xb0
 8000f7c:	f7ff fb96 	bl	80006ac <WriteCmdData>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	20000036 	.word	0x20000036
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800

08000f94 <read16bits>:

static uint16_t read16bits(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000f9a:	2390      	movs	r3, #144	; 0x90
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 f9fc 	bl	80033a0 <HAL_GPIO_WritePin>
 8000fa8:	2390      	movs	r3, #144	; 0x90
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f002 f9f5 	bl	80033a0 <HAL_GPIO_WritePin>
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f002 f9ee 	bl	80033a0 <HAL_GPIO_WritePin>
 8000fc4:	2390      	movs	r3, #144	; 0x90
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2101      	movs	r1, #1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 f9e7 	bl	80033a0 <HAL_GPIO_WritePin>
 8000fd2:	2390      	movs	r3, #144	; 0x90
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	0a5b      	lsrs	r3, r3, #9
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b69      	ldr	r3, [pc, #420]	; (8001188 <read16bits+0x1f4>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	099b      	lsrs	r3, r3, #6
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2102      	movs	r1, #2
 8000fec:	400b      	ands	r3, r1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	2390      	movs	r3, #144	; 0x90
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	2104      	movs	r1, #4
 8001000:	400b      	ands	r3, r1
 8001002:	b29b      	uxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b60      	ldr	r3, [pc, #384]	; (800118c <read16bits+0x1f8>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	b29b      	uxth	r3, r3
 800100e:	2108      	movs	r1, #8
 8001010:	400b      	ands	r3, r1
 8001012:	b29b      	uxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <read16bits+0x1f8>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	b29b      	uxth	r3, r3
 8001020:	2110      	movs	r1, #16
 8001022:	400b      	ands	r3, r1
 8001024:	b29b      	uxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <read16bits+0x1f8>)
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	b29b      	uxth	r3, r3
 8001030:	18db      	adds	r3, r3, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	2120      	movs	r1, #32
 8001036:	400b      	ands	r3, r1
 8001038:	b29b      	uxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b53      	ldr	r3, [pc, #332]	; (800118c <read16bits+0x1f8>)
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	b29b      	uxth	r3, r3
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	400b      	ands	r3, r1
 800104a:	b29b      	uxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b299      	uxth	r1, r3
 8001050:	2390      	movs	r3, #144	; 0x90
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	b29b      	uxth	r3, r3
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	4013      	ands	r3, r2
 800105e:	b29a      	uxth	r2, r3
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	430a      	orrs	r2, r1
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	2390      	movs	r3, #144	; 0x90
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	2201      	movs	r2, #1
 800106c:	2101      	movs	r1, #1
 800106e:	0018      	movs	r0, r3
 8001070:	f002 f996 	bl	80033a0 <HAL_GPIO_WritePin>
 8001074:	2390      	movs	r3, #144	; 0x90
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	0018      	movs	r0, r3
 800107e:	f002 f98f 	bl	80033a0 <HAL_GPIO_WritePin>
    READ_8(lo);
 8001082:	2390      	movs	r3, #144	; 0x90
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2201      	movs	r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	0018      	movs	r0, r3
 800108c:	f002 f988 	bl	80033a0 <HAL_GPIO_WritePin>
 8001090:	2390      	movs	r3, #144	; 0x90
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f981 	bl	80033a0 <HAL_GPIO_WritePin>
 800109e:	2390      	movs	r3, #144	; 0x90
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	0018      	movs	r0, r3
 80010a8:	f002 f97a 	bl	80033a0 <HAL_GPIO_WritePin>
 80010ac:	2390      	movs	r3, #144	; 0x90
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 f973 	bl	80033a0 <HAL_GPIO_WritePin>
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	0a5b      	lsrs	r3, r3, #9
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <read16bits+0x1f4>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2102      	movs	r1, #2
 80010d4:	400b      	ands	r3, r1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	2390      	movs	r3, #144	; 0x90
 80010de:	05db      	lsls	r3, r3, #23
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2104      	movs	r1, #4
 80010e8:	400b      	ands	r3, r1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <read16bits+0x1f8>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2108      	movs	r1, #8
 80010f8:	400b      	ands	r3, r1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <read16bits+0x1f8>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	085b      	lsrs	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2110      	movs	r1, #16
 800110a:	400b      	ands	r3, r1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <read16bits+0x1f8>)
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	18db      	adds	r3, r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2120      	movs	r1, #32
 800111e:	400b      	ands	r3, r1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <read16bits+0x1f8>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	400b      	ands	r3, r1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b2d9      	uxtb	r1, r3
 8001138:	2390      	movs	r3, #144	; 0x90
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	227f      	movs	r2, #127	; 0x7f
 8001144:	4393      	bics	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	1d7b      	adds	r3, r7, #5
 800114a:	430a      	orrs	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	2390      	movs	r3, #144	; 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2201      	movs	r2, #1
 8001154:	2101      	movs	r1, #1
 8001156:	0018      	movs	r0, r3
 8001158:	f002 f922 	bl	80033a0 <HAL_GPIO_WritePin>
 800115c:	2390      	movs	r3, #144	; 0x90
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	0018      	movs	r0, r3
 8001166:	f002 f91b 	bl	80033a0 <HAL_GPIO_WritePin>
    return (ret << 8) | lo;
 800116a:	1dbb      	adds	r3, r7, #6
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	1d7b      	adds	r3, r7, #5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	48000800 	.word	0x48000800
 800118c:	48000400 	.word	0x48000400

08001190 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	801a      	strh	r2, [r3, #0]
 800119c:	1d7b      	adds	r3, r7, #5
 800119e:	1c0a      	adds	r2, r1, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    uint16_t ret;
    if (!done_reset)
 80011a2:	4b83      	ldr	r3, [pc, #524]	; (80013b0 <readReg+0x220>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <readReg+0x1e>
    {
        reset();
 80011aa:	f7ff feaf 	bl	8000f0c <reset>
    }

    CS_ACTIVE;
 80011ae:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <readReg+0x224>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 f8f3 	bl	80033a0 <HAL_GPIO_WritePin>
    WriteCmd(reg);
 80011ba:	2390      	movs	r3, #144	; 0x90
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	2200      	movs	r2, #0
 80011c0:	2110      	movs	r1, #16
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 f8ec 	bl	80033a0 <HAL_GPIO_WritePin>
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	210f      	movs	r1, #15
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	240e      	movs	r4, #14
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	1dba      	adds	r2, r7, #6
 80011dc:	8812      	ldrh	r2, [r2, #0]
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	2390      	movs	r3, #144	; 0x90
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	22e0      	movs	r2, #224	; 0xe0
 80011e6:	04d2      	lsls	r2, r2, #19
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <readReg+0x224>)
 80011ec:	2287      	movs	r2, #135	; 0x87
 80011ee:	04d2      	lsls	r2, r2, #19
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <readReg+0x228>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0412      	lsls	r2, r2, #16
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	0008      	movs	r0, r1
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	025a      	lsls	r2, r3, #9
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	401a      	ands	r2, r3
 8001208:	183b      	adds	r3, r7, r0
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0219      	lsls	r1, r3, #8
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	400b      	ands	r3, r1
 8001214:	431a      	orrs	r2, r3
 8001216:	183b      	adds	r3, r7, r0
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0059      	lsls	r1, r3, #1
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	400b      	ands	r3, r1
 8001222:	431a      	orrs	r2, r3
 8001224:	2390      	movs	r3, #144	; 0x90
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	183b      	adds	r3, r7, r0
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	401a      	ands	r2, r3
 8001232:	183b      	adds	r3, r7, r0
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2120      	movs	r1, #32
 800123a:	400b      	ands	r3, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	183b      	adds	r3, r7, r0
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	105b      	asrs	r3, r3, #1
 8001244:	2110      	movs	r1, #16
 8001246:	400b      	ands	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	183b      	adds	r3, r7, r0
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	0119      	lsls	r1, r3, #4
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	400b      	ands	r3, r1
 8001256:	431a      	orrs	r2, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <readReg+0x224>)
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	183b      	adds	r3, r7, r0
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	0019      	movs	r1, r3
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <readReg+0x228>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	400a      	ands	r2, r1
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	2390      	movs	r3, #144	; 0x90
 800126e:	05db      	lsls	r3, r3, #23
 8001270:	2200      	movs	r2, #0
 8001272:	2102      	movs	r1, #2
 8001274:	0018      	movs	r0, r3
 8001276:	f002 f893 	bl	80033a0 <HAL_GPIO_WritePin>
 800127a:	2390      	movs	r3, #144	; 0x90
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2201      	movs	r2, #1
 8001280:	2102      	movs	r1, #2
 8001282:	0018      	movs	r0, r3
 8001284:	f002 f88c 	bl	80033a0 <HAL_GPIO_WritePin>
 8001288:	2390      	movs	r3, #144	; 0x90
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	2201      	movs	r2, #1
 800128e:	2102      	movs	r1, #2
 8001290:	0018      	movs	r0, r3
 8001292:	f002 f885 	bl	80033a0 <HAL_GPIO_WritePin>
 8001296:	2390      	movs	r3, #144	; 0x90
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	22e0      	movs	r2, #224	; 0xe0
 800129c:	04d2      	lsls	r2, r2, #19
 800129e:	619a      	str	r2, [r3, #24]
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <readReg+0x224>)
 80012a2:	2287      	movs	r2, #135	; 0x87
 80012a4:	04d2      	lsls	r2, r2, #19
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <readReg+0x228>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0412      	lsls	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	025a      	lsls	r2, r3, #9
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	401a      	ands	r2, r3
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	0219      	lsls	r1, r3, #8
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	400b      	ands	r3, r1
 80012c8:	431a      	orrs	r2, r3
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	0059      	lsls	r1, r3, #1
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	400b      	ands	r3, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	2390      	movs	r3, #144	; 0x90
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	0020      	movs	r0, r4
 80012e0:	183b      	adds	r3, r7, r0
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2208      	movs	r2, #8
 80012e6:	401a      	ands	r2, r3
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2120      	movs	r1, #32
 80012f0:	400b      	ands	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	183b      	adds	r3, r7, r0
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	105b      	asrs	r3, r3, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	400b      	ands	r3, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	183b      	adds	r3, r7, r0
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0119      	lsls	r1, r3, #4
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	400b      	ands	r3, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <readReg+0x224>)
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	183b      	adds	r3, r7, r0
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	019b      	lsls	r3, r3, #6
 8001318:	0019      	movs	r1, r3
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <readReg+0x228>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	400a      	ands	r2, r1
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	2390      	movs	r3, #144	; 0x90
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	2200      	movs	r2, #0
 8001328:	2102      	movs	r1, #2
 800132a:	0018      	movs	r0, r3
 800132c:	f002 f838 	bl	80033a0 <HAL_GPIO_WritePin>
 8001330:	2390      	movs	r3, #144	; 0x90
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	0018      	movs	r0, r3
 800133a:	f002 f831 	bl	80033a0 <HAL_GPIO_WritePin>
 800133e:	2390      	movs	r3, #144	; 0x90
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	0018      	movs	r0, r3
 8001348:	f002 f82a 	bl	80033a0 <HAL_GPIO_WritePin>
 800134c:	2390      	movs	r3, #144	; 0x90
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	2201      	movs	r2, #1
 8001352:	2110      	movs	r1, #16
 8001354:	0018      	movs	r0, r3
 8001356:	f002 f823 	bl	80033a0 <HAL_GPIO_WritePin>
    setReadDir();
 800135a:	f7ff f9bd 	bl	80006d8 <setReadDir>
    delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff f93e 	bl	80005e0 <delay>

    do {
    	ret = read16bits();
 8001364:	230c      	movs	r3, #12
 8001366:	18fc      	adds	r4, r7, r3
 8001368:	f7ff fe14 	bl	8000f94 <read16bits>
 800136c:	0003      	movs	r3, r0
 800136e:	8023      	strh	r3, [r4, #0]
    } while (--index >= 0);
 8001370:	1d7b      	adds	r3, r7, #5
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	1d7b      	adds	r3, r7, #5
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	1d7b      	adds	r3, r7, #5
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d9ef      	bls.n	8001364 <readReg+0x1d4>

    RD_IDLE;
 8001384:	2390      	movs	r3, #144	; 0x90
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2201      	movs	r2, #1
 800138a:	2101      	movs	r1, #1
 800138c:	0018      	movs	r0, r3
 800138e:	f002 f807 	bl	80033a0 <HAL_GPIO_WritePin>
    CS_IDLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <readReg+0x224>)
 8001394:	2201      	movs	r2, #1
 8001396:	2101      	movs	r1, #1
 8001398:	0018      	movs	r0, r3
 800139a:	f002 f801 	bl	80033a0 <HAL_GPIO_WritePin>
    setWriteDir();
 800139e:	f7ff f9d7 	bl	8000750 <setWriteDir>
    return ret;
 80013a2:	230c      	movs	r3, #12
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	881b      	ldrh	r3, [r3, #0]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b005      	add	sp, #20
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000036 	.word	0x20000036
 80013b4:	48000400 	.word	0x48000400
 80013b8:	48000800 	.word	0x48000800

080013bc <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0002      	movs	r2, r0
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	801a      	strh	r2, [r3, #0]
    uint16_t h = readReg(reg, 0);
 80013c8:	250e      	movs	r5, #14
 80013ca:	197c      	adds	r4, r7, r5
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2100      	movs	r1, #0
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fedc 	bl	8001190 <readReg>
 80013d8:	0003      	movs	r3, r0
 80013da:	8023      	strh	r3, [r4, #0]
    uint16_t l = readReg(reg, 1);
 80013dc:	260c      	movs	r6, #12
 80013de:	19bc      	adds	r4, r7, r6
 80013e0:	1dbb      	adds	r3, r7, #6
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fed2 	bl	8001190 <readReg>
 80013ec:	0003      	movs	r3, r0
 80013ee:	8023      	strh	r3, [r4, #0]
    return ((uint32_t) h << 16) | (l);
 80013f0:	197b      	adds	r3, r7, r5
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	19bb      	adds	r3, r7, r6
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4313      	orrs	r3, r2
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b005      	add	sp, #20
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001404 <tft_init>:

void tft_init(uint16_t ID)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	0002      	movs	r2, r0
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	801a      	strh	r2, [r3, #0]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    int16_t table_size;

    _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <tft_init+0x94>)
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <tft_init+0x98>)
 8001418:	801a      	strh	r2, [r3, #0]
		0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B]
		// 3.2 TM  3.2 Inch Initial Code not bad
		0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00,
		0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,
	};
	table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <tft_init+0x9c>)
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	2312      	movs	r3, #18
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	223b      	movs	r2, #59	; 0x3b
 8001424:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_height;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <tft_init+0xa0>)
 8001428:	60fb      	str	r3, [r7, #12]
	*p16 = 320;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	22a0      	movs	r2, #160	; 0xa0
 800142e:	0052      	lsls	r2, r2, #1
 8001430:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_width;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <tft_init+0xa4>)
 8001434:	60fb      	str	r3, [r7, #12]
	*p16 = 480;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	22f0      	movs	r2, #240	; 0xf0
 800143a:	0052      	lsls	r2, r2, #1
 800143c:	801a      	strh	r2, [r3, #0]

    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <tft_init+0x94>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	001a      	movs	r2, r3
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	4013      	ands	r3, r2
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	4193      	sbcs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <tft_init+0xa8>)
 8001454:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d012      	beq.n	8001482 <tft_init+0x7e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <tft_init+0xac>)
 800145e:	2109      	movs	r1, #9
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fcee 	bl	8000e42 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001466:	2312      	movs	r3, #18
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2200      	movs	r2, #0
 800146c:	5e9a      	ldrsh	r2, [r3, r2]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	0011      	movs	r1, r2
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fce5 	bl	8000e42 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <tft_init+0xb0>)
 800147a:	2106      	movs	r1, #6
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fce0 	bl	8000e42 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f822 	bl	80014cc <setRotation>
    invertDisplay(false);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fb7d 	bl	8001b88 <invertDisplay>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b006      	add	sp, #24
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	2000008c 	.word	0x2000008c
 800149c:	00000403 	.word	0x00000403
 80014a0:	08004dac 	.word	0x08004dac
 80014a4:	20000006 	.word	0x20000006
 80014a8:	20000004 	.word	0x20000004
 80014ac:	20000090 	.word	0x20000090
 80014b0:	08004de8 	.word	0x08004de8
 80014b4:	08004df4 	.word	0x08004df4

080014b8 <readID>:

uint16_t readID(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    return readReg32(0xD3);
 80014bc:	20d3      	movs	r0, #211	; 0xd3
 80014be:	f7ff ff7d 	bl	80013bc <readReg32>
 80014c2:	0003      	movs	r3, r0
 80014c4:	b29b      	uxth	r3, r3
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <setRotation>:
        setAddrWindow(0, 0, width() - 1, height() - 1);
    return 0;
}

void setRotation(uint8_t r)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	0002      	movs	r2, r0
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	701a      	strb	r2, [r3, #0]
   uint16_t GS, SS_v, ORG;
   uint8_t val;
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b9f      	ldr	r3, [pc, #636]	; (8001760 <setRotation+0x294>)
 80014e4:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80014e6:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <setRotation+0x294>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	001a      	movs	r2, r3
 80014ec:	2301      	movs	r3, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	d002      	beq.n	80014f8 <setRotation+0x2c>
 80014f2:	23f0      	movs	r3, #240	; 0xf0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	e001      	b.n	80014fc <setRotation+0x30>
 80014f8:	23a0      	movs	r3, #160	; 0xa0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4a99      	ldr	r2, [pc, #612]	; (8001764 <setRotation+0x298>)
 80014fe:	8013      	strh	r3, [r2, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <setRotation+0x294>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	001a      	movs	r2, r3
 8001506:	2301      	movs	r3, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d002      	beq.n	8001512 <setRotation+0x46>
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	e001      	b.n	8001516 <setRotation+0x4a>
 8001512:	23f0      	movs	r3, #240	; 0xf0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4a94      	ldr	r2, [pc, #592]	; (8001768 <setRotation+0x29c>)
 8001518:	8013      	strh	r3, [r2, #0]
   switch (rotation) {
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <setRotation+0x294>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d00d      	beq.n	800153e <setRotation+0x72>
 8001522:	dc02      	bgt.n	800152a <setRotation+0x5e>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <setRotation+0x68>
 8001528:	e018      	b.n	800155c <setRotation+0x90>
 800152a:	2b02      	cmp	r3, #2
 800152c:	d00c      	beq.n	8001548 <setRotation+0x7c>
 800152e:	2b03      	cmp	r3, #3
 8001530:	d00f      	beq.n	8001552 <setRotation+0x86>
 8001532:	e013      	b.n	800155c <setRotation+0x90>
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001534:	230f      	movs	r3, #15
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2248      	movs	r2, #72	; 0x48
 800153a:	701a      	strb	r2, [r3, #0]
       break;
 800153c:	e00e      	b.n	800155c <setRotation+0x90>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800153e:	230f      	movs	r3, #15
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2228      	movs	r2, #40	; 0x28
 8001544:	701a      	strb	r2, [r3, #0]
       break;
 8001546:	e009      	b.n	800155c <setRotation+0x90>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001548:	230f      	movs	r3, #15
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2298      	movs	r2, #152	; 0x98
 800154e:	701a      	strb	r2, [r3, #0]
       break;
 8001550:	e004      	b.n	800155c <setRotation+0x90>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001552:	230f      	movs	r3, #15
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	22f8      	movs	r2, #248	; 0xf8
 8001558:	701a      	strb	r2, [r3, #0]
       break;
 800155a:	46c0      	nop			; (mov r8, r8)
   }
   if (_lcd_capable & INVERT_GS)
 800155c:	4b83      	ldr	r3, [pc, #524]	; (800176c <setRotation+0x2a0>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	001a      	movs	r2, r3
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4013      	ands	r3, r2
 8001568:	d008      	beq.n	800157c <setRotation+0xb0>
       val ^= 0x80;
 800156a:	210f      	movs	r1, #15
 800156c:	187b      	adds	r3, r7, r1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	4252      	negs	r2, r2
 8001574:	4053      	eors	r3, r2
 8001576:	b2da      	uxtb	r2, r3
 8001578:	187b      	adds	r3, r7, r1
 800157a:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_SS)
 800157c:	4b7b      	ldr	r3, [pc, #492]	; (800176c <setRotation+0x2a0>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	001a      	movs	r2, r3
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d007      	beq.n	800159a <setRotation+0xce>
       val ^= 0x40;
 800158a:	210f      	movs	r1, #15
 800158c:	187b      	adds	r3, r7, r1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	4053      	eors	r3, r2
 8001594:	b2da      	uxtb	r2, r3
 8001596:	187b      	adds	r3, r7, r1
 8001598:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_RGB)
 800159a:	4b74      	ldr	r3, [pc, #464]	; (800176c <setRotation+0x2a0>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	001a      	movs	r2, r3
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4013      	ands	r3, r2
 80015a6:	d007      	beq.n	80015b8 <setRotation+0xec>
       val ^= 0x08;
 80015a8:	210f      	movs	r1, #15
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2208      	movs	r2, #8
 80015b0:	4053      	eors	r3, r2
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80015b8:	4b6c      	ldr	r3, [pc, #432]	; (800176c <setRotation+0x2a0>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	001a      	movs	r2, r3
 80015be:	2301      	movs	r3, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d021      	beq.n	8001608 <setRotation+0x13c>
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <setRotation+0x2a4>)
 80015c6:	222a      	movs	r2, #42	; 0x2a
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	4b6a      	ldr	r3, [pc, #424]	; (8001774 <setRotation+0x2a8>)
 80015cc:	222b      	movs	r2, #43	; 0x2b
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <setRotation+0x2ac>)
 80015d2:	222c      	movs	r2, #44	; 0x2c
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	4b69      	ldr	r3, [pc, #420]	; (800177c <setRotation+0x2b0>)
 80015d8:	222a      	movs	r2, #42	; 0x2a
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <setRotation+0x2b4>)
 80015de:	222a      	movs	r2, #42	; 0x2a
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	4b68      	ldr	r3, [pc, #416]	; (8001784 <setRotation+0x2b8>)
 80015e4:	222b      	movs	r2, #43	; 0x2b
 80015e6:	801a      	strh	r2, [r3, #0]
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <setRotation+0x2bc>)
 80015ea:	222b      	movs	r2, #43	; 0x2b
 80015ec:	801a      	strh	r2, [r3, #0]
       WriteCmdParamN(0x36, 1, &val);
 80015ee:	240f      	movs	r4, #15
 80015f0:	193b      	adds	r3, r7, r4
 80015f2:	001a      	movs	r2, r3
 80015f4:	2101      	movs	r1, #1
 80015f6:	2036      	movs	r0, #54	; 0x36
 80015f8:	f7ff fa96 	bl	8000b28 <WriteCmdParamN>
       _lcd_madctl = val;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b62      	ldr	r3, [pc, #392]	; (800178c <setRotation+0x2c0>)
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	e05d      	b.n	80016c4 <setRotation+0x1f8>
   }
   else {
	   _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <setRotation+0x2a4>)
 800160a:	2220      	movs	r2, #32
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	4b59      	ldr	r3, [pc, #356]	; (8001774 <setRotation+0x2a8>)
 8001610:	2221      	movs	r2, #33	; 0x21
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <setRotation+0x2ac>)
 8001616:	2222      	movs	r2, #34	; 0x22
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <setRotation+0x2b0>)
 800161c:	2250      	movs	r2, #80	; 0x50
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <setRotation+0x2b4>)
 8001622:	2251      	movs	r2, #81	; 0x51
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <setRotation+0x2b8>)
 8001628:	2252      	movs	r2, #82	; 0x52
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	4b56      	ldr	r3, [pc, #344]	; (8001788 <setRotation+0x2bc>)
 800162e:	2253      	movs	r2, #83	; 0x53
 8001630:	801a      	strh	r2, [r3, #0]
	   GS = (val & 0x80) ? (1 << 15) : 0;
 8001632:	240f      	movs	r4, #15
 8001634:	193b      	adds	r3, r7, r4
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	2114      	movs	r1, #20
 800163e:	187b      	adds	r3, r7, r1
 8001640:	0bd2      	lsrs	r2, r2, #15
 8001642:	03d2      	lsls	r2, r2, #15
 8001644:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8001646:	187b      	adds	r3, r7, r1
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	229c      	movs	r2, #156	; 0x9c
 800164c:	0192      	lsls	r2, r2, #6
 800164e:	4313      	orrs	r3, r2
 8001650:	b29b      	uxth	r3, r3
 8001652:	0019      	movs	r1, r3
 8001654:	2060      	movs	r0, #96	; 0x60
 8001656:	f7ff f829 	bl	80006ac <WriteCmdData>

	   SS_v = (val & 0x40) ? (1 << 8) : 0;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	b299      	uxth	r1, r3
 8001662:	2012      	movs	r0, #18
 8001664:	183b      	adds	r3, r7, r0
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	0052      	lsls	r2, r2, #1
 800166a:	400a      	ands	r2, r1
 800166c:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x01, SS_v);     // set Driver Output Control
 800166e:	183b      	adds	r3, r7, r0
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	0019      	movs	r1, r3
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff f819 	bl	80006ac <WriteCmdData>

	   ORG = (val & 0x20) ? (1 << 3) : 0;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	109b      	asrs	r3, r3, #2
 8001680:	b29a      	uxth	r2, r3
 8001682:	2316      	movs	r3, #22
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2108      	movs	r1, #8
 8001688:	400a      	ands	r2, r1
 800168a:	801a      	strh	r2, [r3, #0]
	   if (val & 0x08)
 800168c:	193b      	adds	r3, r7, r4
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	001a      	movs	r2, r3
 8001692:	2308      	movs	r3, #8
 8001694:	4013      	ands	r3, r2
 8001696:	d007      	beq.n	80016a8 <setRotation+0x1dc>
		   ORG |= 0x1000;  //BGR
 8001698:	2216      	movs	r2, #22
 800169a:	18bb      	adds	r3, r7, r2
 800169c:	18ba      	adds	r2, r7, r2
 800169e:	8812      	ldrh	r2, [r2, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0149      	lsls	r1, r1, #5
 80016a4:	430a      	orrs	r2, r1
 80016a6:	801a      	strh	r2, [r3, #0]
	   _lcd_madctl = ORG | 0x0030;
 80016a8:	2316      	movs	r3, #22
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2230      	movs	r2, #48	; 0x30
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <setRotation+0x2c0>)
 80016b6:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <setRotation+0x2c0>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	0019      	movs	r1, r3
 80016be:	2003      	movs	r0, #3
 80016c0:	f7fe fff4 	bl	80006ac <WriteCmdData>
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <setRotation+0x294>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	2301      	movs	r3, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	d02b      	beq.n	8001728 <setRotation+0x25c>
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <setRotation+0x2a0>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	d124      	bne.n	8001728 <setRotation+0x25c>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80016de:	2110      	movs	r1, #16
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	4a23      	ldr	r2, [pc, #140]	; (8001770 <setRotation+0x2a4>)
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <setRotation+0x2a8>)
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <setRotation+0x2a4>)
 80016ee:	801a      	strh	r2, [r3, #0]
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <setRotation+0x2a8>)
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	8812      	ldrh	r2, [r2, #0]
 80016f6:	801a      	strh	r2, [r3, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	4a20      	ldr	r2, [pc, #128]	; (800177c <setRotation+0x2b0>)
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <setRotation+0x2b8>)
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <setRotation+0x2b0>)
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <setRotation+0x2b8>)
 800170a:	187a      	adds	r2, r7, r1
 800170c:	8812      	ldrh	r2, [r2, #0]
 800170e:	801a      	strh	r2, [r3, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001710:	187b      	adds	r3, r7, r1
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <setRotation+0x2b4>)
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	801a      	strh	r2, [r3, #0]
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <setRotation+0x2bc>)
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <setRotation+0x2b4>)
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <setRotation+0x2bc>)
 8001722:	187a      	adds	r2, r7, r1
 8001724:	8812      	ldrh	r2, [r2, #0]
 8001726:	801a      	strh	r2, [r3, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8001728:	f7fe ffac 	bl	8000684 <width>
 800172c:	0003      	movs	r3, r0
 800172e:	3b01      	subs	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21c      	sxth	r4, r3
 8001734:	f7fe ffb0 	bl	8000698 <height>
 8001738:	0003      	movs	r3, r0
 800173a:	3b01      	subs	r3, #1
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21b      	sxth	r3, r3
 8001740:	0022      	movs	r2, r4
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f86b 	bl	8001820 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800174a:	23f0      	movs	r3, #240	; 0xf0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2200      	movs	r2, #0
 8001750:	0019      	movs	r1, r3
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f92e 	bl	80019b4 <vertScroll>
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b007      	add	sp, #28
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000039 	.word	0x20000039
 8001764:	20000004 	.word	0x20000004
 8001768:	20000006 	.word	0x20000006
 800176c:	2000008c 	.word	0x2000008c
 8001770:	20000094 	.word	0x20000094
 8001774:	20000092 	.word	0x20000092
 8001778:	2000008a 	.word	0x2000008a
 800177c:	20000096 	.word	0x20000096
 8001780:	2000009c 	.word	0x2000009c
 8001784:	2000008e 	.word	0x2000008e
 8001788:	20000098 	.word	0x20000098
 800178c:	2000009e 	.word	0x2000009e

08001790 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	0004      	movs	r4, r0
 8001798:	0008      	movs	r0, r1
 800179a:	0011      	movs	r1, r2
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	1c22      	adds	r2, r4, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	1c02      	adds	r2, r0, #0
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	1c0a      	adds	r2, r1, #0
 80017ac:	801a      	strh	r2, [r3, #0]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	2200      	movs	r2, #0
 80017b2:	5e9b      	ldrsh	r3, [r3, r2]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db2c      	blt.n	8001812 <drawPixel+0x82>
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	5e9b      	ldrsh	r3, [r3, r2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db27      	blt.n	8001812 <drawPixel+0x82>
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	2400      	movs	r4, #0
 80017c6:	5f1c      	ldrsh	r4, [r3, r4]
 80017c8:	f7fe ff5c 	bl	8000684 <width>
 80017cc:	0003      	movs	r3, r0
 80017ce:	429c      	cmp	r4, r3
 80017d0:	da1f      	bge.n	8001812 <drawPixel+0x82>
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2400      	movs	r4, #0
 80017d6:	5f1c      	ldrsh	r4, [r3, r4]
 80017d8:	f7fe ff5e 	bl	8000698 <height>
 80017dc:	0003      	movs	r3, r0
 80017de:	429c      	cmp	r4, r3
 80017e0:	da17      	bge.n	8001812 <drawPixel+0x82>
       return;
   setAddrWindow(x, y, x, y);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2400      	movs	r4, #0
 80017e6:	5f1c      	ldrsh	r4, [r3, r4]
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	2200      	movs	r2, #0
 80017ec:	5e9a      	ldrsh	r2, [r3, r2]
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2100      	movs	r1, #0
 80017f2:	5e59      	ldrsh	r1, [r3, r1]
 80017f4:	1dbb      	adds	r3, r7, #6
 80017f6:	2000      	movs	r0, #0
 80017f8:	5e18      	ldrsh	r0, [r3, r0]
 80017fa:	0023      	movs	r3, r4
 80017fc:	f000 f810 	bl	8001820 <setAddrWindow>
   WriteCmdData(_MW, color);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <drawPixel+0x8c>)
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	1cbb      	adds	r3, r7, #2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	0019      	movs	r1, r3
 800180a:	0010      	movs	r0, r2
 800180c:	f7fe ff4e 	bl	80006ac <WriteCmdData>
 8001810:	e000      	b.n	8001814 <drawPixel+0x84>
       return;
 8001812:	46c0      	nop			; (mov r8, r8)
}
 8001814:	46bd      	mov	sp, r7
 8001816:	b003      	add	sp, #12
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	2000008a 	.word	0x2000008a

08001820 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
 8001826:	0005      	movs	r5, r0
 8001828:	000c      	movs	r4, r1
 800182a:	0010      	movs	r0, r2
 800182c:	0019      	movs	r1, r3
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	1c2a      	adds	r2, r5, #0
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	1c22      	adds	r2, r4, #0
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	1c02      	adds	r2, r0, #0
 800183e:	801a      	strh	r2, [r3, #0]
 8001840:	003b      	movs	r3, r7
 8001842:	1c0a      	adds	r2, r1, #0
 8001844:	801a      	strh	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <setAddrWindow+0x174>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	001a      	movs	r2, r3
 800184c:	2301      	movs	r3, #1
 800184e:	4013      	ands	r3, r2
 8001850:	d032      	beq.n	80018b8 <setAddrWindow+0x98>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8001852:	4b51      	ldr	r3, [pc, #324]	; (8001998 <setAddrWindow+0x178>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	2200      	movs	r2, #0
 800185c:	5e9b      	ldrsh	r3, [r3, r2]
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21b      	sxth	r3, r3
 8001862:	b2d9      	uxtb	r1, r3
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	2400      	movs	r4, #0
 800186e:	5f1b      	ldrsh	r3, [r3, r4]
 8001870:	121b      	asrs	r3, r3, #8
 8001872:	b21b      	sxth	r3, r3
 8001874:	b2dc      	uxtb	r4, r3
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	0023      	movs	r3, r4
 8001880:	f7ff faae 	bl	8000de0 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8001884:	4b45      	ldr	r3, [pc, #276]	; (800199c <setAddrWindow+0x17c>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b2d8      	uxtb	r0, r3
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	5e9b      	ldrsh	r3, [r3, r2]
 8001890:	121b      	asrs	r3, r3, #8
 8001892:	b21b      	sxth	r3, r3
 8001894:	b2d9      	uxtb	r1, r3
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	003b      	movs	r3, r7
 800189e:	2400      	movs	r4, #0
 80018a0:	5f1b      	ldrsh	r3, [r3, r4]
 80018a2:	121b      	asrs	r3, r3, #8
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	b2dc      	uxtb	r4, r3
 80018a8:	003b      	movs	r3, r7
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	0023      	movs	r3, r4
 80018b2:	f7ff fa95 	bl	8000de0 <WriteCmdParam4>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80018b6:	e068      	b.n	800198a <setAddrWindow+0x16a>
       WriteCmdData(_MC, x);
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <setAddrWindow+0x180>)
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	1dbb      	adds	r3, r7, #6
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0019      	movs	r1, r3
 80018c2:	0010      	movs	r0, r2
 80018c4:	f7fe fef2 	bl	80006ac <WriteCmdData>
       WriteCmdData(_MP, y);
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <setAddrWindow+0x184>)
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f7fe feea 	bl	80006ac <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 80018d8:	1dba      	adds	r2, r7, #6
 80018da:	1cbb      	adds	r3, r7, #2
 80018dc:	2100      	movs	r1, #0
 80018de:	5e52      	ldrsh	r2, [r2, r1]
 80018e0:	2100      	movs	r1, #0
 80018e2:	5e5b      	ldrsh	r3, [r3, r1]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <setAddrWindow+0xd8>
 80018e8:	1d3a      	adds	r2, r7, #4
 80018ea:	003b      	movs	r3, r7
 80018ec:	2100      	movs	r1, #0
 80018ee:	5e52      	ldrsh	r2, [r2, r1]
 80018f0:	2100      	movs	r1, #0
 80018f2:	5e5b      	ldrsh	r3, [r3, r1]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d048      	beq.n	800198a <setAddrWindow+0x16a>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <setAddrWindow+0x174>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	2320      	movs	r3, #32
 8001900:	4013      	ands	r3, r2
 8001902:	d022      	beq.n	800194a <setAddrWindow+0x12a>
               if (rotation & 1)
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <setAddrWindow+0x188>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	2301      	movs	r3, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d00e      	beq.n	800192e <setAddrWindow+0x10e>
                   y1 = y = (y1 << 8) | y;
 8001910:	003b      	movs	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	5e9b      	ldrsh	r3, [r3, r2]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b219      	sxth	r1, r3
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	1d3a      	adds	r2, r7, #4
 800191e:	8812      	ldrh	r2, [r2, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	003b      	movs	r3, r7
 8001926:	1d3a      	adds	r2, r7, #4
 8001928:	8812      	ldrh	r2, [r2, #0]
 800192a:	801a      	strh	r2, [r3, #0]
 800192c:	e00d      	b.n	800194a <setAddrWindow+0x12a>
                   x1 = x = (x1 << 8) | x;
 800192e:	1cbb      	adds	r3, r7, #2
 8001930:	2200      	movs	r2, #0
 8001932:	5e9b      	ldrsh	r3, [r3, r2]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b219      	sxth	r1, r3
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	1dba      	adds	r2, r7, #6
 800193c:	8812      	ldrh	r2, [r2, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	1dba      	adds	r2, r7, #6
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	801a      	strh	r2, [r3, #0]
           WriteCmdData(_SC, x);
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <setAddrWindow+0x178>)
 800194c:	881a      	ldrh	r2, [r3, #0]
 800194e:	1dbb      	adds	r3, r7, #6
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	0019      	movs	r1, r3
 8001954:	0010      	movs	r0, r2
 8001956:	f7fe fea9 	bl	80006ac <WriteCmdData>
           WriteCmdData(_SP, y);
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <setAddrWindow+0x17c>)
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	0019      	movs	r1, r3
 8001964:	0010      	movs	r0, r2
 8001966:	f7fe fea1 	bl	80006ac <WriteCmdData>
           WriteCmdData(_EC, x1);
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <setAddrWindow+0x18c>)
 800196c:	881a      	ldrh	r2, [r3, #0]
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	0019      	movs	r1, r3
 8001974:	0010      	movs	r0, r2
 8001976:	f7fe fe99 	bl	80006ac <WriteCmdData>
           WriteCmdData(_EP, y1);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <setAddrWindow+0x190>)
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	003b      	movs	r3, r7
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	0019      	movs	r1, r3
 8001984:	0010      	movs	r0, r2
 8001986:	f7fe fe91 	bl	80006ac <WriteCmdData>
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	2000008c 	.word	0x2000008c
 8001998:	20000096 	.word	0x20000096
 800199c:	2000008e 	.word	0x2000008e
 80019a0:	20000094 	.word	0x20000094
 80019a4:	20000092 	.word	0x20000092
 80019a8:	20000039 	.word	0x20000039
 80019ac:	2000009c 	.word	0x2000009c
 80019b0:	20000098 	.word	0x20000098

080019b4 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	0004      	movs	r4, r0
 80019bc:	0008      	movs	r0, r1
 80019be:	0011      	movs	r1, r2
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	1c22      	adds	r2, r4, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	1c02      	adds	r2, r0, #0
 80019ca:	801a      	strh	r2, [r3, #0]
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	1c0a      	adds	r2, r1, #0
 80019d0:	801a      	strh	r2, [r3, #0]
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	425b      	negs	r3, r3
 80019d8:	b29a      	uxth	r2, r3
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	33e1      	adds	r3, #225	; 0xe1
 80019e4:	33ff      	adds	r3, #255	; 0xff
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2316      	movs	r3, #22
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	801a      	strh	r2, [r3, #0]
    int16_t vsp;

	if (_lcd_ID == 0x9327) bfa += 32;
 80019ee:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <vertScroll+0x18c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4a54      	ldr	r2, [pc, #336]	; (8001b44 <vertScroll+0x190>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d106      	bne.n	8001a06 <vertScroll+0x52>
 80019f8:	2116      	movs	r1, #22
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	3320      	adds	r3, #32
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	801a      	strh	r2, [r3, #0]

	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	5e9a      	ldrsh	r2, [r3, r2]
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5e5b      	ldrsh	r3, [r3, r1]
 8001a12:	425b      	negs	r3, r3
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dd07      	ble.n	8001a28 <vertScroll+0x74>
 8001a18:	1cba      	adds	r2, r7, #2
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5e52      	ldrsh	r2, [r2, r1]
 8001a20:	2100      	movs	r1, #0
 8001a22:	5e5b      	ldrsh	r3, [r3, r1]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	db02      	blt.n	8001a2e <vertScroll+0x7a>
 8001a28:	1cbb      	adds	r3, r7, #2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
	vsp = top + offset; // vertical start position
 8001a2e:	1dbb      	adds	r3, r7, #6
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	1cbb      	adds	r3, r7, #2
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	18d3      	adds	r3, r2, r3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	801a      	strh	r2, [r3, #0]

	if (offset < 0)
 8001a40:	1cbb      	adds	r3, r7, #2
 8001a42:	2200      	movs	r2, #0
 8001a44:	5e9b      	ldrsh	r3, [r3, r2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da08      	bge.n	8001a5c <vertScroll+0xa8>
        vsp += scrollines;          //keep in unsigned range
 8001a4a:	2114      	movs	r1, #20
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1) {
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <vertScroll+0x194>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	001a      	movs	r2, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d056      	beq.n	8001b16 <vertScroll+0x162>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a6e:	121b      	asrs	r3, r3, #8
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	210c      	movs	r1, #12
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	701a      	strb	r2, [r3, #0]
        d[1] = top;
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	705a      	strb	r2, [r3, #1]
        d[2] = scrollines >> 8; //VSA
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	5e9b      	ldrsh	r3, [r3, r2]
 8001a8a:	121b      	asrs	r3, r3, #8
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	709a      	strb	r2, [r3, #2]
        d[3] = scrollines;
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	70da      	strb	r2, [r3, #3]
        d[4] = bfa >> 8;        //BFA
 8001a9e:	2016      	movs	r0, #22
 8001aa0:	183b      	adds	r3, r7, r0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8001aa6:	121b      	asrs	r3, r3, #8
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	711a      	strb	r2, [r3, #4]
        d[5] = bfa;
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	715a      	strb	r2, [r3, #5]
        WriteCmdParamN(0x33, 6, d);
 8001aba:	000c      	movs	r4, r1
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2106      	movs	r1, #6
 8001ac2:	2033      	movs	r0, #51	; 0x33
 8001ac4:	f7ff f830 	bl	8000b28 <WriteCmdParamN>
		d[0] = vsp >> 8;        //VSP
 8001ac8:	2014      	movs	r0, #20
 8001aca:	183b      	adds	r3, r7, r0
 8001acc:	2200      	movs	r2, #0
 8001ace:	5e9b      	ldrsh	r3, [r3, r2]
 8001ad0:	121b      	asrs	r3, r3, #8
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	0021      	movs	r1, r4
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	701a      	strb	r2, [r3, #0]
        d[1] = vsp;
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	705a      	strb	r2, [r3, #1]
        WriteCmdParamN(0x37, 2, d);
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	001a      	movs	r2, r3
 8001aea:	2102      	movs	r1, #2
 8001aec:	2037      	movs	r0, #55	; 0x37
 8001aee:	f7ff f81b 	bl	8000b28 <WriteCmdParamN>
		if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8001af2:	1cbb      	adds	r3, r7, #2
 8001af4:	2200      	movs	r2, #0
 8001af6:	5e9b      	ldrsh	r3, [r3, r2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d11d      	bne.n	8001b38 <vertScroll+0x184>
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <vertScroll+0x194>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	2301      	movs	r3, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d017      	beq.n	8001b38 <vertScroll+0x184>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2013      	movs	r0, #19
 8001b0e:	f7ff f80b 	bl	8000b28 <WriteCmdParamN>
		}
		return;
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	e010      	b.n	8001b38 <vertScroll+0x184>
    }

	// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
	WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <vertScroll+0x198>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	0019      	movs	r1, r3
 8001b22:	2061      	movs	r0, #97	; 0x61
 8001b24:	f7fe fdc2 	bl	80006ac <WriteCmdData>
	WriteCmdData(0x6A, vsp);        //VL#
 8001b28:	2314      	movs	r3, #20
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	0019      	movs	r1, r3
 8001b30:	206a      	movs	r0, #106	; 0x6a
 8001b32:	f7fe fdbb 	bl	80006ac <WriteCmdData>
 8001b36:	e000      	b.n	8001b3a <vertScroll+0x186>
		return;
 8001b38:	46c0      	nop			; (mov r8, r8)
}
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b007      	add	sp, #28
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	2000009a 	.word	0x2000009a
 8001b44:	00009327 	.word	0x00009327
 8001b48:	2000008c 	.word	0x2000008c
 8001b4c:	20000090 	.word	0x20000090

08001b50 <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	0002      	movs	r2, r0
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <fillScreen+0x30>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <fillScreen+0x34>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b219      	sxth	r1, r3
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	000b      	movs	r3, r1
 8001b70:	2100      	movs	r1, #0
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fb50 	bl	8002218 <fillRect>
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000004 	.word	0x20000004
 8001b84:	20000006 	.word	0x20000006

08001b88 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	0002      	movs	r2, r0
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	701a      	strb	r2, [r3, #0]
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <invertDisplay+0x68>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	4193      	sbcs	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4053      	eors	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <invertDisplay+0x6c>)
 8001bb6:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1)
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <invertDisplay+0x68>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d00c      	beq.n	8001bde <invertDisplay+0x56>
    {
		WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <invertDisplay+0x6c>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <invertDisplay+0x48>
 8001bcc:	2321      	movs	r3, #33	; 0x21
 8001bce:	e000      	b.n	8001bd2 <invertDisplay+0x4a>
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7fe ffa6 	bl	8000b28 <WriteCmdParamN>
        return;
 8001bdc:	e005      	b.n	8001bea <invertDisplay+0x62>
    }

    WriteCmdData(0x61, _lcd_rev);
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <invertDisplay+0x6c>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	0019      	movs	r1, r3
 8001be4:	2061      	movs	r0, #97	; 0x61
 8001be6:	f7fe fd61 	bl	80006ac <WriteCmdData>
}
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000008c 	.word	0x2000008c
 8001bf4:	20000090 	.word	0x20000090

08001bf8 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	0005      	movs	r5, r0
 8001c00:	000c      	movs	r4, r1
 8001c02:	0010      	movs	r0, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	1c2a      	adds	r2, r5, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	1c22      	adds	r2, r4, #0
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	1cbb      	adds	r3, r7, #2
 8001c14:	1c02      	adds	r2, r0, #0
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	003b      	movs	r3, r7
 8001c1a:	1c0a      	adds	r2, r1, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, 1, h, color);
 8001c1e:	1cbb      	adds	r3, r7, #2
 8001c20:	2200      	movs	r2, #0
 8001c22:	5e9a      	ldrsh	r2, [r3, r2]
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2100      	movs	r1, #0
 8001c28:	5e59      	ldrsh	r1, [r3, r1]
 8001c2a:	1dbb      	adds	r3, r7, #6
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	5e18      	ldrsh	r0, [r3, r0]
 8001c30:	003b      	movs	r3, r7
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	0013      	movs	r3, r2
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f000 faed 	bl	8002218 <fillRect>
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bdb0      	pop	{r4, r5, r7, pc}

08001c46 <writePixel>:
{
	fillRect(x, y, w, 1, color);
}

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	0004      	movs	r4, r0
 8001c4e:	0008      	movs	r0, r1
 8001c50:	0011      	movs	r1, r2
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	1c22      	adds	r2, r4, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	1c02      	adds	r2, r0, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	1cbb      	adds	r3, r7, #2
 8001c60:	1c0a      	adds	r2, r1, #0
 8001c62:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5e59      	ldrsh	r1, [r3, r1]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	2000      	movs	r0, #0
 8001c72:	5e1b      	ldrsh	r3, [r3, r0]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fd8b 	bl	8001790 <drawPixel>
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b003      	add	sp, #12
 8001c80:	bd90      	pop	{r4, r7, pc}

08001c82 <drawCircle>:
        writeLine(x0, y0, x1, y1, color);
    }
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001c82:	b5b0      	push	{r4, r5, r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	0005      	movs	r5, r0
 8001c8a:	000c      	movs	r4, r1
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	1dbb      	adds	r3, r7, #6
 8001c92:	1c2a      	adds	r2, r5, #0
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	1c22      	adds	r2, r4, #0
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	1cbb      	adds	r3, r7, #2
 8001c9e:	1c02      	adds	r2, r0, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	003b      	movs	r3, r7
 8001ca4:	1c0a      	adds	r2, r1, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	2316      	movs	r3, #22
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8001cb8:	2314      	movs	r3, #20
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8001cc0:	1cbb      	adds	r3, r7, #2
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	1c1a      	adds	r2, r3, #0
 8001cc6:	03d2      	lsls	r2, r2, #15
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	18db      	adds	r3, r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2312      	movs	r3, #18
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 8001cdc:	230e      	movs	r3, #14
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	1cba      	adds	r2, r7, #2
 8001ce2:	8812      	ldrh	r2, [r2, #0]
 8001ce4:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	1cbb      	adds	r3, r7, #2
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	18d3      	adds	r3, r2, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b219      	sxth	r1, r3
 8001cf4:	003b      	movs	r3, r7
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	1dbb      	adds	r3, r7, #6
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	5e1b      	ldrsh	r3, [r3, r0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff ffa1 	bl	8001c46 <writePixel>
    writePixel(x0  , y0-r, color);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	1cbb      	adds	r3, r7, #2
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b219      	sxth	r1, r3
 8001d12:	003b      	movs	r3, r7
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	1dbb      	adds	r3, r7, #6
 8001d18:	2000      	movs	r0, #0
 8001d1a:	5e1b      	ldrsh	r3, [r3, r0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ff92 	bl	8001c46 <writePixel>
    writePixel(x0+r, y0  , color);
 8001d22:	1dbb      	adds	r3, r7, #6
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	1cbb      	adds	r3, r7, #2
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	18d3      	adds	r3, r2, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b218      	sxth	r0, r3
 8001d30:	003b      	movs	r3, r7
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2100      	movs	r1, #0
 8001d38:	5e5b      	ldrsh	r3, [r3, r1]
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	f7ff ff83 	bl	8001c46 <writePixel>
    writePixel(x0-r, y0  , color);
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b218      	sxth	r0, r3
 8001d4e:	003b      	movs	r3, r7
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2100      	movs	r1, #0
 8001d56:	5e5b      	ldrsh	r3, [r3, r1]
 8001d58:	0019      	movs	r1, r3
 8001d5a:	f7ff ff74 	bl	8001c46 <writePixel>

    while (x<y) {
 8001d5e:	e0d1      	b.n	8001f04 <drawCircle+0x282>
        if (f >= 0) {
 8001d60:	2316      	movs	r3, #22
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	5e9b      	ldrsh	r3, [r3, r2]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db18      	blt.n	8001d9e <drawCircle+0x11c>
            y--;
 8001d6c:	210e      	movs	r1, #14
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	5e9b      	ldrsh	r3, [r3, r2]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8001d7e:	2112      	movs	r1, #18
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	3302      	adds	r3, #2
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 8001d8c:	2016      	movs	r0, #22
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8001d9e:	2110      	movs	r1, #16
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2200      	movs	r2, #0
 8001da4:	5e9b      	ldrsh	r3, [r3, r2]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8001db0:	2014      	movs	r0, #20
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	3302      	adds	r3, #2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 8001dbe:	2416      	movs	r4, #22
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	000c      	movs	r4, r1
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b218      	sxth	r0, r3
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	250e      	movs	r5, #14
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b219      	sxth	r1, r3
 8001df0:	003b      	movs	r3, r7
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	001a      	movs	r2, r3
 8001df6:	f7ff ff26 	bl	8001c46 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b218      	sxth	r0, r3
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	197b      	adds	r3, r7, r5
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b219      	sxth	r1, r3
 8001e16:	003b      	movs	r3, r7
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	f7ff ff13 	bl	8001c46 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8001e20:	1dbb      	adds	r3, r7, #6
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b218      	sxth	r0, r3
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b219      	sxth	r1, r3
 8001e3c:	003b      	movs	r3, r7
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	f7ff ff00 	bl	8001c46 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8001e46:	1dbb      	adds	r3, r7, #6
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b218      	sxth	r0, r3
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b219      	sxth	r1, r3
 8001e62:	003b      	movs	r3, r7
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	001a      	movs	r2, r3
 8001e68:	f7ff feed 	bl	8001c46 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	197b      	adds	r3, r7, r5
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b218      	sxth	r0, r3
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b219      	sxth	r1, r3
 8001e88:	003b      	movs	r3, r7
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	f7ff feda 	bl	8001c46 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8001e92:	1dbb      	adds	r3, r7, #6
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	197b      	adds	r3, r7, r5
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b218      	sxth	r0, r3
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b219      	sxth	r1, r3
 8001eae:	003b      	movs	r3, r7
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	f7ff fec7 	bl	8001c46 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8001eb8:	1dbb      	adds	r3, r7, #6
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	197b      	adds	r3, r7, r5
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b218      	sxth	r0, r3
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b219      	sxth	r1, r3
 8001ed4:	003b      	movs	r3, r7
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	001a      	movs	r2, r3
 8001eda:	f7ff feb4 	bl	8001c46 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8001ede:	1dbb      	adds	r3, r7, #6
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	197b      	adds	r3, r7, r5
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b218      	sxth	r0, r3
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	881a      	ldrh	r2, [r3, #0]
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b219      	sxth	r1, r3
 8001efa:	003b      	movs	r3, r7
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	001a      	movs	r2, r3
 8001f00:	f7ff fea1 	bl	8001c46 <writePixel>
    while (x<y) {
 8001f04:	2310      	movs	r3, #16
 8001f06:	18fa      	adds	r2, r7, r3
 8001f08:	230e      	movs	r3, #14
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5e52      	ldrsh	r2, [r2, r1]
 8001f10:	2100      	movs	r1, #0
 8001f12:	5e5b      	ldrsh	r3, [r3, r1]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	da00      	bge.n	8001f1a <drawCircle+0x298>
 8001f18:	e722      	b.n	8001d60 <drawCircle+0xde>
    }
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b006      	add	sp, #24
 8001f20:	bdb0      	pop	{r4, r5, r7, pc}

08001f22 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001f22:	b5b0      	push	{r4, r5, r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af02      	add	r7, sp, #8
 8001f28:	0005      	movs	r5, r0
 8001f2a:	000c      	movs	r4, r1
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	1c2a      	adds	r2, r5, #0
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	1c22      	adds	r2, r4, #0
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	1cbb      	adds	r3, r7, #2
 8001f3e:	1c02      	adds	r2, r0, #0
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	003b      	movs	r3, r7
 8001f44:	1c0a      	adds	r2, r1, #0
 8001f46:	801a      	strh	r2, [r3, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	1cbb      	adds	r3, r7, #2
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b219      	sxth	r1, r3
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	18db      	adds	r3, r3, r3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	003b      	movs	r3, r7
 8001f66:	881c      	ldrh	r4, [r3, #0]
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	5e18      	ldrsh	r0, [r3, r0]
 8001f6e:	0023      	movs	r3, r4
 8001f70:	f7ff fe42 	bl	8001bf8 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8001f74:	1cbb      	adds	r3, r7, #2
 8001f76:	2200      	movs	r2, #0
 8001f78:	5e9a      	ldrsh	r2, [r3, r2]
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5e59      	ldrsh	r1, [r3, r1]
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	2000      	movs	r0, #0
 8001f84:	5e18      	ldrsh	r0, [r3, r0]
 8001f86:	003b      	movs	r3, r7
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2303      	movs	r3, #3
 8001f92:	f000 f804 	bl	8001f9e <fillCircleHelper>
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}

08001f9e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8001f9e:	b5b0      	push	{r4, r5, r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	0005      	movs	r5, r0
 8001fa6:	000c      	movs	r4, r1
 8001fa8:	0010      	movs	r0, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	1dbb      	adds	r3, r7, #6
 8001fae:	1c2a      	adds	r2, r5, #0
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	1c22      	adds	r2, r4, #0
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	1cbb      	adds	r3, r7, #2
 8001fba:	1c02      	adds	r2, r0, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	1c7b      	adds	r3, r7, #1
 8001fc0:	1c0a      	adds	r2, r1, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 8001fc4:	1cbb      	adds	r3, r7, #2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	2316      	movs	r3, #22
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8001fdc:	1cbb      	adds	r3, r7, #2
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	1c1a      	adds	r2, r3, #0
 8001fe2:	03d2      	lsls	r2, r2, #15
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	18db      	adds	r3, r3, r3
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	2312      	movs	r3, #18
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8001ff8:	200e      	movs	r0, #14
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	1cba      	adds	r2, r7, #2
 8001ffe:	8812      	ldrh	r2, [r2, #0]
 8002000:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 8002002:	230c      	movs	r3, #12
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	187a      	adds	r2, r7, r1
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 800200c:	230a      	movs	r3, #10
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	183a      	adds	r2, r7, r0
 8002012:	8812      	ldrh	r2, [r2, #0]
 8002014:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 8002016:	2128      	movs	r1, #40	; 0x28
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2200      	movs	r2, #0
 800201c:	5e9b      	ldrsh	r3, [r3, r2]
 800201e:	b29b      	uxth	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	187b      	adds	r3, r7, r1
 8002026:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 8002028:	e0e7      	b.n	80021fa <fillCircleHelper+0x25c>
        if (f >= 0) {
 800202a:	2316      	movs	r3, #22
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2200      	movs	r2, #0
 8002030:	5e9b      	ldrsh	r3, [r3, r2]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db18      	blt.n	8002068 <fillCircleHelper+0xca>
            y--;
 8002036:	210e      	movs	r1, #14
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	5e9b      	ldrsh	r3, [r3, r2]
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	187b      	adds	r3, r7, r1
 8002046:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002048:	2112      	movs	r1, #18
 800204a:	187b      	adds	r3, r7, r1
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	3302      	adds	r3, #2
 8002050:	b29a      	uxth	r2, r3
 8002052:	187b      	adds	r3, r7, r1
 8002054:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8002056:	2016      	movs	r0, #22
 8002058:	183b      	adds	r3, r7, r0
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	187b      	adds	r3, r7, r1
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	b29a      	uxth	r2, r3
 8002064:	183b      	adds	r3, r7, r0
 8002066:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002068:	2110      	movs	r1, #16
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2200      	movs	r2, #0
 800206e:	5e9b      	ldrsh	r3, [r3, r2]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	187b      	adds	r3, r7, r1
 8002078:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 800207a:	2014      	movs	r0, #20
 800207c:	183b      	adds	r3, r7, r0
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	3302      	adds	r3, #2
 8002082:	b29a      	uxth	r2, r3
 8002084:	183b      	adds	r3, r7, r0
 8002086:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002088:	2416      	movs	r4, #22
 800208a:	193b      	adds	r3, r7, r4
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	183b      	adds	r3, r7, r0
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	18d3      	adds	r3, r2, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	193b      	adds	r3, r7, r4
 8002098:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800209a:	187b      	adds	r3, r7, r1
 800209c:	2200      	movs	r2, #0
 800209e:	5e9a      	ldrsh	r2, [r3, r2]
 80020a0:	230e      	movs	r3, #14
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	5e5b      	ldrsh	r3, [r3, r1]
 80020a8:	3301      	adds	r3, #1
 80020aa:	429a      	cmp	r2, r3
 80020ac:	da47      	bge.n	800213e <fillCircleHelper+0x1a0>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80020ae:	1c7b      	adds	r3, r7, #1
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d01e      	beq.n	80020f6 <fillCircleHelper+0x158>
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	2310      	movs	r3, #16
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	18d3      	adds	r3, r2, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b218      	sxth	r0, r3
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	240e      	movs	r4, #14
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b219      	sxth	r1, r3
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	18db      	adds	r3, r3, r3
 80020de:	b29a      	uxth	r2, r3
 80020e0:	2328      	movs	r3, #40	; 0x28
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	18d3      	adds	r3, r2, r3
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	232c      	movs	r3, #44	; 0x2c
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	f7ff fd81 	bl	8001bf8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80020f6:	1c7b      	adds	r3, r7, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d01e      	beq.n	800213e <fillCircleHelper+0x1a0>
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	2310      	movs	r3, #16
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	b218      	sxth	r0, r3
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	240e      	movs	r4, #14
 8002116:	193b      	adds	r3, r7, r4
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b29b      	uxth	r3, r3
 800211e:	b219      	sxth	r1, r3
 8002120:	193b      	adds	r3, r7, r4
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	18db      	adds	r3, r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	2328      	movs	r3, #40	; 0x28
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	232c      	movs	r3, #44	; 0x2c
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f7ff fd5d 	bl	8001bf8 <drawFastVLine>
        }
        if(y != py) {
 800213e:	230e      	movs	r3, #14
 8002140:	18fa      	adds	r2, r7, r3
 8002142:	230a      	movs	r3, #10
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2100      	movs	r1, #0
 8002148:	5e52      	ldrsh	r2, [r2, r1]
 800214a:	2100      	movs	r1, #0
 800214c:	5e5b      	ldrsh	r3, [r3, r1]
 800214e:	429a      	cmp	r2, r3
 8002150:	d04d      	beq.n	80021ee <fillCircleHelper+0x250>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8002152:	1c7b      	adds	r3, r7, #1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	d01e      	beq.n	800219a <fillCircleHelper+0x1fc>
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	230a      	movs	r3, #10
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	b29b      	uxth	r3, r3
 800216a:	b218      	sxth	r0, r3
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	240c      	movs	r4, #12
 8002172:	193b      	adds	r3, r7, r4
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	b219      	sxth	r1, r3
 800217c:	193b      	adds	r3, r7, r4
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	18db      	adds	r3, r3, r3
 8002182:	b29a      	uxth	r2, r3
 8002184:	2328      	movs	r3, #40	; 0x28
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21a      	sxth	r2, r3
 8002190:	232c      	movs	r3, #44	; 0x2c
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	f7ff fd2f 	bl	8001bf8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800219a:	1c7b      	adds	r3, r7, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d01e      	beq.n	80021e2 <fillCircleHelper+0x244>
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	230a      	movs	r3, #10
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b218      	sxth	r0, r3
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	240c      	movs	r4, #12
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b219      	sxth	r1, r3
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	18db      	adds	r3, r3, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2328      	movs	r3, #40	; 0x28
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	232c      	movs	r3, #44	; 0x2c
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f7ff fd0b 	bl	8001bf8 <drawFastVLine>
            py = y;
 80021e2:	230a      	movs	r3, #10
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	220e      	movs	r2, #14
 80021e8:	18ba      	adds	r2, r7, r2
 80021ea:	8812      	ldrh	r2, [r2, #0]
 80021ec:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 80021ee:	230c      	movs	r3, #12
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2210      	movs	r2, #16
 80021f4:	18ba      	adds	r2, r7, r2
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 80021fa:	2310      	movs	r3, #16
 80021fc:	18fa      	adds	r2, r7, r3
 80021fe:	230e      	movs	r3, #14
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2100      	movs	r1, #0
 8002204:	5e52      	ldrsh	r2, [r2, r1]
 8002206:	2100      	movs	r1, #0
 8002208:	5e5b      	ldrsh	r3, [r3, r1]
 800220a:	429a      	cmp	r2, r3
 800220c:	da00      	bge.n	8002210 <fillCircleHelper+0x272>
 800220e:	e70c      	b.n	800202a <fillCircleHelper+0x8c>
    }
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b006      	add	sp, #24
 8002216:	bdb0      	pop	{r4, r5, r7, pc}

08002218 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	0005      	movs	r5, r0
 8002220:	000c      	movs	r4, r1
 8002222:	0010      	movs	r0, r2
 8002224:	0019      	movs	r1, r3
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	1c2a      	adds	r2, r5, #0
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	1c22      	adds	r2, r4, #0
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	1cbb      	adds	r3, r7, #2
 8002234:	1c02      	adds	r2, r0, #0
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	003b      	movs	r3, r7
 800223a:	1c0a      	adds	r2, r1, #0
 800223c:	801a      	strh	r2, [r3, #0]
    int16_t end;
    if (w < 0) {
 800223e:	1cbb      	adds	r3, r7, #2
 8002240:	2200      	movs	r2, #0
 8002242:	5e9b      	ldrsh	r3, [r3, r2]
 8002244:	2b00      	cmp	r3, #0
 8002246:	da0d      	bge.n	8002264 <fillRect+0x4c>
        w = -w;
 8002248:	1cbb      	adds	r3, r7, #2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	425b      	negs	r3, r3
 800224e:	b29a      	uxth	r2, r3
 8002250:	1cbb      	adds	r3, r7, #2
 8002252:	801a      	strh	r2, [r3, #0]
        x -= w;
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	1cbb      	adds	r3, r7, #2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	b29a      	uxth	r2, r3
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	801a      	strh	r2, [r3, #0]
    }                           //+ve w
    end = x + w;
 8002264:	1dbb      	adds	r3, r7, #6
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	b29a      	uxth	r2, r3
 8002270:	230e      	movs	r3, #14
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	801a      	strh	r2, [r3, #0]
    if (x < 0)
 8002276:	1dbb      	adds	r3, r7, #6
 8002278:	2200      	movs	r2, #0
 800227a:	5e9b      	ldrsh	r3, [r3, r2]
 800227c:	2b00      	cmp	r3, #0
 800227e:	da02      	bge.n	8002286 <fillRect+0x6e>
        x = 0;
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	2200      	movs	r2, #0
 8002284:	801a      	strh	r2, [r3, #0]
    if (end > width())
 8002286:	230e      	movs	r3, #14
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2400      	movs	r4, #0
 800228c:	5f1c      	ldrsh	r4, [r3, r4]
 800228e:	f7fe f9f9 	bl	8000684 <width>
 8002292:	0003      	movs	r3, r0
 8002294:	429c      	cmp	r4, r3
 8002296:	dd06      	ble.n	80022a6 <fillRect+0x8e>
        end = width();
 8002298:	f7fe f9f4 	bl	8000684 <width>
 800229c:	0003      	movs	r3, r0
 800229e:	001a      	movs	r2, r3
 80022a0:	230e      	movs	r3, #14
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	801a      	strh	r2, [r3, #0]
    w = end - x;
 80022a6:	230e      	movs	r3, #14
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	1dbb      	adds	r3, r7, #6
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	1cbb      	adds	r3, r7, #2
 80022b6:	801a      	strh	r2, [r3, #0]
    if (h < 0) {
 80022b8:	003b      	movs	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	5e9b      	ldrsh	r3, [r3, r2]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da0d      	bge.n	80022de <fillRect+0xc6>
        h = -h;
 80022c2:	003b      	movs	r3, r7
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	425b      	negs	r3, r3
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	003b      	movs	r3, r7
 80022cc:	801a      	strh	r2, [r3, #0]
        y -= h;
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	003b      	movs	r3, r7
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b29a      	uxth	r2, r3
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	801a      	strh	r2, [r3, #0]
    }                           //+ve h
    end = y + h;
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	003b      	movs	r3, r7
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	230e      	movs	r3, #14
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	801a      	strh	r2, [r3, #0]
    if (y < 0)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	5e9b      	ldrsh	r3, [r3, r2]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da02      	bge.n	8002300 <fillRect+0xe8>
        y = 0;
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	801a      	strh	r2, [r3, #0]
    if (end > height())
 8002300:	230e      	movs	r3, #14
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2400      	movs	r4, #0
 8002306:	5f1c      	ldrsh	r4, [r3, r4]
 8002308:	f7fe f9c6 	bl	8000698 <height>
 800230c:	0003      	movs	r3, r0
 800230e:	429c      	cmp	r4, r3
 8002310:	dd06      	ble.n	8002320 <fillRect+0x108>
        end = height();
 8002312:	f7fe f9c1 	bl	8000698 <height>
 8002316:	0003      	movs	r3, r0
 8002318:	001a      	movs	r2, r3
 800231a:	230e      	movs	r3, #14
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	801a      	strh	r2, [r3, #0]
    h = end - y;
 8002320:	230e      	movs	r3, #14
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b29a      	uxth	r2, r3
 800232e:	003b      	movs	r3, r7
 8002330:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	1cbb      	adds	r3, r7, #2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	b21c      	sxth	r4, r3
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	003b      	movs	r3, r7
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21a      	sxth	r2, r3
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2100      	movs	r1, #0
 800235a:	5e59      	ldrsh	r1, [r3, r1]
 800235c:	1dbb      	adds	r3, r7, #6
 800235e:	2000      	movs	r0, #0
 8002360:	5e18      	ldrsh	r0, [r3, r0]
 8002362:	0013      	movs	r3, r2
 8002364:	0022      	movs	r2, r4
 8002366:	f7ff fa5b 	bl	8001820 <setAddrWindow>
    CS_ACTIVE;
 800236a:	4b7c      	ldr	r3, [pc, #496]	; (800255c <fillRect+0x344>)
 800236c:	2200      	movs	r2, #0
 800236e:	2101      	movs	r1, #1
 8002370:	0018      	movs	r0, r3
 8002372:	f001 f815 	bl	80033a0 <HAL_GPIO_WritePin>
    WriteCmd(_MW);
 8002376:	2390      	movs	r3, #144	; 0x90
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	2200      	movs	r2, #0
 800237c:	2110      	movs	r1, #16
 800237e:	0018      	movs	r0, r3
 8002380:	f001 f80e 	bl	80033a0 <HAL_GPIO_WritePin>
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <fillRect+0x348>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29a      	uxth	r2, r3
 800238c:	210d      	movs	r1, #13
 800238e:	187b      	adds	r3, r7, r1
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <fillRect+0x348>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	240c      	movs	r4, #12
 8002398:	193b      	adds	r3, r7, r4
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	2390      	movs	r3, #144	; 0x90
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	22e0      	movs	r2, #224	; 0xe0
 80023a2:	04d2      	lsls	r2, r2, #19
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <fillRect+0x344>)
 80023a8:	2287      	movs	r2, #135	; 0x87
 80023aa:	04d2      	lsls	r2, r2, #19
 80023ac:	619a      	str	r2, [r3, #24]
 80023ae:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <fillRect+0x34c>)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0412      	lsls	r2, r2, #16
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	0008      	movs	r0, r1
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	025a      	lsls	r2, r3, #9
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	401a      	ands	r2, r3
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	0219      	lsls	r1, r3, #8
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	0059      	lsls	r1, r3, #1
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	400b      	ands	r3, r1
 80023de:	431a      	orrs	r2, r3
 80023e0:	2390      	movs	r3, #144	; 0x90
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	401a      	ands	r2, r3
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2120      	movs	r1, #32
 80023f6:	400b      	ands	r3, r1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	105b      	asrs	r3, r3, #1
 8002400:	2110      	movs	r1, #16
 8002402:	400b      	ands	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	183b      	adds	r3, r7, r0
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	0119      	lsls	r1, r3, #4
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	400b      	ands	r3, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <fillRect+0x344>)
 8002416:	619a      	str	r2, [r3, #24]
 8002418:	183b      	adds	r3, r7, r0
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	0019      	movs	r1, r3
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <fillRect+0x34c>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	400a      	ands	r2, r1
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	2390      	movs	r3, #144	; 0x90
 800242a:	05db      	lsls	r3, r3, #23
 800242c:	2200      	movs	r2, #0
 800242e:	2102      	movs	r1, #2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 ffb5 	bl	80033a0 <HAL_GPIO_WritePin>
 8002436:	2390      	movs	r3, #144	; 0x90
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	2201      	movs	r2, #1
 800243c:	2102      	movs	r1, #2
 800243e:	0018      	movs	r0, r3
 8002440:	f000 ffae 	bl	80033a0 <HAL_GPIO_WritePin>
 8002444:	2390      	movs	r3, #144	; 0x90
 8002446:	05db      	lsls	r3, r3, #23
 8002448:	2201      	movs	r2, #1
 800244a:	2102      	movs	r1, #2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 ffa7 	bl	80033a0 <HAL_GPIO_WritePin>
 8002452:	2390      	movs	r3, #144	; 0x90
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	22e0      	movs	r2, #224	; 0xe0
 8002458:	04d2      	lsls	r2, r2, #19
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <fillRect+0x344>)
 800245e:	2287      	movs	r2, #135	; 0x87
 8002460:	04d2      	lsls	r2, r2, #19
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <fillRect+0x34c>)
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	0412      	lsls	r2, r2, #16
 800246a:	619a      	str	r2, [r3, #24]
 800246c:	193b      	adds	r3, r7, r4
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	025a      	lsls	r2, r3, #9
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	401a      	ands	r2, r3
 8002478:	193b      	adds	r3, r7, r4
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	0219      	lsls	r1, r3, #8
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	400b      	ands	r3, r1
 8002484:	431a      	orrs	r2, r3
 8002486:	193b      	adds	r3, r7, r4
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	0059      	lsls	r1, r3, #1
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	400b      	ands	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	2390      	movs	r3, #144	; 0x90
 8002496:	05db      	lsls	r3, r3, #23
 8002498:	619a      	str	r2, [r3, #24]
 800249a:	0020      	movs	r0, r4
 800249c:	183b      	adds	r3, r7, r0
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2208      	movs	r2, #8
 80024a2:	401a      	ands	r2, r3
 80024a4:	183b      	adds	r3, r7, r0
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2120      	movs	r1, #32
 80024ac:	400b      	ands	r3, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	183b      	adds	r3, r7, r0
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	105b      	asrs	r3, r3, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	400b      	ands	r3, r1
 80024ba:	431a      	orrs	r2, r3
 80024bc:	183b      	adds	r3, r7, r0
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	0119      	lsls	r1, r3, #4
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	400b      	ands	r3, r1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <fillRect+0x344>)
 80024cc:	619a      	str	r2, [r3, #24]
 80024ce:	183b      	adds	r3, r7, r0
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	019b      	lsls	r3, r3, #6
 80024d4:	0019      	movs	r1, r3
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <fillRect+0x34c>)
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	400a      	ands	r2, r1
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	2390      	movs	r3, #144	; 0x90
 80024e0:	05db      	lsls	r3, r3, #23
 80024e2:	2200      	movs	r2, #0
 80024e4:	2102      	movs	r1, #2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 ff5a 	bl	80033a0 <HAL_GPIO_WritePin>
 80024ec:	2390      	movs	r3, #144	; 0x90
 80024ee:	05db      	lsls	r3, r3, #23
 80024f0:	2201      	movs	r2, #1
 80024f2:	2102      	movs	r1, #2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 ff53 	bl	80033a0 <HAL_GPIO_WritePin>
 80024fa:	2390      	movs	r3, #144	; 0x90
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	2201      	movs	r2, #1
 8002500:	2102      	movs	r1, #2
 8002502:	0018      	movs	r0, r3
 8002504:	f000 ff4c 	bl	80033a0 <HAL_GPIO_WritePin>
 8002508:	2390      	movs	r3, #144	; 0x90
 800250a:	05db      	lsls	r3, r3, #23
 800250c:	2201      	movs	r2, #1
 800250e:	2110      	movs	r1, #16
 8002510:	0018      	movs	r0, r3
 8002512:	f000 ff45 	bl	80033a0 <HAL_GPIO_WritePin>
    if (h > w) {
 8002516:	003a      	movs	r2, r7
 8002518:	1cbb      	adds	r3, r7, #2
 800251a:	2100      	movs	r1, #0
 800251c:	5e52      	ldrsh	r2, [r2, r1]
 800251e:	2100      	movs	r1, #0
 8002520:	5e5b      	ldrsh	r3, [r3, r1]
 8002522:	429a      	cmp	r2, r3
 8002524:	dd0c      	ble.n	8002540 <fillRect+0x328>
        end = h;
 8002526:	210e      	movs	r1, #14
 8002528:	187b      	adds	r3, r7, r1
 800252a:	003a      	movs	r2, r7
 800252c:	8812      	ldrh	r2, [r2, #0]
 800252e:	801a      	strh	r2, [r3, #0]
        h = w;
 8002530:	003b      	movs	r3, r7
 8002532:	1cba      	adds	r2, r7, #2
 8002534:	8812      	ldrh	r2, [r2, #0]
 8002536:	801a      	strh	r2, [r3, #0]
        w = end;
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	187a      	adds	r2, r7, r1
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	801a      	strh	r2, [r3, #0]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8002540:	2120      	movs	r1, #32
 8002542:	187b      	adds	r3, r7, r1
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	b29a      	uxth	r2, r3
 800254a:	230b      	movs	r3, #11
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	230a      	movs	r3, #10
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	187a      	adds	r2, r7, r1
 8002556:	8812      	ldrh	r2, [r2, #0]
 8002558:	701a      	strb	r2, [r3, #0]
    while (h-- > 0) {
 800255a:	e0cd      	b.n	80026f8 <fillRect+0x4e0>
 800255c:	48000400 	.word	0x48000400
 8002560:	2000008a 	.word	0x2000008a
 8002564:	48000800 	.word	0x48000800
        end = w;
 8002568:	230e      	movs	r3, #14
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	1cba      	adds	r2, r7, #2
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	801a      	strh	r2, [r3, #0]

        do {
            write8(hi);
 8002572:	2390      	movs	r3, #144	; 0x90
 8002574:	05db      	lsls	r3, r3, #23
 8002576:	22e0      	movs	r2, #224	; 0xe0
 8002578:	04d2      	lsls	r2, r2, #19
 800257a:	619a      	str	r2, [r3, #24]
 800257c:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <fillRect+0x550>)
 800257e:	2287      	movs	r2, #135	; 0x87
 8002580:	04d2      	lsls	r2, r2, #19
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	4b79      	ldr	r3, [pc, #484]	; (800276c <fillRect+0x554>)
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	0412      	lsls	r2, r2, #16
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	200b      	movs	r0, #11
 800258e:	183b      	adds	r3, r7, r0
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	025a      	lsls	r2, r3, #9
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	401a      	ands	r2, r3
 800259a:	183b      	adds	r3, r7, r0
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	0219      	lsls	r1, r3, #8
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	400b      	ands	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	0059      	lsls	r1, r3, #1
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	2390      	movs	r3, #144	; 0x90
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	401a      	ands	r2, r3
 80025c4:	183b      	adds	r3, r7, r0
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2120      	movs	r1, #32
 80025cc:	400b      	ands	r3, r1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	183b      	adds	r3, r7, r0
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	105b      	asrs	r3, r3, #1
 80025d6:	2110      	movs	r1, #16
 80025d8:	400b      	ands	r3, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0119      	lsls	r1, r3, #4
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	400b      	ands	r3, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <fillRect+0x550>)
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	183b      	adds	r3, r7, r0
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	019b      	lsls	r3, r3, #6
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <fillRect+0x554>)
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	400a      	ands	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	2390      	movs	r3, #144	; 0x90
 8002600:	05db      	lsls	r3, r3, #23
 8002602:	2200      	movs	r2, #0
 8002604:	2102      	movs	r1, #2
 8002606:	0018      	movs	r0, r3
 8002608:	f000 feca 	bl	80033a0 <HAL_GPIO_WritePin>
 800260c:	2390      	movs	r3, #144	; 0x90
 800260e:	05db      	lsls	r3, r3, #23
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	0018      	movs	r0, r3
 8002616:	f000 fec3 	bl	80033a0 <HAL_GPIO_WritePin>
 800261a:	2390      	movs	r3, #144	; 0x90
 800261c:	05db      	lsls	r3, r3, #23
 800261e:	2201      	movs	r2, #1
 8002620:	2102      	movs	r1, #2
 8002622:	0018      	movs	r0, r3
 8002624:	f000 febc 	bl	80033a0 <HAL_GPIO_WritePin>
            write8(lo);
 8002628:	2390      	movs	r3, #144	; 0x90
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	22e0      	movs	r2, #224	; 0xe0
 800262e:	04d2      	lsls	r2, r2, #19
 8002630:	619a      	str	r2, [r3, #24]
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <fillRect+0x550>)
 8002634:	2287      	movs	r2, #135	; 0x87
 8002636:	04d2      	lsls	r2, r2, #19
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <fillRect+0x554>)
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0412      	lsls	r2, r2, #16
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	200a      	movs	r0, #10
 8002644:	183b      	adds	r3, r7, r0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	025a      	lsls	r2, r3, #9
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	401a      	ands	r2, r3
 8002650:	183b      	adds	r3, r7, r0
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	0219      	lsls	r1, r3, #8
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	400b      	ands	r3, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	183b      	adds	r3, r7, r0
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0059      	lsls	r1, r3, #1
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	400b      	ands	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	2390      	movs	r3, #144	; 0x90
 800266e:	05db      	lsls	r3, r3, #23
 8002670:	619a      	str	r2, [r3, #24]
 8002672:	183b      	adds	r3, r7, r0
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2208      	movs	r2, #8
 8002678:	401a      	ands	r2, r3
 800267a:	183b      	adds	r3, r7, r0
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2120      	movs	r1, #32
 8002682:	400b      	ands	r3, r1
 8002684:	431a      	orrs	r2, r3
 8002686:	183b      	adds	r3, r7, r0
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	105b      	asrs	r3, r3, #1
 800268c:	2110      	movs	r1, #16
 800268e:	400b      	ands	r3, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	183b      	adds	r3, r7, r0
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	0119      	lsls	r1, r3, #4
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	400b      	ands	r3, r1
 800269e:	431a      	orrs	r2, r3
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <fillRect+0x550>)
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	183b      	adds	r3, r7, r0
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	0019      	movs	r1, r3
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <fillRect+0x554>)
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	400a      	ands	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]
 80026b4:	2390      	movs	r3, #144	; 0x90
 80026b6:	05db      	lsls	r3, r3, #23
 80026b8:	2200      	movs	r2, #0
 80026ba:	2102      	movs	r1, #2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fe6f 	bl	80033a0 <HAL_GPIO_WritePin>
 80026c2:	2390      	movs	r3, #144	; 0x90
 80026c4:	05db      	lsls	r3, r3, #23
 80026c6:	2201      	movs	r2, #1
 80026c8:	2102      	movs	r1, #2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fe68 	bl	80033a0 <HAL_GPIO_WritePin>
 80026d0:	2390      	movs	r3, #144	; 0x90
 80026d2:	05db      	lsls	r3, r3, #23
 80026d4:	2201      	movs	r2, #1
 80026d6:	2102      	movs	r1, #2
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fe61 	bl	80033a0 <HAL_GPIO_WritePin>
        } while (--end != 0);
 80026de:	210e      	movs	r1, #14
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2200      	movs	r2, #0
 80026f0:	5e9b      	ldrsh	r3, [r3, r2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d000      	beq.n	80026f8 <fillRect+0x4e0>
 80026f6:	e73c      	b.n	8002572 <fillRect+0x35a>
    while (h-- > 0) {
 80026f8:	003b      	movs	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	5e9b      	ldrsh	r3, [r3, r2]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	3a01      	subs	r2, #1
 8002702:	b291      	uxth	r1, r2
 8002704:	003a      	movs	r2, r7
 8002706:	8011      	strh	r1, [r2, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dd00      	ble.n	800270e <fillRect+0x4f6>
 800270c:	e72c      	b.n	8002568 <fillRect+0x350>
    }
    CS_IDLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <fillRect+0x550>)
 8002710:	2201      	movs	r2, #1
 8002712:	2101      	movs	r1, #1
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fe43 	bl	80033a0 <HAL_GPIO_WritePin>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <fillRect+0x558>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	001a      	movs	r2, r3
 8002720:	2301      	movs	r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d00a      	beq.n	800273c <fillRect+0x524>
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <fillRect+0x55c>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <fillRect+0x560>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d116      	bne.n	800275e <fillRect+0x546>
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <fillRect+0x564>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	001a      	movs	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d010      	beq.n	800275e <fillRect+0x546>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800273c:	f7fd ffa2 	bl	8000684 <width>
 8002740:	0003      	movs	r3, r0
 8002742:	3b01      	subs	r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	b21c      	sxth	r4, r3
 8002748:	f7fd ffa6 	bl	8000698 <height>
 800274c:	0003      	movs	r3, r0
 800274e:	3b01      	subs	r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	b21b      	sxth	r3, r3
 8002754:	0022      	movs	r2, r4
 8002756:	2100      	movs	r1, #0
 8002758:	2000      	movs	r0, #0
 800275a:	f7ff f861 	bl	8001820 <setAddrWindow>
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bdb0      	pop	{r4, r5, r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	2000008c 	.word	0x2000008c
 8002774:	2000009a 	.word	0x2000009a
 8002778:	00001526 	.word	0x00001526
 800277c:	20000039 	.word	0x20000039

08002780 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	0002      	movs	r2, r0
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	1c0a      	adds	r2, r1, #0
 8002790:	801a      	strh	r2, [r3, #0]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8002792:	f7fd ff77 	bl	8000684 <width>
 8002796:	0003      	movs	r3, r0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	f7fd ff7d 	bl	8000698 <height>
 800279e:	0003      	movs	r3, r0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff f9d0 	bl	8001b50 <fillScreen>
    for (x = radius; x < w; x += r2) {
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e01a      	b.n	80027ee <testFilledCircles+0x6e>
        for (y = radius; y < h; y += r2) {
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e00e      	b.n	80027de <testFilledCircles+0x5e>
            fillCircle(x, y, radius, color);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	b218      	sxth	r0, r3
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	b219      	sxth	r1, r3
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f7ff fba6 	bl	8001f22 <fillCircle>
        for (y = radius; y < h; y += r2) {
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	18d3      	adds	r3, r2, r3
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbec      	blt.n	80027c0 <testFilledCircles+0x40>
    for (x = radius; x < w; x += r2) {
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbe0      	blt.n	80027b8 <testFilledCircles+0x38>
        }
    }
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b008      	add	sp, #32
 80027fc:	bd80      	pop	{r7, pc}

080027fe <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b088      	sub	sp, #32
 8002802:	af00      	add	r7, sp, #0
 8002804:	0002      	movs	r2, r0
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	1c0a      	adds	r2, r1, #0
 800280e:	801a      	strh	r2, [r3, #0]
    int           x, y, r2 = radius * 2,
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8002818:	f7fd ff34 	bl	8000684 <width>
 800281c:	0003      	movs	r3, r0
 800281e:	001a      	movs	r2, r3
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	18d3      	adds	r3, r2, r3
 8002826:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8002828:	f7fd ff36 	bl	8000698 <height>
 800282c:	0003      	movs	r3, r0
 800282e:	001a      	movs	r2, r3
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	e019      	b.n	8002872 <testCircles+0x74>
        for (y = 0; y < h; y += r2) {
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e00e      	b.n	8002862 <testCircles+0x64>
            drawCircle(x, y, radius, color);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	b218      	sxth	r0, r3
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	b219      	sxth	r1, r3
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b21a      	sxth	r2, r3
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	f7ff fa14 	bl	8001c82 <drawCircle>
        for (y = 0; y < h; y += r2) {
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbec      	blt.n	8002844 <testCircles+0x46>
    for (x = 0; x < w; x += r2) {
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	429a      	cmp	r2, r3
 8002878:	dbe1      	blt.n	800283e <testCircles+0x40>
        }
    }
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b008      	add	sp, #32
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <drawChar>:
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
    }
}

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af02      	add	r7, sp, #8
 800288a:	0005      	movs	r5, r0
 800288c:	000c      	movs	r4, r1
 800288e:	0010      	movs	r0, r2
 8002890:	0019      	movs	r1, r3
 8002892:	1dbb      	adds	r3, r7, #6
 8002894:	1c2a      	adds	r2, r5, #0
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	1c22      	adds	r2, r4, #0
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	1cfb      	adds	r3, r7, #3
 80028a0:	1c02      	adds	r2, r0, #0
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	003b      	movs	r3, r7
 80028a6:	1c0a      	adds	r2, r1, #0
 80028a8:	801a      	strh	r2, [r3, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80028aa:	4b81      	ldr	r3, [pc, #516]	; (8002ab0 <drawChar+0x22c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3308      	adds	r3, #8
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	1cfb      	adds	r3, r7, #3
 80028b4:	1cf9      	adds	r1, r7, #3
 80028b6:	7809      	ldrb	r1, [r1, #0]
 80028b8:	1a8a      	subs	r2, r1, r2
 80028ba:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 80028bc:	1cfb      	adds	r3, r7, #3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <drawChar+0x22c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3304      	adds	r3, #4
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	18d3      	adds	r3, r2, r3
 80028cc:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80028ce:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <drawChar+0x22c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80028d6:	231e      	movs	r3, #30
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80028e0:	230b      	movs	r3, #11
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	7892      	ldrb	r2, [r2, #2]
 80028e8:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
 80028ea:	230a      	movs	r3, #10
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	78d2      	ldrb	r2, [r2, #3]
 80028f2:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3305      	adds	r3, #5
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	2309      	movs	r3, #9
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3306      	adds	r3, #6
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	2308      	movs	r3, #8
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
 800290c:	231b      	movs	r3, #27
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	231a      	movs	r3, #26
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
 800291c:	2318      	movs	r3, #24
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	2316      	movs	r3, #22
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2200      	movs	r2, #0
 800292a:	801a      	strh	r2, [r3, #0]

        if(size > 1)
 800292c:	2334      	movs	r3, #52	; 0x34
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d90d      	bls.n	8002952 <drawChar+0xce>
        {
            xo16 = xo;
 8002936:	2318      	movs	r3, #24
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2209      	movs	r2, #9
 800293c:	18ba      	adds	r2, r7, r2
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	b252      	sxtb	r2, r2
 8002942:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
 8002944:	2316      	movs	r3, #22
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2208      	movs	r2, #8
 800294a:	18ba      	adds	r2, r7, r2
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	b252      	sxtb	r2, r2
 8002950:	801a      	strh	r2, [r3, #0]
        }

        for(yy=0; yy<h; yy++)
 8002952:	231c      	movs	r3, #28
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e09b      	b.n	8002a94 <drawChar+0x210>
        {
            for(xx=0; xx<w; xx++)
 800295c:	231d      	movs	r3, #29
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e087      	b.n	8002a76 <drawChar+0x1f2>
            {
                if(!(bit++ & 7))
 8002966:	221a      	movs	r2, #26
 8002968:	18bb      	adds	r3, r7, r2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	18ba      	adds	r2, r7, r2
 800296e:	1c59      	adds	r1, r3, #1
 8002970:	7011      	strb	r1, [r2, #0]
 8002972:	001a      	movs	r2, r3
 8002974:	2307      	movs	r3, #7
 8002976:	4013      	ands	r3, r2
 8002978:	d10c      	bne.n	8002994 <drawChar+0x110>
                {
                    bits = pgm_read_byte(&bitmap[bo++]);
 800297a:	221e      	movs	r2, #30
 800297c:	18bb      	adds	r3, r7, r2
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	18ba      	adds	r2, r7, r2
 8002982:	1c59      	adds	r1, r3, #1
 8002984:	8011      	strh	r1, [r2, #0]
 8002986:	001a      	movs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	189a      	adds	r2, r3, r2
 800298c:	231b      	movs	r3, #27
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	701a      	strb	r2, [r3, #0]
                }

                if(bits & 0x80)
 8002994:	231b      	movs	r3, #27
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b25b      	sxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	da5e      	bge.n	8002a5e <drawChar+0x1da>
                {
                    if(size == 1)
 80029a0:	2334      	movs	r3, #52	; 0x34
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d125      	bne.n	80029f6 <drawChar+0x172>
                    {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80029aa:	2309      	movs	r3, #9
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	18d3      	adds	r3, r2, r3
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	231d      	movs	r3, #29
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b218      	sxth	r0, r3
 80029ca:	2308      	movs	r3, #8
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	231c      	movs	r3, #28
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b219      	sxth	r1, r3
 80029ea:	003b      	movs	r3, r7
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	001a      	movs	r2, r3
 80029f0:	f7ff f929 	bl	8001c46 <writePixel>
 80029f4:	e033      	b.n	8002a5e <drawChar+0x1da>
                    }
                    else
                    {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80029f6:	2318      	movs	r3, #24
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2200      	movs	r2, #0
 80029fc:	5e9a      	ldrsh	r2, [r3, r2]
 80029fe:	231d      	movs	r3, #29
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	18d3      	adds	r3, r2, r3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2134      	movs	r1, #52	; 0x34
 8002a0a:	187a      	adds	r2, r7, r1
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	4353      	muls	r3, r2
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	1dbb      	adds	r3, r7, #6
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	18d3      	adds	r3, r2, r3
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b218      	sxth	r0, r3
 8002a1e:	2316      	movs	r3, #22
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2200      	movs	r2, #0
 8002a24:	5e9a      	ldrsh	r2, [r3, r2]
 8002a26:	231c      	movs	r3, #28
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	18d3      	adds	r3, r2, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	000c      	movs	r4, r1
 8002a32:	187a      	adds	r2, r7, r1
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	b292      	uxth	r2, r2
 8002a38:	4353      	muls	r3, r2
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b219      	sxth	r1, r3
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b21c      	sxth	r4, r3
 8002a52:	003b      	movs	r3, r7
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	0023      	movs	r3, r4
 8002a5a:	f7ff fbdd 	bl	8002218 <fillRect>
                    }
                }
                bits <<= 1;
 8002a5e:	231b      	movs	r3, #27
 8002a60:	18fa      	adds	r2, r7, r3
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	18db      	adds	r3, r3, r3
 8002a68:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++)
 8002a6a:	211d      	movs	r1, #29
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	3201      	adds	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	231d      	movs	r3, #29
 8002a78:	18fa      	adds	r2, r7, r3
 8002a7a:	230b      	movs	r3, #11
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d200      	bcs.n	8002a88 <drawChar+0x204>
 8002a86:	e76e      	b.n	8002966 <drawChar+0xe2>
        for(yy=0; yy<h; yy++)
 8002a88:	211c      	movs	r1, #28
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	3201      	adds	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	231c      	movs	r3, #28
 8002a96:	18fa      	adds	r2, r7, r3
 8002a98:	230a      	movs	r3, #10
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d200      	bcs.n	8002aa6 <drawChar+0x222>
 8002aa4:	e75a      	b.n	800295c <drawChar+0xd8>
            }
        }
    } // End classic vs custom font
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b008      	add	sp, #32
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	2000003c 	.word	0x2000003c

08002ab4 <write>:

size_t write(uint8_t c)
{
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	0002      	movs	r2, r0
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	701a      	strb	r2, [r3, #0]
	if(c == '\n')
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b0a      	cmp	r3, #10
 8002ac6:	d111      	bne.n	8002aec <write+0x38>
	{
		cursor_x  = 0;
 8002ac8:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <write+0x15c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
		cursor_y += (int16_t)textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002ace:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <write+0x160>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330a      	adds	r3, #10
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <write+0x164>)
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	4353      	muls	r3, r2
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <write+0x168>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	18d3      	adds	r3, r2, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <write+0x168>)
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e08b      	b.n	8002c04 <write+0x150>
	}
	else if(c != '\r')
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b0d      	cmp	r3, #13
 8002af2:	d100      	bne.n	8002af6 <write+0x42>
 8002af4:	e086      	b.n	8002c04 <write+0x150>
	{
		uint8_t first = pgm_read_byte(&gfxFont->first);
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <write+0x160>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2117      	movs	r1, #23
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	7a12      	ldrb	r2, [r2, #8]
 8002b00:	701a      	strb	r2, [r3, #0]

		if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last)))
 8002b02:	1dfa      	adds	r2, r7, #7
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d200      	bcs.n	8002b10 <write+0x5c>
 8002b0e:	e079      	b.n	8002c04 <write+0x150>
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <write+0x160>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3309      	adds	r3, #9
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	1dfa      	adds	r2, r7, #7
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d871      	bhi.n	8002c04 <write+0x150>
		{
			GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c - first]);
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	2317      	movs	r3, #23
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	00da      	lsls	r2, r3, #3
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <write+0x160>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3304      	adds	r3, #4
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	613b      	str	r3, [r7, #16]
			uint8_t w = pgm_read_byte(&glyph->width);
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	7892      	ldrb	r2, [r2, #2]
 8002b42:	701a      	strb	r2, [r3, #0]
			uint8_t h = pgm_read_byte(&glyph->height);
 8002b44:	230e      	movs	r3, #14
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	78d2      	ldrb	r2, [r2, #3]
 8002b4c:	701a      	strb	r2, [r3, #0]

			if((w > 0) && (h > 0))
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d049      	beq.n	8002bea <write+0x136>
 8002b56:	230e      	movs	r3, #14
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d044      	beq.n	8002bea <write+0x136>
			{ // Is there an associated bitmap?
				int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3305      	adds	r3, #5
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b25a      	sxtb	r2, r3
 8002b68:	230c      	movs	r3, #12
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	801a      	strh	r2, [r3, #0]

				if(wrap && ((cursor_x + textsize * (xo + w)) > _width))
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <write+0x16c>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d024      	beq.n	8002bc0 <write+0x10c>
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <write+0x15c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <write+0x164>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	230c      	movs	r3, #12
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2200      	movs	r2, #0
 8002b88:	5e9a      	ldrsh	r2, [r3, r2]
 8002b8a:	230f      	movs	r3, #15
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	4343      	muls	r3, r0
 8002b94:	18cb      	adds	r3, r1, r3
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <write+0x170>)
 8002b98:	8812      	ldrh	r2, [r2, #0]
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	dd10      	ble.n	8002bc0 <write+0x10c>
				{
					cursor_x  = 0;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <write+0x15c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
					cursor_y += (int16_t)textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <write+0x160>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330a      	adds	r3, #10
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <write+0x164>)
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	4353      	muls	r3, r2
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <write+0x168>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	18d3      	adds	r3, r2, r3
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <write+0x168>)
 8002bbe:	701a      	strb	r2, [r3, #0]
				}

				drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <write+0x15c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b218      	sxth	r0, r3
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <write+0x168>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b21c      	sxth	r4, r3
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <write+0x174>)
 8002bce:	881d      	ldrh	r5, [r3, #0]
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <write+0x178>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <write+0x164>)
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	1df9      	adds	r1, r7, #7
 8002bda:	7809      	ldrb	r1, [r1, #0]
 8002bdc:	9201      	str	r2, [sp, #4]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	002b      	movs	r3, r5
 8002be2:	000a      	movs	r2, r1
 8002be4:	0021      	movs	r1, r4
 8002be6:	f7ff fe4d 	bl	8002884 <drawChar>
			}

			cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	3304      	adds	r3, #4
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <write+0x164>)
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	4353      	muls	r3, r2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <write+0x15c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <write+0x15c>)
 8002c02:	701a      	strb	r2, [r3, #0]
		}
	}

    return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000038 	.word	0x20000038
 8002c14:	2000003c 	.word	0x2000003c
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000037 	.word	0x20000037
 8002c20:	2000000e 	.word	0x2000000e
 8002c24:	20000004 	.word	0x20000004
 8002c28:	2000000a 	.word	0x2000000a
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <setFont>:

void setFont(const GFXfont *f)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    if(f)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <setFont+0x24>
    {            // Font struct pointer passed in?
        if(!gfxFont)
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <setFont+0x48>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d110      	bne.n	8002c68 <setFont+0x38>
        { // And no current font struct?
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <setFont+0x4c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3306      	adds	r3, #6
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <setFont+0x4c>)
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e009      	b.n	8002c68 <setFont+0x38>
        }
    }
    else if(gfxFont)
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <setFont+0x48>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <setFont+0x38>
    { 	// NULL passed.  Current font struct defined?
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <setFont+0x4c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3b06      	subs	r3, #6
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <setFont+0x4c>)
 8002c66:	701a      	strb	r2, [r3, #0]
    }

    gfxFont = (GFXfont *)f;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <setFont+0x48>)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	2000003c 	.word	0x2000003c
 8002c7c:	20000037 	.word	0x20000037

08002c80 <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, char *str)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	0008      	movs	r0, r1
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	240a      	movs	r4, #10
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	1c02      	adds	r2, r0, #0
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	2509      	movs	r5, #9
 8002c98:	197b      	adds	r3, r7, r5
 8002c9a:	1c0a      	adds	r2, r1, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
	setFont(f);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ffc5 	bl	8002c30 <setFont>
	textcolor = txtcolor;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <printnewtstr+0x70>)
 8002ca8:	193a      	adds	r2, r7, r4
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	801a      	strh	r2, [r3, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8002cae:	197b      	adds	r3, r7, r5
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <printnewtstr+0x3e>
 8002cb6:	2309      	movs	r3, #9
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	e000      	b.n	8002cc0 <printnewtstr+0x40>
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <printnewtstr+0x74>)
 8002cc2:	701a      	strb	r2, [r3, #0]
	setCursor(0, row);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	0019      	movs	r1, r3
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 f814 	bl	8002cf8 <setCursor>
	while (*str) write (*str++);
 8002cd0:	e006      	b.n	8002ce0 <printnewtstr+0x60>
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	623a      	str	r2, [r7, #32]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff feea 	bl	8002ab4 <write>
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f4      	bne.n	8002cd2 <printnewtstr+0x52>
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	2000000a 	.word	0x2000000a
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <setCursor>:
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	0002      	movs	r2, r0
 8002d00:	1dbb      	adds	r3, r7, #6
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	1c0a      	adds	r2, r1, #0
 8002d08:	801a      	strh	r2, [r3, #0]
	cursor_x = x;
 8002d0a:	1dbb      	adds	r3, r7, #6
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <setCursor+0x30>)
 8002d12:	701a      	strb	r2, [r3, #0]
	cursor_y = y;
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <setCursor+0x34>)
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000038 	.word	0x20000038
 8002d2c:	20000037 	.word	0x20000037

08002d30 <getRotation>:

uint8_t getRotation (void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	return rotation;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <getRotation+0x10>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20000039 	.word	0x20000039

08002d44 <scrollup>:

void scrollup (uint16_t speed)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	1dbb      	adds	r3, r7, #6
 8002d4e:	801a      	strh	r2, [r3, #0]
     uint16_t maxscroll;
     if (getRotation() & 1)
 8002d50:	f7ff ffee 	bl	8002d30 <getRotation>
 8002d54:	0003      	movs	r3, r0
 8002d56:	001a      	movs	r2, r3
 8002d58:	2301      	movs	r3, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d006      	beq.n	8002d6c <scrollup+0x28>
	 {
    	 maxscroll = width();
 8002d5e:	230e      	movs	r3, #14
 8002d60:	18fc      	adds	r4, r7, r3
 8002d62:	f7fd fc8f 	bl	8000684 <width>
 8002d66:	0003      	movs	r3, r0
 8002d68:	8023      	strh	r3, [r4, #0]
 8002d6a:	e005      	b.n	8002d78 <scrollup+0x34>
	 }
     else
     {
    	 maxscroll = height();
 8002d6c:	230e      	movs	r3, #14
 8002d6e:	18fc      	adds	r4, r7, r3
 8002d70:	f7fd fc92 	bl	8000698 <height>
 8002d74:	0003      	movs	r3, r0
 8002d76:	8023      	strh	r3, [r4, #0]
     }

     for (uint16_t i = 1; i <= maxscroll; i++)
 8002d78:	230c      	movs	r3, #12
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e023      	b.n	8002dca <scrollup+0x86>
     {
    	 vertScroll(0, maxscroll, i);
 8002d82:	230e      	movs	r3, #14
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	5e59      	ldrsh	r1, [r3, r1]
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	5e9b      	ldrsh	r3, [r3, r2]
 8002d92:	001a      	movs	r2, r3
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe fe0d 	bl	80019b4 <vertScroll>
         if (speed < 655)
 8002d9a:	1dbb      	adds	r3, r7, #6
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <scrollup+0xa0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <scrollup+0x70>
		 {
        	 delay(speed*100);
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	2264      	movs	r2, #100	; 0x64
 8002daa:	4353      	muls	r3, r2
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fd fc17 	bl	80005e0 <delay>
 8002db2:	e004      	b.n	8002dbe <scrollup+0x7a>
		 }
         else
		 {
        	 HAL_Delay(speed);
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f8a3 	bl	8002f04 <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 8002dbe:	210c      	movs	r1, #12
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	230c      	movs	r3, #12
 8002dcc:	18fa      	adds	r2, r7, r3
 8002dce:	230e      	movs	r3, #14
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d9d3      	bls.n	8002d82 <scrollup+0x3e>
		 }
     }

}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b005      	add	sp, #20
 8002de0:	bd90      	pop	{r4, r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	0000028e 	.word	0x0000028e

08002de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002de8:	480d      	ldr	r0, [pc, #52]	; (8002e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dee:	490e      	ldr	r1, [pc, #56]	; (8002e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <LoopForever+0xe>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e04:	4c0b      	ldr	r4, [pc, #44]	; (8002e34 <LoopForever+0x16>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e12:	f7fd fbe0 	bl	80005d6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e16:	f001 fa8f 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1a:	f7fd fa01 	bl	8000220 <main>

08002e1e <LoopForever>:

LoopForever:
    b LoopForever
 8002e1e:	e7fe      	b.n	8002e1e <LoopForever>
  ldr   r0, =_estack
 8002e20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002e2c:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8002e30:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002e34:	200000a4 	.word	0x200000a4

08002e38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC1_COMP_IRQHandler>
	...

08002e3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_Init+0x24>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_Init+0x24>)
 8002e46:	2110      	movs	r1, #16
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f000 f809 	bl	8002e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e52:	f7fd fb63 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40022000 	.word	0x40022000

08002e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_InitTick+0x5c>)
 8002e6e:	681c      	ldr	r4, [r3, #0]
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_InitTick+0x60>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	0019      	movs	r1, r3
 8002e76:	23fa      	movs	r3, #250	; 0xfa
 8002e78:	0098      	lsls	r0, r3, #2
 8002e7a:	f7fd f945 	bl	8000108 <__udivsi3>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	0019      	movs	r1, r3
 8002e82:	0020      	movs	r0, r4
 8002e84:	f7fd f940 	bl	8000108 <__udivsi3>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 f903 	bl	8003096 <HAL_SYSTICK_Config>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e00f      	b.n	8002eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d80b      	bhi.n	8002eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	425b      	negs	r3, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 f8e0 	bl	800306c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_InitTick+0x64>)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b003      	add	sp, #12
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000014 	.word	0x20000014
 8002ec8:	20000010 	.word	0x20000010

08002ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_IncTick+0x1c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_IncTick+0x20>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	18d2      	adds	r2, r2, r3
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_IncTick+0x20>)
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20000014 	.word	0x20000014
 8002eec:	200000a0 	.word	0x200000a0

08002ef0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <HAL_GetTick+0x10>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	200000a0 	.word	0x200000a0

08002f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fff0 	bl	8002ef0 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_Delay+0x40>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	001a      	movs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	f7ff ffe0 	bl	8002ef0 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d8f7      	bhi.n	8002f2c <HAL_Delay+0x28>
  {
  }
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000014 	.word	0x20000014

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	0002      	movs	r2, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5c:	d828      	bhi.n	8002fb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <__NVIC_SetPriority+0xd4>)
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	33c0      	adds	r3, #192	; 0xc0
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	589b      	ldr	r3, [r3, r2]
 8002f6e:	1dfa      	adds	r2, r7, #7
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	0011      	movs	r1, r2
 8002f74:	2203      	movs	r2, #3
 8002f76:	400a      	ands	r2, r1
 8002f78:	00d2      	lsls	r2, r2, #3
 8002f7a:	21ff      	movs	r1, #255	; 0xff
 8002f7c:	4091      	lsls	r1, r2
 8002f7e:	000a      	movs	r2, r1
 8002f80:	43d2      	mvns	r2, r2
 8002f82:	401a      	ands	r2, r3
 8002f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	2303      	movs	r3, #3
 8002f96:	4003      	ands	r3, r0
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f9c:	481f      	ldr	r0, [pc, #124]	; (800301c <__NVIC_SetPriority+0xd4>)
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	33c0      	adds	r3, #192	; 0xc0
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fae:	e031      	b.n	8003014 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <__NVIC_SetPriority+0xd8>)
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	230f      	movs	r3, #15
 8002fba:	400b      	ands	r3, r1
 8002fbc:	3b08      	subs	r3, #8
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3306      	adds	r3, #6
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	18d3      	adds	r3, r2, r3
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	1dfa      	adds	r2, r7, #7
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	0011      	movs	r1, r2
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	00d2      	lsls	r2, r2, #3
 8002fd6:	21ff      	movs	r1, #255	; 0xff
 8002fd8:	4091      	lsls	r1, r2
 8002fda:	000a      	movs	r2, r1
 8002fdc:	43d2      	mvns	r2, r2
 8002fde:	401a      	ands	r2, r3
 8002fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	019b      	lsls	r3, r3, #6
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	401a      	ands	r2, r3
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	4003      	ands	r3, r0
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff8:	4809      	ldr	r0, [pc, #36]	; (8003020 <__NVIC_SetPriority+0xd8>)
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	001c      	movs	r4, r3
 8003000:	230f      	movs	r3, #15
 8003002:	4023      	ands	r3, r4
 8003004:	3b08      	subs	r3, #8
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	430a      	orrs	r2, r1
 800300a:	3306      	adds	r3, #6
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	18c3      	adds	r3, r0, r3
 8003010:	3304      	adds	r3, #4
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b003      	add	sp, #12
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <SysTick_Config+0x40>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e010      	b.n	800305c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <SysTick_Config+0x44>)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	3a01      	subs	r2, #1
 8003040:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	2301      	movs	r3, #1
 8003044:	425b      	negs	r3, r3
 8003046:	2103      	movs	r1, #3
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff7d 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <SysTick_Config+0x44>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <SysTick_Config+0x44>)
 8003056:	2207      	movs	r2, #7
 8003058:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	00ffffff 	.word	0x00ffffff
 8003068:	e000e010 	.word	0xe000e010

0800306c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	210f      	movs	r1, #15
 8003078:	187b      	adds	r3, r7, r1
 800307a:	1c02      	adds	r2, r0, #0
 800307c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	187b      	adds	r3, r7, r1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b25b      	sxtb	r3, r3
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff ffbf 	bl	8003024 <SysTick_Config>
 80030a6:	0003      	movs	r3, r0
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030be:	e155      	b.n	800336c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4091      	lsls	r1, r2
 80030ca:	000a      	movs	r2, r1
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d100      	bne.n	80030d8 <HAL_GPIO_Init+0x28>
 80030d6:	e146      	b.n	8003366 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00b      	beq.n	80030f8 <HAL_GPIO_Init+0x48>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d007      	beq.n	80030f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d130      	bne.n	800315a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	409a      	lsls	r2, r3
 8003106:	0013      	movs	r3, r2
 8003108:	43da      	mvns	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	409a      	lsls	r2, r3
 800311a:	0013      	movs	r3, r2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312e:	2201      	movs	r2, #1
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
 8003134:	0013      	movs	r3, r2
 8003136:	43da      	mvns	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	2201      	movs	r2, #1
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	409a      	lsls	r2, r3
 8003168:	0013      	movs	r3, r2
 800316a:	43da      	mvns	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0xea>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b12      	cmp	r3, #18
 8003198:	d123      	bne.n	80031e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	08da      	lsrs	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3208      	adds	r2, #8
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	58d3      	ldr	r3, [r2, r3]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2207      	movs	r2, #7
 80031ac:	4013      	ands	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2107      	movs	r1, #7
 80031c6:	400b      	ands	r3, r1
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	08da      	lsrs	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3208      	adds	r2, #8
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	6939      	ldr	r1, [r7, #16]
 80031e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	409a      	lsls	r2, r3
 80031f0:	0013      	movs	r3, r2
 80031f2:	43da      	mvns	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	401a      	ands	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	0013      	movs	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	055b      	lsls	r3, r3, #21
 800321e:	4013      	ands	r3, r2
 8003220:	d100      	bne.n	8003224 <HAL_GPIO_Init+0x174>
 8003222:	e0a0      	b.n	8003366 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003224:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_GPIO_Init+0x2d4>)
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b56      	ldr	r3, [pc, #344]	; (8003384 <HAL_GPIO_Init+0x2d4>)
 800322a:	2101      	movs	r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_GPIO_Init+0x2d4>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2201      	movs	r2, #1
 8003236:	4013      	ands	r3, r2
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_GPIO_Init+0x2d8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	589b      	ldr	r3, [r3, r2]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2203      	movs	r2, #3
 800324e:	4013      	ands	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	409a      	lsls	r2, r3
 8003256:	0013      	movs	r3, r2
 8003258:	43da      	mvns	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	2390      	movs	r3, #144	; 0x90
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	429a      	cmp	r2, r3
 8003268:	d019      	beq.n	800329e <HAL_GPIO_Init+0x1ee>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a47      	ldr	r2, [pc, #284]	; (800338c <HAL_GPIO_Init+0x2dc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x1ea>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a46      	ldr	r2, [pc, #280]	; (8003390 <HAL_GPIO_Init+0x2e0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x1e6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a45      	ldr	r2, [pc, #276]	; (8003394 <HAL_GPIO_Init+0x2e4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x1e2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a44      	ldr	r2, [pc, #272]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x1de>
 800328a:	2304      	movs	r3, #4
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x1f0>
 800328e:	2305      	movs	r3, #5
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x1f0>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x1f0>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x1f0>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x1f0>
 800329e:	2300      	movs	r3, #0
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	2103      	movs	r1, #3
 80032a4:	400a      	ands	r2, r1
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_GPIO_Init+0x2d8>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_GPIO_Init+0x2ec>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43da      	mvns	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	4013      	ands	r3, r2
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_GPIO_Init+0x2ec>)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_GPIO_Init+0x2ec>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_GPIO_Init+0x2ec>)
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_GPIO_Init+0x2ec>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_GPIO_Init+0x2ec>)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_GPIO_Init+0x2ec>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	039b      	lsls	r3, r3, #14
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_GPIO_Init+0x2ec>)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	40da      	lsrs	r2, r3
 8003374:	1e13      	subs	r3, r2, #0
 8003376:	d000      	beq.n	800337a <HAL_GPIO_Init+0x2ca>
 8003378:	e6a2      	b.n	80030c0 <HAL_GPIO_Init+0x10>
  } 
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	48001000 	.word	0x48001000
 800339c:	40010400 	.word	0x40010400

080033a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	0008      	movs	r0, r1
 80033aa:	0011      	movs	r1, r2
 80033ac:	1cbb      	adds	r3, r7, #2
 80033ae:	1c02      	adds	r2, r0, #0
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	1c7b      	adds	r3, r7, #1
 80033b4:	1c0a      	adds	r2, r1, #0
 80033b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b8:	1c7b      	adds	r3, r7, #1
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ca:	1cbb      	adds	r3, r7, #2
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b002      	add	sp, #8
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f000 fb76 	bl	8003adc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	d100      	bne.n	80033fc <HAL_RCC_OscConfig+0x20>
 80033fa:	e08e      	b.n	800351a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033fc:	4bc5      	ldr	r3, [pc, #788]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	220c      	movs	r2, #12
 8003402:	4013      	ands	r3, r2
 8003404:	2b04      	cmp	r3, #4
 8003406:	d00e      	beq.n	8003426 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003408:	4bc2      	ldr	r3, [pc, #776]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	220c      	movs	r2, #12
 800340e:	4013      	ands	r3, r2
 8003410:	2b08      	cmp	r3, #8
 8003412:	d117      	bne.n	8003444 <HAL_RCC_OscConfig+0x68>
 8003414:	4bbf      	ldr	r3, [pc, #764]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	23c0      	movs	r3, #192	; 0xc0
 800341a:	025b      	lsls	r3, r3, #9
 800341c:	401a      	ands	r2, r3
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	025b      	lsls	r3, r3, #9
 8003422:	429a      	cmp	r2, r3
 8003424:	d10e      	bne.n	8003444 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	4bbb      	ldr	r3, [pc, #748]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	029b      	lsls	r3, r3, #10
 800342e:	4013      	ands	r3, r2
 8003430:	d100      	bne.n	8003434 <HAL_RCC_OscConfig+0x58>
 8003432:	e071      	b.n	8003518 <HAL_RCC_OscConfig+0x13c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d000      	beq.n	800343e <HAL_RCC_OscConfig+0x62>
 800343c:	e06c      	b.n	8003518 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f000 fb4c 	bl	8003adc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x80>
 800344c:	4bb1      	ldr	r3, [pc, #708]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4bb0      	ldr	r3, [pc, #704]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0249      	lsls	r1, r1, #9
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e02f      	b.n	80034bc <HAL_RCC_OscConfig+0xe0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10c      	bne.n	800347e <HAL_RCC_OscConfig+0xa2>
 8003464:	4bab      	ldr	r3, [pc, #684]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4baa      	ldr	r3, [pc, #680]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800346a:	49ab      	ldr	r1, [pc, #684]	; (8003718 <HAL_RCC_OscConfig+0x33c>)
 800346c:	400a      	ands	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4ba8      	ldr	r3, [pc, #672]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4ba7      	ldr	r3, [pc, #668]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003476:	49a9      	ldr	r1, [pc, #676]	; (800371c <HAL_RCC_OscConfig+0x340>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e01e      	b.n	80034bc <HAL_RCC_OscConfig+0xe0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d10e      	bne.n	80034a4 <HAL_RCC_OscConfig+0xc8>
 8003486:	4ba3      	ldr	r3, [pc, #652]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4ba2      	ldr	r3, [pc, #648]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	02c9      	lsls	r1, r1, #11
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0249      	lsls	r1, r1, #9
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0xe0>
 80034a4:	4b9b      	ldr	r3, [pc, #620]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b9a      	ldr	r3, [pc, #616]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034aa:	499b      	ldr	r1, [pc, #620]	; (8003718 <HAL_RCC_OscConfig+0x33c>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	4b98      	ldr	r3, [pc, #608]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b97      	ldr	r3, [pc, #604]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034b6:	4999      	ldr	r1, [pc, #612]	; (800371c <HAL_RCC_OscConfig+0x340>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d014      	beq.n	80034ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7ff fd14 	bl	8002ef0 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ce:	f7ff fd0f 	bl	8002ef0 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b64      	cmp	r3, #100	; 0x64
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e2fd      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e0:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	4013      	ands	r3, r2
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0xf2>
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7ff fcff 	bl	8002ef0 <HAL_GetTick>
 80034f2:	0003      	movs	r3, r0
 80034f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff fcfa 	bl	8002ef0 <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e2e8      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b82      	ldr	r3, [pc, #520]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	4013      	ands	r3, r2
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x11c>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d100      	bne.n	8003526 <HAL_RCC_OscConfig+0x14a>
 8003524:	e06c      	b.n	8003600 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003526:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	220c      	movs	r2, #12
 800352c:	4013      	ands	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003530:	4b78      	ldr	r3, [pc, #480]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	220c      	movs	r2, #12
 8003536:	4013      	ands	r3, r2
 8003538:	2b08      	cmp	r3, #8
 800353a:	d11f      	bne.n	800357c <HAL_RCC_OscConfig+0x1a0>
 800353c:	4b75      	ldr	r3, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	23c0      	movs	r3, #192	; 0xc0
 8003542:	025b      	lsls	r3, r3, #9
 8003544:	401a      	ands	r2, r3
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	429a      	cmp	r2, r3
 800354c:	d116      	bne.n	800357c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	4b71      	ldr	r3, [pc, #452]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d005      	beq.n	8003564 <HAL_RCC_OscConfig+0x188>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e2bb      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	22f8      	movs	r2, #248	; 0xf8
 800356a:	4393      	bics	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	4b67      	ldr	r3, [pc, #412]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	e041      	b.n	8003600 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d024      	beq.n	80035ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b62      	ldr	r3, [pc, #392]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800358a:	2101      	movs	r1, #1
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fcae 	bl	8002ef0 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359a:	f7ff fca9 	bl	8002ef0 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e297      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d0f1      	beq.n	800359a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	22f8      	movs	r2, #248	; 0xf8
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00da      	lsls	r2, r3, #3
 80035c6:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e018      	b.n	8003600 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	438a      	bics	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7ff fc89 	bl	8002ef0 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7ff fc84 	bl	8002ef0 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e272      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d1f1      	bne.n	80035e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	4013      	ands	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d019      	beq.n	8003646 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003612:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003616:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003618:	2101      	movs	r1, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7ff fc67 	bl	8002ef0 <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7ff fc62 	bl	8002ef0 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e250      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d0f1      	beq.n	8003628 <HAL_RCC_OscConfig+0x24c>
 8003644:	e018      	b.n	8003678 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	4b32      	ldr	r3, [pc, #200]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800364c:	2101      	movs	r1, #1
 800364e:	438a      	bics	r2, r1
 8003650:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7ff fc4d 	bl	8002ef0 <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365c:	f7ff fc48 	bl	8002ef0 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e236      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2202      	movs	r2, #2
 8003674:	4013      	ands	r3, r2
 8003676:	d1f1      	bne.n	800365c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d100      	bne.n	8003684 <HAL_RCC_OscConfig+0x2a8>
 8003682:	e0b5      	b.n	80037f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003684:	231f      	movs	r3, #31
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	055b      	lsls	r3, r3, #21
 8003694:	4013      	ands	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0549      	lsls	r1, r1, #21
 80036a2:	430a      	orrs	r2, r1
 80036a4:	61da      	str	r2, [r3, #28]
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	055b      	lsls	r3, r3, #21
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036b4:	231f      	movs	r3, #31
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_RCC_OscConfig+0x344>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d11a      	bne.n	80036fe <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x344>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCC_OscConfig+0x344>)
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	0049      	lsls	r1, r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7ff fc0b 	bl	8002ef0 <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e0:	f7ff fc06 	bl	8002ef0 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1f4      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x344>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10e      	bne.n	8003724 <HAL_RCC_OscConfig+0x348>
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	4b02      	ldr	r3, [pc, #8]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	621a      	str	r2, [r3, #32]
 8003712:	e035      	b.n	8003780 <HAL_RCC_OscConfig+0x3a4>
 8003714:	40021000 	.word	0x40021000
 8003718:	fffeffff 	.word	0xfffeffff
 800371c:	fffbffff 	.word	0xfffbffff
 8003720:	40007000 	.word	0x40007000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x36a>
 800372c:	4bca      	ldr	r3, [pc, #808]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	4bc9      	ldr	r3, [pc, #804]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	621a      	str	r2, [r3, #32]
 8003738:	4bc7      	ldr	r3, [pc, #796]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	4bc6      	ldr	r3, [pc, #792]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800373e:	2104      	movs	r1, #4
 8003740:	438a      	bics	r2, r1
 8003742:	621a      	str	r2, [r3, #32]
 8003744:	e01c      	b.n	8003780 <HAL_RCC_OscConfig+0x3a4>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x38c>
 800374e:	4bc2      	ldr	r3, [pc, #776]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	4bc1      	ldr	r3, [pc, #772]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003754:	2104      	movs	r1, #4
 8003756:	430a      	orrs	r2, r1
 8003758:	621a      	str	r2, [r3, #32]
 800375a:	4bbf      	ldr	r3, [pc, #764]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	4bbe      	ldr	r3, [pc, #760]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003760:	2101      	movs	r1, #1
 8003762:	430a      	orrs	r2, r1
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0x3a4>
 8003768:	4bbb      	ldr	r3, [pc, #748]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	4bba      	ldr	r3, [pc, #744]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800376e:	2101      	movs	r1, #1
 8003770:	438a      	bics	r2, r1
 8003772:	621a      	str	r2, [r3, #32]
 8003774:	4bb8      	ldr	r3, [pc, #736]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	4bb7      	ldr	r3, [pc, #732]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800377a:	2104      	movs	r1, #4
 800377c:	438a      	bics	r2, r1
 800377e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d014      	beq.n	80037b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003788:	f7ff fbb2 	bl	8002ef0 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7ff fbad 	bl	8002ef0 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	4aaf      	ldr	r2, [pc, #700]	; (8003a5c <HAL_RCC_OscConfig+0x680>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e19a      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	4bac      	ldr	r3, [pc, #688]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2202      	movs	r2, #2
 80037ac:	4013      	ands	r3, r2
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x3b6>
 80037b0:	e013      	b.n	80037da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7ff fb9d 	bl	8002ef0 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	e009      	b.n	80037d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7ff fb98 	bl	8002ef0 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	4aa5      	ldr	r2, [pc, #660]	; (8003a5c <HAL_RCC_OscConfig+0x680>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e185      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	4ba1      	ldr	r3, [pc, #644]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	2202      	movs	r2, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037da:	231f      	movs	r3, #31
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b9c      	ldr	r3, [pc, #624]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	4b9b      	ldr	r3, [pc, #620]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80037ea:	499d      	ldr	r1, [pc, #628]	; (8003a60 <HAL_RCC_OscConfig+0x684>)
 80037ec:	400a      	ands	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2210      	movs	r2, #16
 80037f6:	4013      	ands	r3, r2
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d12a      	bne.n	8003858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003802:	4b95      	ldr	r3, [pc, #596]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003806:	4b94      	ldr	r3, [pc, #592]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003808:	2104      	movs	r1, #4
 800380a:	430a      	orrs	r2, r1
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800380e:	4b92      	ldr	r3, [pc, #584]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003812:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003814:	2101      	movs	r1, #1
 8003816:	430a      	orrs	r2, r1
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7ff fb69 	bl	8002ef0 <HAL_GetTick>
 800381e:	0003      	movs	r3, r0
 8003820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003824:	f7ff fb64 	bl	8002ef0 <HAL_GetTick>
 8003828:	0002      	movs	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e152      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	2202      	movs	r2, #2
 800383c:	4013      	ands	r3, r2
 800383e:	d0f1      	beq.n	8003824 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003840:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	22f8      	movs	r2, #248	; 0xf8
 8003846:	4393      	bics	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	00da      	lsls	r2, r3, #3
 8003850:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003852:	430a      	orrs	r2, r1
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
 8003856:	e034      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	3305      	adds	r3, #5
 800385e:	d111      	bne.n	8003884 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003860:	4b7d      	ldr	r3, [pc, #500]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003864:	4b7c      	ldr	r3, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003866:	2104      	movs	r1, #4
 8003868:	438a      	bics	r2, r1
 800386a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800386c:	4b7a      	ldr	r3, [pc, #488]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	22f8      	movs	r2, #248	; 0xf8
 8003872:	4393      	bics	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	4b76      	ldr	r3, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800387e:	430a      	orrs	r2, r1
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
 8003882:	e01e      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003884:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800388a:	2104      	movs	r1, #4
 800388c:	430a      	orrs	r2, r1
 800388e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003890:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003894:	4b70      	ldr	r3, [pc, #448]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003896:	2101      	movs	r1, #1
 8003898:	438a      	bics	r2, r1
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7ff fb28 	bl	8002ef0 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038a6:	f7ff fb23 	bl	8002ef0 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e111      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038b8:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	d1f1      	bne.n	80038a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2220      	movs	r2, #32
 80038c8:	4013      	ands	r3, r2
 80038ca:	d05c      	beq.n	8003986 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038cc:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	220c      	movs	r2, #12
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d00e      	beq.n	80038f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038d8:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	220c      	movs	r2, #12
 80038de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d114      	bne.n	800390e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80038e4:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	025b      	lsls	r3, r3, #9
 80038ec:	401a      	ands	r2, r3
 80038ee:	23c0      	movs	r3, #192	; 0xc0
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10b      	bne.n	800390e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80038f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	4013      	ands	r3, r2
 8003900:	d040      	beq.n	8003984 <HAL_RCC_OscConfig+0x5a8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d03c      	beq.n	8003984 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0e6      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01b      	beq.n	800394e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003916:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391a:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0249      	lsls	r1, r1, #9
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7ff fae4 	bl	8002ef0 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800392e:	f7ff fadf 	bl	8002ef0 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0cd      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003940:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	4013      	ands	r3, r2
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x552>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800394e:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003954:	4943      	ldr	r1, [pc, #268]	; (8003a64 <HAL_RCC_OscConfig+0x688>)
 8003956:	400a      	ands	r2, r1
 8003958:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7ff fac9 	bl	8002ef0 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003964:	f7ff fac4 	bl	8002ef0 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0b2      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	4013      	ands	r3, r2
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x588>
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003984:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	d100      	bne.n	8003990 <HAL_RCC_OscConfig+0x5b4>
 800398e:	e0a4      	b.n	8003ada <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	220c      	movs	r2, #12
 8003996:	4013      	ands	r3, r2
 8003998:	2b08      	cmp	r3, #8
 800399a:	d100      	bne.n	800399e <HAL_RCC_OscConfig+0x5c2>
 800399c:	e078      	b.n	8003a90 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d14c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039ac:	492e      	ldr	r1, [pc, #184]	; (8003a68 <HAL_RCC_OscConfig+0x68c>)
 80039ae:	400a      	ands	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7ff fa9d 	bl	8002ef0 <HAL_GetTick>
 80039b6:	0003      	movs	r3, r0
 80039b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7ff fa98 	bl	8002ef0 <HAL_GetTick>
 80039c0:	0002      	movs	r2, r0
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e086      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	049b      	lsls	r3, r3, #18
 80039d6:	4013      	ands	r3, r2
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039da:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	220f      	movs	r2, #15
 80039e0:	4393      	bics	r3, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039ea:	430a      	orrs	r2, r1
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_RCC_OscConfig+0x690>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	0019      	movs	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	431a      	orrs	r2, r3
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0449      	lsls	r1, r1, #17
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7ff fa6b 	bl	8002ef0 <HAL_GetTick>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a20:	f7ff fa66 	bl	8002ef0 <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e054      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	049b      	lsls	r3, r3, #18
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x644>
 8003a3e:	e04c      	b.n	8003ada <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_OscConfig+0x67c>)
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <HAL_RCC_OscConfig+0x68c>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7ff fa50 	bl	8002ef0 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x6a6>
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	00001388 	.word	0x00001388
 8003a60:	efffffff 	.word	0xefffffff
 8003a64:	fffeffff 	.word	0xfffeffff
 8003a68:	feffffff 	.word	0xfeffffff
 8003a6c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7ff fa3e 	bl	8002ef0 <HAL_GetTick>
 8003a74:	0002      	movs	r2, r0
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e02c      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <HAL_RCC_OscConfig+0x708>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	049b      	lsls	r3, r3, #18
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x694>
 8003a8e:	e024      	b.n	8003ada <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e01f      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x708>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x708>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	23c0      	movs	r3, #192	; 0xc0
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	401a      	ands	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	220f      	movs	r2, #15
 8003abc:	401a      	ands	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	23f0      	movs	r3, #240	; 0xf0
 8003aca:	039b      	lsls	r3, r3, #14
 8003acc:	401a      	ands	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b008      	add	sp, #32
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000

08003ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0bf      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2201      	movs	r2, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d911      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4393      	bics	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	4013      	ands	r3, r2
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0a6      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d006      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b48:	21e0      	movs	r1, #224	; 0xe0
 8003b4a:	00c9      	lsls	r1, r1, #3
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	22f0      	movs	r2, #240	; 0xf0
 8003b56:	4393      	bics	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d04c      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d120      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07a      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	049b      	lsls	r3, r3, #18
 8003b96:	4013      	ands	r3, r2
 8003b98:	d114      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06e      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	025b      	lsls	r3, r3, #9
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e062      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e05b      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc4:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	4393      	bics	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7ff f98a 	bl	8002ef0 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be0:	e009      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7ff f985 	bl	8002ef0 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_RCC_ClockConfig+0x1a4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e042      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1ec      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d211      	bcs.n	8003c3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x19c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e020      	b.n	8003c7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	4013      	ands	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <HAL_RCC_ClockConfig+0x1a8>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c58:	f000 f820 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5c:	0001      	movs	r1, r0
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1a0>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	220f      	movs	r2, #15
 8003c66:	4013      	ands	r3, r2
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x1ac>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	40da      	lsrs	r2, r3
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1b0>)
 8003c72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7ff f8f5 	bl	8002e64 <HAL_InitTick>
  
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	00001388 	.word	0x00001388
 8003c90:	fffff8ff 	.word	0xfffff8ff
 8003c94:	08004d9c 	.word	0x08004d9c
 8003c98:	20000000 	.word	0x20000000

08003c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08f      	sub	sp, #60	; 0x3c
 8003ca0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003ca2:	2314      	movs	r3, #20
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	4a37      	ldr	r2, [pc, #220]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003ca8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003caa:	c313      	stmia	r3!, {r0, r1, r4}
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	4a35      	ldr	r2, [pc, #212]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xec>)
 8003cb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003cb6:	c313      	stmia	r3!, {r0, r1, r4}
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	220c      	movs	r2, #12
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d006      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x52>
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d043      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0xd0>
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d144      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cec:	e044      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2214      	movs	r2, #20
 8003cf8:	18ba      	adds	r2, r7, r2
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cfe:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	220f      	movs	r2, #15
 8003d04:	4013      	ands	r3, r2
 8003d06:	1d3a      	adds	r2, r7, #4
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0e:	23c0      	movs	r3, #192	; 0xc0
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	401a      	ands	r2, r3
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	025b      	lsls	r3, r3, #9
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1e:	481c      	ldr	r0, [pc, #112]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d20:	f7fc f9f2 	bl	8000108 <__udivsi3>
 8003d24:	0003      	movs	r3, r0
 8003d26:	001a      	movs	r2, r3
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	4353      	muls	r3, r2
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	e01a      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d32:	23c0      	movs	r3, #192	; 0xc0
 8003d34:	025b      	lsls	r3, r3, #9
 8003d36:	401a      	ands	r2, r3
 8003d38:	23c0      	movs	r3, #192	; 0xc0
 8003d3a:	025b      	lsls	r3, r3, #9
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	4814      	ldr	r0, [pc, #80]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d44:	f7fc f9e0 	bl	8000108 <__udivsi3>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	4353      	muls	r3, r2
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d56:	480e      	ldr	r0, [pc, #56]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d58:	f7fc f9d6 	bl	8000108 <__udivsi3>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	001a      	movs	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	4353      	muls	r3, r2
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d6a:	e005      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d70:	e002      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b00f      	add	sp, #60	; 0x3c
 8003d80:	bd90      	pop	{r4, r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	080043b4 	.word	0x080043b4
 8003d88:	080043c4 	.word	0x080043c4
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	007a1200 	.word	0x007a1200
 8003d94:	02dc6c00 	.word	0x02dc6c00

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e042      	b.n	8003e30 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	223d      	movs	r2, #61	; 0x3d
 8003dae:	5c9b      	ldrb	r3, [r3, r2]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	223c      	movs	r2, #60	; 0x3c
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7fc fbcf 	bl	8000564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	223d      	movs	r2, #61	; 0x3d
 8003dca:	2102      	movs	r1, #2
 8003dcc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f000 f935 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2246      	movs	r2, #70	; 0x46
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	223e      	movs	r2, #62	; 0x3e
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223f      	movs	r2, #63	; 0x3f
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2241      	movs	r2, #65	; 0x41
 8003e02:	2101      	movs	r1, #1
 8003e04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2242      	movs	r2, #66	; 0x42
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2243      	movs	r2, #67	; 0x43
 8003e12:	2101      	movs	r1, #1
 8003e14:	5499      	strb	r1, [r3, r2]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2244      	movs	r2, #68	; 0x44
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	5499      	strb	r1, [r3, r2]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2245      	movs	r2, #69	; 0x45
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223d      	movs	r2, #61	; 0x3d
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b002      	add	sp, #8
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	223d      	movs	r2, #61	; 0x3d
 8003e44:	5c9b      	ldrb	r3, [r3, r2]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d001      	beq.n	8003e50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e033      	b.n	8003eb8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	223d      	movs	r2, #61	; 0x3d
 8003e54:	2102      	movs	r1, #2
 8003e56:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_TIM_Base_Start+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00f      	beq.n	8003e82 <HAL_TIM_Base_Start+0x4a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	05db      	lsls	r3, r3, #23
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d009      	beq.n	8003e82 <HAL_TIM_Base_Start+0x4a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_TIM_Base_Start+0x8c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIM_Base_Start+0x4a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <HAL_TIM_Base_Start+0x90>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d111      	bne.n	8003ea6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2207      	movs	r2, #7
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d010      	beq.n	8003eb6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	e007      	b.n	8003eb6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b004      	add	sp, #16
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40014000 	.word	0x40014000

08003ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223c      	movs	r2, #60	; 0x3c
 8003eda:	5c9b      	ldrb	r3, [r3, r2]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIM_ConfigClockSource+0x18>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0ab      	b.n	800403c <HAL_TIM_ConfigClockSource+0x170>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223c      	movs	r2, #60	; 0x3c
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223d      	movs	r2, #61	; 0x3d
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2277      	movs	r2, #119	; 0x77
 8003f00:	4393      	bics	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a4f      	ldr	r2, [pc, #316]	; (8004044 <HAL_TIM_ConfigClockSource+0x178>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d100      	bne.n	8003f1e <HAL_TIM_ConfigClockSource+0x52>
 8003f1c:	e06b      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x12a>
 8003f1e:	d80e      	bhi.n	8003f3e <HAL_TIM_ConfigClockSource+0x72>
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d100      	bne.n	8003f26 <HAL_TIM_ConfigClockSource+0x5a>
 8003f24:	e077      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x14a>
 8003f26:	d803      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x64>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d100      	bne.n	8003f2e <HAL_TIM_ConfigClockSource+0x62>
 8003f2c:	e073      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f2e:	e07c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d100      	bne.n	8003f36 <HAL_TIM_ConfigClockSource+0x6a>
 8003f34:	e06f      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x14a>
 8003f36:	2b30      	cmp	r3, #48	; 0x30
 8003f38:	d100      	bne.n	8003f3c <HAL_TIM_ConfigClockSource+0x70>
 8003f3a:	e06c      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003f3c:	e075      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003f3e:	2b70      	cmp	r3, #112	; 0x70
 8003f40:	d00e      	beq.n	8003f60 <HAL_TIM_ConfigClockSource+0x94>
 8003f42:	d804      	bhi.n	8003f4e <HAL_TIM_ConfigClockSource+0x82>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d036      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xea>
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d044      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003f4c:	e06d      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	0152      	lsls	r2, r2, #5
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d068      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0x15c>
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	0192      	lsls	r2, r2, #6
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003f5e:	e064      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f000 f964 	bl	800423c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2277      	movs	r2, #119	; 0x77
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
      break;
 8003f8c:	e04d      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f000 f94d 	bl	800423c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	01c9      	lsls	r1, r1, #7
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
      break;
 8003fb4:	e039      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	f000 f8c0 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2150      	movs	r1, #80	; 0x50
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 f91a 	bl	8004208 <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e029      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	f000 f8de 	bl	80041a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2160      	movs	r1, #96	; 0x60
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f90a 	bl	8004208 <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e019      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	001a      	movs	r2, r3
 8004004:	f000 f8a0 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2140      	movs	r1, #64	; 0x40
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f8fa 	bl	8004208 <TIM_ITRx_SetConfig>
      break;
 8004014:	e009      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f000 f8f1 	bl	8004208 <TIM_ITRx_SetConfig>
        break;
 8004026:	e000      	b.n	800402a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004028:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	223d      	movs	r2, #61	; 0x3d
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	223c      	movs	r2, #60	; 0x3c
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}
 8004044:	ffff00ff 	.word	0xffff00ff

08004048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a34      	ldr	r2, [pc, #208]	; (800412c <TIM_Base_SetConfig+0xe4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d008      	beq.n	8004072 <TIM_Base_SetConfig+0x2a>
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	05db      	lsls	r3, r3, #23
 8004066:	429a      	cmp	r2, r3
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x2a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <TIM_Base_SetConfig+0xe8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2270      	movs	r2, #112	; 0x70
 8004076:	4393      	bics	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a29      	ldr	r2, [pc, #164]	; (800412c <TIM_Base_SetConfig+0xe4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	429a      	cmp	r2, r3
 8004094:	d013      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0xe8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <TIM_Base_SetConfig+0xec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <TIM_Base_SetConfig+0xf0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <TIM_Base_SetConfig+0xf4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x76>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <TIM_Base_SetConfig+0xf8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <TIM_Base_SetConfig+0xfc>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	4393      	bics	r3, r2
 80040d6:	001a      	movs	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a0c      	ldr	r2, [pc, #48]	; (800412c <TIM_Base_SetConfig+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0xce>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <TIM_Base_SetConfig+0xf0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0xce>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <TIM_Base_SetConfig+0xf4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0xce>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <TIM_Base_SetConfig+0xf8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d103      	bne.n	800411e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	615a      	str	r2, [r3, #20]
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40002000 	.word	0x40002000
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	fffffcff 	.word	0xfffffcff

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	2201      	movs	r2, #1
 8004160:	4393      	bics	r3, r2
 8004162:	001a      	movs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	22f0      	movs	r2, #240	; 0xf0
 8004172:	4393      	bics	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	220a      	movs	r2, #10
 8004184:	4393      	bics	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b006      	add	sp, #24
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	2210      	movs	r2, #16
 80041b6:	4393      	bics	r3, r2
 80041b8:	001a      	movs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <TIM_TI2_ConfigInputStage+0x60>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	22a0      	movs	r2, #160	; 0xa0
 80041e0:	4393      	bics	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b006      	add	sp, #24
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	ffff0fff 	.word	0xffff0fff

08004208 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2270      	movs	r2, #112	; 0x70
 800421c:	4393      	bics	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	2207      	movs	r2, #7
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b004      	add	sp, #16
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <TIM_ETR_SetConfig+0x3c>)
 8004254:	4013      	ands	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b006      	add	sp, #24
 8004276:	bd80      	pop	{r7, pc}
 8004278:	ffff00ff 	.word	0xffff00ff

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	223c      	movs	r2, #60	; 0x3c
 800428a:	5c9b      	ldrb	r3, [r3, r2]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e047      	b.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	223c      	movs	r2, #60	; 0x3c
 8004298:	2101      	movs	r1, #1
 800429a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223d      	movs	r2, #61	; 0x3d
 80042a0:	2102      	movs	r1, #2
 80042a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2270      	movs	r2, #112	; 0x70
 80042b8:	4393      	bics	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	05db      	lsls	r3, r3, #23
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d009      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a10      	ldr	r2, [pc, #64]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10c      	bne.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	4393      	bics	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	223d      	movs	r2, #61	; 0x3d
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	223c      	movs	r2, #60	; 0x3c
 800431e:	2100      	movs	r1, #0
 8004320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40014000 	.word	0x40014000

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	2600      	movs	r6, #0
 800433c:	4d0c      	ldr	r5, [pc, #48]	; (8004370 <__libc_init_array+0x38>)
 800433e:	4c0d      	ldr	r4, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	2600      	movs	r6, #0
 800434a:	f000 f821 	bl	8004390 <_init>
 800434e:	4d0a      	ldr	r5, [pc, #40]	; (8004378 <__libc_init_array+0x40>)
 8004350:	4c0a      	ldr	r4, [pc, #40]	; (800437c <__libc_init_array+0x44>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	00b3      	lsls	r3, r6, #2
 800435e:	58eb      	ldr	r3, [r5, r3]
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	00b3      	lsls	r3, r6, #2
 8004368:	58eb      	ldr	r3, [r5, r3]
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	08004dfc 	.word	0x08004dfc
 8004374:	08004dfc 	.word	0x08004dfc
 8004378:	08004dfc 	.word	0x08004dfc
 800437c:	08004e00 	.word	0x08004e00

08004380 <memset>:
 8004380:	0003      	movs	r3, r0
 8004382:	1812      	adds	r2, r2, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	d100      	bne.n	800438a <memset+0xa>
 8004388:	4770      	bx	lr
 800438a:	7019      	strb	r1, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	e7f9      	b.n	8004384 <memset+0x4>

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
