
nucleo-f072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005450  08005450  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005450  08005450  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000018  08005470  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08005470  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a553  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001667  00000000  00000000  0002a593  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018cdd  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008c29  00000000  00000000  000453ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000938b6  00000000  00000000  0004e016  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e18cc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a58  00000000  00000000  000e1948  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002820  00000000  00000000  000e23a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049e4 	.word	0x080049e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080049e4 	.word	0x080049e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f003 f933 	bl	8003490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f851 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8f9 	bl	8000424 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000232:	f000 f889 	bl	8000348 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ID = readID();
 8000236:	f001 f957 	bl	80014e8 <readID>
 800023a:	0003      	movs	r3, r0
 800023c:	001a      	movs	r2, r3
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0x98>)
 8000240:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f003 f988 	bl	8003558 <HAL_Delay>

  tft_init (ID);
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <main+0x98>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	0018      	movs	r0, r3
 800024e:	f001 f8f1 	bl	8001434 <tft_init>

  setRotation(1);
 8000252:	2001      	movs	r0, #1
 8000254:	f001 f958 	bl	8001508 <setRotation>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fillScreen(BLACK);
 8000258:	2000      	movs	r0, #0
 800025a:	f001 fc97 	bl	8001b8c <fillScreen>

	testFillScreen();
 800025e:	f002 fc5d 	bl	8002b1c <testFillScreen>
	testLines(CYAN);
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <main+0x9c>)
 8000264:	0018      	movs	r0, r3
 8000266:	f002 fc71 	bl	8002b4c <testLines>
	testFastLines(RED, BLUE);
 800026a:	23f8      	movs	r3, #248	; 0xf8
 800026c:	021b      	lsls	r3, r3, #8
 800026e:	211f      	movs	r1, #31
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fd71 	bl	8002d58 <testFastLines>
	testFilledCircles(10, MAGENTA);
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <main+0xa0>)
 8000278:	0019      	movs	r1, r3
 800027a:	200a      	movs	r0, #10
 800027c:	f002 fdaa 	bl	8002dd4 <testFilledCircles>
	testCircles(10, WHITE);
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <main+0xa4>)
 8000282:	0019      	movs	r1, r3
 8000284:	200a      	movs	r0, #10
 8000286:	f002 fde4 	bl	8002e52 <testCircles>

	fillScreen(BLACK);
 800028a:	2000      	movs	r0, #0
 800028c:	f001 fc7e 	bl	8001b8c <fillScreen>

	setRotation(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f001 f939 	bl	8001508 <setRotation>

	printnewtstr(100, RED, &mono12x7bold, 1, "HELLO WORLD");
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0xa8>)
 8000298:	23f8      	movs	r3, #248	; 0xf8
 800029a:	0219      	lsls	r1, r3, #8
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0xac>)
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2301      	movs	r3, #1
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f003 f816 	bl	80032d4 <printnewtstr>

	scrollup(100);
 80002a8:	2064      	movs	r0, #100	; 0x64
 80002aa:	f003 f875 	bl	8003398 <scrollup>

	invertDisplay(1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f001 fc88 	bl	8001bc4 <invertDisplay>
	fillScreen(BLACK);
 80002b4:	e7d0      	b.n	8000258 <main+0x38>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000034 	.word	0x20000034
 80002bc:	000007ff 	.word	0x000007ff
 80002c0:	0000f81f 	.word	0x0000f81f
 80002c4:	0000ffff 	.word	0x0000ffff
 80002c8:	080053e4 	.word	0x080053e4
 80002cc:	080049fc 	.word	0x080049fc

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b093      	sub	sp, #76	; 0x4c
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2414      	movs	r4, #20
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2334      	movs	r3, #52	; 0x34
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f004 fb77 	bl	80049d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2310      	movs	r3, #16
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f004 fb70 	bl	80049d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2220      	movs	r2, #32
 80002f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	193b      	adds	r3, r7, r4
 8000308:	0018      	movs	r0, r3
 800030a:	f003 fb91 	bl	8003a30 <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000312:	f000 f915 	bl	8000540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2203      	movs	r2, #3
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f003 ff02 	bl	800413c <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800033c:	f000 f900 	bl	8000540 <Error_Handler>
  }
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b013      	add	sp, #76	; 0x4c
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	2310      	movs	r3, #16
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2310      	movs	r3, #16
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f004 fb3b 	bl	80049d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	2308      	movs	r3, #8
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0018      	movs	r0, r3
 8000364:	2308      	movs	r3, #8
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f004 fb33 	bl	80049d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __TIM1_CLK_ENABLE();
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_TIM1_Init+0xcc>)
 8000370:	699a      	ldr	r2, [r3, #24]
 8000372:	4b28      	ldr	r3, [pc, #160]	; (8000414 <MX_TIM1_Init+0xcc>)
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	0109      	lsls	r1, r1, #4
 8000378:	430a      	orrs	r2, r1
 800037a:	619a      	str	r2, [r3, #24]
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_TIM1_Init+0xcc>)
 800037e:	699a      	ldr	r2, [r3, #24]
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	4013      	ands	r3, r2
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_TIM1_Init+0xd0>)
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <MX_TIM1_Init+0xd4>)
 800038e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <MX_TIM1_Init+0xd0>)
 8000392:	222f      	movs	r2, #47	; 0x2f
 8000394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000396:	4b20      	ldr	r3, [pc, #128]	; (8000418 <MX_TIM1_Init+0xd0>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_TIM1_Init+0xd0>)
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <MX_TIM1_Init+0xd8>)
 80003a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a2:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f004 f818 	bl	80043ec <HAL_TIM_Base_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003c0:	f000 f8be 	bl	8000540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	2110      	movs	r1, #16
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0152      	lsls	r2, r2, #5
 80003cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f004 f8a3 	bl	8004520 <HAL_TIM_ConfigClockSource>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003de:	f000 f8af 	bl	8000540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e2:	2108      	movs	r1, #8
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f0:	187a      	adds	r2, r7, r1
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_TIM1_Init+0xd0>)
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f004 fa6a 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000400:	f000 f89e 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <MX_TIM1_Init+0xd0>)
 8000406:	0018      	movs	r0, r3
 8000408:	f004 f840 	bl	800448c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b008      	add	sp, #32
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	20000040 	.word	0x20000040
 800041c:	40012c00 	.word	0x40012c00
 8000420:	0000fffe 	.word	0x0000fffe

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	; 0x24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	240c      	movs	r4, #12
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f004 facd 	bl	80049d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b3c      	ldr	r3, [pc, #240]	; (800052c <MX_GPIO_Init+0x108>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <MX_GPIO_Init+0x108>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <MX_GPIO_Init+0x108>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b35      	ldr	r3, [pc, #212]	; (800052c <MX_GPIO_Init+0x108>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b34      	ldr	r3, [pc, #208]	; (800052c <MX_GPIO_Init+0x108>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0289      	lsls	r1, r1, #10
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b31      	ldr	r3, [pc, #196]	; (800052c <MX_GPIO_Init+0x108>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	029b      	lsls	r3, r3, #10
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <MX_GPIO_Init+0x108>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b2d      	ldr	r3, [pc, #180]	; (800052c <MX_GPIO_Init+0x108>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	02c9      	lsls	r1, r1, #11
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b2a      	ldr	r3, [pc, #168]	; (800052c <MX_GPIO_Init+0x108>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	02db      	lsls	r3, r3, #11
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D1_Pin, GPIO_PIN_RESET);
 800048e:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_GPIO_Init+0x10c>)
 8000490:	2200      	movs	r2, #0
 8000492:	2182      	movs	r1, #130	; 0x82
 8000494:	0018      	movs	r0, r3
 8000496:	f003 faad 	bl	80039f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RD_Pin|WR_Pin|RS_Pin|D7_Pin
 800049a:	4926      	ldr	r1, [pc, #152]	; (8000534 <MX_GPIO_Init+0x110>)
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2200      	movs	r2, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f003 faa6 	bl	80039f4 <HAL_GPIO_WritePin>
                          |D0_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004a8:	4923      	ldr	r1, [pc, #140]	; (8000538 <MX_GPIO_Init+0x114>)
 80004aa:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_GPIO_Init+0x118>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f003 faa0 	bl	80039f4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D1_Pin;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2282      	movs	r2, #130	; 0x82
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2201      	movs	r2, #1
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	4a18      	ldr	r2, [pc, #96]	; (8000530 <MX_GPIO_Init+0x10c>)
 80004d0:	0019      	movs	r1, r3
 80004d2:	0010      	movs	r0, r2
 80004d4:	f003 f916 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin WR_Pin RS_Pin D7_Pin
                           D0_Pin D2_Pin */
  GPIO_InitStruct.Pin = RD_Pin|WR_Pin|RS_Pin|D7_Pin
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	4a16      	ldr	r2, [pc, #88]	; (8000534 <MX_GPIO_Init+0x110>)
 80004dc:	601a      	str	r2, [r3, #0]
                          |D0_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2201      	movs	r2, #1
 80004e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	193a      	adds	r2, r7, r4
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f003 f903 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <MX_GPIO_Init+0x114>)
 8000504:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <MX_GPIO_Init+0x118>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f003 f8f0 	bl	8003704 <HAL_GPIO_Init>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b009      	add	sp, #36	; 0x24
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800
 8000534:	00000713 	.word	0x00000713
 8000538:	00000439 	.word	0x00000439
 800053c:	48000400 	.word	0x48000400

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <HAL_MspInit+0x44>)
 8000554:	699a      	ldr	r2, [r3, #24]
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <HAL_MspInit+0x44>)
 8000558:	2101      	movs	r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_MspInit+0x44>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	2201      	movs	r2, #1
 8000564:	4013      	ands	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <HAL_MspInit+0x44>)
 800056c:	69da      	ldr	r2, [r3, #28]
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_MspInit+0x44>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0549      	lsls	r1, r1, #21
 8000574:	430a      	orrs	r2, r1
 8000576:	61da      	str	r2, [r3, #28]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_MspInit+0x44>)
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	055b      	lsls	r3, r3, #21
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_TIM_Base_MspInit+0x38>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d10d      	bne.n	80005c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_TIM_Base_MspInit+0x3c>)
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_TIM_Base_MspInit+0x3c>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0109      	lsls	r1, r1, #4
 80005b0:	430a      	orrs	r2, r1
 80005b2:	619a      	str	r2, [r3, #24]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_TIM_Base_MspInit+0x3c>)
 80005b6:	699a      	ldr	r2, [r3, #24]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	011b      	lsls	r3, r3, #4
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40012c00 	.word	0x40012c00
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f002 ff90 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <delay>:
#define  HEIGHT   ((uint16_t)480)

/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <delay+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <delay+0x28>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d8f9      	bhi.n	8000622 <delay+0x12>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	20000040 	.word	0x20000040

0800063c <PIN_INPUT>:
#include "functions.h"
#include "user_setting.h"
#include "stdlib.h"

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cbb      	adds	r3, r7, #2
 8000648:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800064a:	1cbb      	adds	r3, r7, #2
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	210c      	movs	r1, #12
 8000650:	187b      	adds	r3, r7, r1
 8000652:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000660:	187a      	adds	r2, r7, r1
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f003 f84c 	bl	8003704 <HAL_GPIO_Init>
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b008      	add	sp, #32
 8000672:	bd80      	pop	{r7, pc}

08000674 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	000a      	movs	r2, r1
 800067e:	1cbb      	adds	r3, r7, #2
 8000680:	801a      	strh	r2, [r3, #0]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000682:	1cbb      	adds	r3, r7, #2
 8000684:	881a      	ldrh	r2, [r3, #0]
 8000686:	210c      	movs	r1, #12
 8000688:	187b      	adds	r3, r7, r1
 800068a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2203      	movs	r2, #3
 800069c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800069e:	187a      	adds	r2, r7, r1
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 f82d 	bl	8003704 <HAL_GPIO_Init>
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b008      	add	sp, #32
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <width+0x10>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000004 	.word	0x20000004

080006c8 <height>:

uint16_t height(void)
{ return _height; }
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <height+0x10>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000006 	.word	0x20000006

080006dc <WriteCmdData>:

static void pushColors_any(uint16_t cmd, uint8_t * block, int16_t n, uint8_t first, uint8_t flags);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	801a      	strh	r2, [r3, #0]
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	1dbb      	adds	r3, r7, #6
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 f87d 	bl	80007f8 <writecmddata>
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <setReadDir>:
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }

uint16_t _lcd_capable, _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

void setReadDir (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	009a      	lsls	r2, r3, #2
 8000710:	2390      	movs	r3, #144	; 0x90
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff90 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <setReadDir+0x70>)
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff8b 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	00da      	lsls	r2, r3, #3
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ff83 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <setReadDir+0x74>)
 8000738:	2108      	movs	r1, #8
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff ff7e 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <setReadDir+0x74>)
 8000742:	2120      	movs	r1, #32
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff79 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <setReadDir+0x74>)
 800074c:	2110      	movs	r1, #16
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff ff74 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <setReadDir+0x74>)
 800075a:	0019      	movs	r1, r3
 800075c:	0010      	movs	r0, r2
 800075e:	f7ff ff6d 	bl	800063c <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	005a      	lsls	r2, r3, #1
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ff65 	bl	800063c <PIN_INPUT>
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	48000800 	.word	0x48000800
 800077c:	48000400 	.word	0x48000400

08000780 <setWriteDir>:

void setWriteDir (void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	009a      	lsls	r2, r3, #2
 8000788:	2390      	movs	r3, #144	; 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff70 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <setWriteDir+0x70>)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ff6b 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	00da      	lsls	r2, r3, #3
 80007a2:	2390      	movs	r3, #144	; 0x90
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ff63 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <setWriteDir+0x74>)
 80007b0:	2108      	movs	r1, #8
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff5e 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <setWriteDir+0x74>)
 80007ba:	2120      	movs	r1, #32
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff59 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <setWriteDir+0x74>)
 80007c4:	2110      	movs	r1, #16
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff ff54 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <setWriteDir+0x74>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f7ff ff4d 	bl	8000674 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	005a      	lsls	r2, r3, #1
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ff45 	bl	8000674 <PIN_OUTPUT>
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	48000800 	.word	0x48000800
 80007f4:	48000400 	.word	0x48000400

080007f8 <writecmddata>:
    }
    CS_IDLE;
}

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	801a      	strh	r2, [r3, #0]
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	801a      	strh	r2, [r3, #0]
    CS_ACTIVE;
 800080a:	4bd1      	ldr	r3, [pc, #836]	; (8000b50 <writecmddata+0x358>)
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f003 f8ef 	bl	80039f4 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000816:	2390      	movs	r3, #144	; 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	0018      	movs	r0, r3
 8000820:	f003 f8e8 	bl	80039f4 <HAL_GPIO_WritePin>
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	b29a      	uxth	r2, r3
 800082c:	210f      	movs	r1, #15
 800082e:	187b      	adds	r3, r7, r1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	240e      	movs	r4, #14
 8000834:	193b      	adds	r3, r7, r4
 8000836:	1dba      	adds	r2, r7, #6
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	2390      	movs	r3, #144	; 0x90
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	22e0      	movs	r2, #224	; 0xe0
 8000842:	04d2      	lsls	r2, r2, #19
 8000844:	619a      	str	r2, [r3, #24]
 8000846:	4bc2      	ldr	r3, [pc, #776]	; (8000b50 <writecmddata+0x358>)
 8000848:	2287      	movs	r2, #135	; 0x87
 800084a:	04d2      	lsls	r2, r2, #19
 800084c:	619a      	str	r2, [r3, #24]
 800084e:	4bc1      	ldr	r3, [pc, #772]	; (8000b54 <writecmddata+0x35c>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0412      	lsls	r2, r2, #16
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	0008      	movs	r0, r1
 8000858:	183b      	adds	r3, r7, r0
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	025a      	lsls	r2, r3, #9
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	401a      	ands	r2, r3
 8000864:	183b      	adds	r3, r7, r0
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0219      	lsls	r1, r3, #8
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	400b      	ands	r3, r1
 8000870:	431a      	orrs	r2, r3
 8000872:	183b      	adds	r3, r7, r0
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0059      	lsls	r1, r3, #1
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	400b      	ands	r3, r1
 800087e:	431a      	orrs	r2, r3
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	619a      	str	r2, [r3, #24]
 8000886:	183b      	adds	r3, r7, r0
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2208      	movs	r2, #8
 800088c:	401a      	ands	r2, r3
 800088e:	183b      	adds	r3, r7, r0
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2120      	movs	r1, #32
 8000896:	400b      	ands	r3, r1
 8000898:	431a      	orrs	r2, r3
 800089a:	183b      	adds	r3, r7, r0
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	105b      	asrs	r3, r3, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	400b      	ands	r3, r1
 80008a4:	431a      	orrs	r2, r3
 80008a6:	183b      	adds	r3, r7, r0
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0119      	lsls	r1, r3, #4
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	400b      	ands	r3, r1
 80008b2:	431a      	orrs	r2, r3
 80008b4:	4ba6      	ldr	r3, [pc, #664]	; (8000b50 <writecmddata+0x358>)
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	183b      	adds	r3, r7, r0
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	0019      	movs	r1, r3
 80008c0:	4ba4      	ldr	r3, [pc, #656]	; (8000b54 <writecmddata+0x35c>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	400a      	ands	r2, r1
 80008c6:	619a      	str	r2, [r3, #24]
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2200      	movs	r2, #0
 80008ce:	2102      	movs	r1, #2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f003 f88f 	bl	80039f4 <HAL_GPIO_WritePin>
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	2102      	movs	r1, #2
 80008de:	0018      	movs	r0, r3
 80008e0:	f003 f888 	bl	80039f4 <HAL_GPIO_WritePin>
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2201      	movs	r2, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 f881 	bl	80039f4 <HAL_GPIO_WritePin>
 80008f2:	2390      	movs	r3, #144	; 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	22e0      	movs	r2, #224	; 0xe0
 80008f8:	04d2      	lsls	r2, r2, #19
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4b94      	ldr	r3, [pc, #592]	; (8000b50 <writecmddata+0x358>)
 80008fe:	2287      	movs	r2, #135	; 0x87
 8000900:	04d2      	lsls	r2, r2, #19
 8000902:	619a      	str	r2, [r3, #24]
 8000904:	4b93      	ldr	r3, [pc, #588]	; (8000b54 <writecmddata+0x35c>)
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0412      	lsls	r2, r2, #16
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	025a      	lsls	r2, r3, #9
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	401a      	ands	r2, r3
 8000918:	193b      	adds	r3, r7, r4
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	0219      	lsls	r1, r3, #8
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	400b      	ands	r3, r1
 8000924:	431a      	orrs	r2, r3
 8000926:	193b      	adds	r3, r7, r4
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0059      	lsls	r1, r3, #1
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	400b      	ands	r3, r1
 8000932:	431a      	orrs	r2, r3
 8000934:	2390      	movs	r3, #144	; 0x90
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	619a      	str	r2, [r3, #24]
 800093a:	0020      	movs	r0, r4
 800093c:	183b      	adds	r3, r7, r0
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2208      	movs	r2, #8
 8000942:	401a      	ands	r2, r3
 8000944:	183b      	adds	r3, r7, r0
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2120      	movs	r1, #32
 800094c:	400b      	ands	r3, r1
 800094e:	431a      	orrs	r2, r3
 8000950:	183b      	adds	r3, r7, r0
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	105b      	asrs	r3, r3, #1
 8000956:	2110      	movs	r1, #16
 8000958:	400b      	ands	r3, r1
 800095a:	431a      	orrs	r2, r3
 800095c:	183b      	adds	r3, r7, r0
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	0119      	lsls	r1, r3, #4
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	400b      	ands	r3, r1
 8000968:	431a      	orrs	r2, r3
 800096a:	4b79      	ldr	r3, [pc, #484]	; (8000b50 <writecmddata+0x358>)
 800096c:	619a      	str	r2, [r3, #24]
 800096e:	183b      	adds	r3, r7, r0
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	0019      	movs	r1, r3
 8000976:	4b77      	ldr	r3, [pc, #476]	; (8000b54 <writecmddata+0x35c>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	400a      	ands	r2, r1
 800097c:	619a      	str	r2, [r3, #24]
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	0018      	movs	r0, r3
 8000988:	f003 f834 	bl	80039f4 <HAL_GPIO_WritePin>
 800098c:	2390      	movs	r3, #144	; 0x90
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	0018      	movs	r0, r3
 8000996:	f003 f82d 	bl	80039f4 <HAL_GPIO_WritePin>
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	2102      	movs	r1, #2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 f826 	bl	80039f4 <HAL_GPIO_WritePin>
 80009a8:	2390      	movs	r3, #144	; 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	2110      	movs	r1, #16
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 f81f 	bl	80039f4 <HAL_GPIO_WritePin>
    WriteData(dat);
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29a      	uxth	r2, r3
 80009be:	210d      	movs	r1, #13
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	240c      	movs	r4, #12
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	1d3a      	adds	r2, r7, #4
 80009ca:	8812      	ldrh	r2, [r2, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	22e0      	movs	r2, #224	; 0xe0
 80009d4:	04d2      	lsls	r2, r2, #19
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <writecmddata+0x358>)
 80009da:	2287      	movs	r2, #135	; 0x87
 80009dc:	04d2      	lsls	r2, r2, #19
 80009de:	619a      	str	r2, [r3, #24]
 80009e0:	4b5c      	ldr	r3, [pc, #368]	; (8000b54 <writecmddata+0x35c>)
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0412      	lsls	r2, r2, #16
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	0008      	movs	r0, r1
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	025a      	lsls	r2, r3, #9
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	401a      	ands	r2, r3
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0219      	lsls	r1, r3, #8
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	400b      	ands	r3, r1
 8000a02:	431a      	orrs	r2, r3
 8000a04:	183b      	adds	r3, r7, r0
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0059      	lsls	r1, r3, #1
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	400b      	ands	r3, r1
 8000a10:	431a      	orrs	r2, r3
 8000a12:	2390      	movs	r3, #144	; 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	401a      	ands	r2, r3
 8000a20:	183b      	adds	r3, r7, r0
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	400b      	ands	r3, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	183b      	adds	r3, r7, r0
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	105b      	asrs	r3, r3, #1
 8000a32:	2110      	movs	r1, #16
 8000a34:	400b      	ands	r3, r1
 8000a36:	431a      	orrs	r2, r3
 8000a38:	183b      	adds	r3, r7, r0
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	0119      	lsls	r1, r3, #4
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	400b      	ands	r3, r1
 8000a44:	431a      	orrs	r2, r3
 8000a46:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <writecmddata+0x358>)
 8000a48:	619a      	str	r2, [r3, #24]
 8000a4a:	183b      	adds	r3, r7, r0
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	019b      	lsls	r3, r3, #6
 8000a50:	0019      	movs	r1, r3
 8000a52:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <writecmddata+0x35c>)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	400a      	ands	r2, r1
 8000a58:	619a      	str	r2, [r3, #24]
 8000a5a:	2390      	movs	r3, #144	; 0x90
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2102      	movs	r1, #2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 ffc6 	bl	80039f4 <HAL_GPIO_WritePin>
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 ffbf 	bl	80039f4 <HAL_GPIO_WritePin>
 8000a76:	2390      	movs	r3, #144	; 0x90
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 ffb8 	bl	80039f4 <HAL_GPIO_WritePin>
 8000a84:	2390      	movs	r3, #144	; 0x90
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	22e0      	movs	r2, #224	; 0xe0
 8000a8a:	04d2      	lsls	r2, r2, #19
 8000a8c:	619a      	str	r2, [r3, #24]
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <writecmddata+0x358>)
 8000a90:	2287      	movs	r2, #135	; 0x87
 8000a92:	04d2      	lsls	r2, r2, #19
 8000a94:	619a      	str	r2, [r3, #24]
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <writecmddata+0x35c>)
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	619a      	str	r2, [r3, #24]
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	025a      	lsls	r2, r3, #9
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0219      	lsls	r1, r3, #8
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0059      	lsls	r1, r3, #1
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	619a      	str	r2, [r3, #24]
 8000acc:	0020      	movs	r0, r4
 8000ace:	183b      	adds	r3, r7, r0
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2120      	movs	r1, #32
 8000ade:	400b      	ands	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	105b      	asrs	r3, r3, #1
 8000ae8:	2110      	movs	r1, #16
 8000aea:	400b      	ands	r3, r1
 8000aec:	431a      	orrs	r2, r3
 8000aee:	183b      	adds	r3, r7, r0
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0119      	lsls	r1, r3, #4
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	400b      	ands	r3, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <writecmddata+0x358>)
 8000afe:	619a      	str	r2, [r3, #24]
 8000b00:	183b      	adds	r3, r7, r0
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	019b      	lsls	r3, r3, #6
 8000b06:	0019      	movs	r1, r3
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <writecmddata+0x35c>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	619a      	str	r2, [r3, #24]
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2200      	movs	r2, #0
 8000b16:	2102      	movs	r1, #2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 ff6b 	bl	80039f4 <HAL_GPIO_WritePin>
 8000b1e:	2390      	movs	r3, #144	; 0x90
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2201      	movs	r2, #1
 8000b24:	2102      	movs	r1, #2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 ff64 	bl	80039f4 <HAL_GPIO_WritePin>
 8000b2c:	2390      	movs	r3, #144	; 0x90
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	2201      	movs	r2, #1
 8000b32:	2102      	movs	r1, #2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 ff5d 	bl	80039f4 <HAL_GPIO_WritePin>
    CS_IDLE;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <writecmddata+0x358>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 ff57 	bl	80039f4 <HAL_GPIO_WritePin>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	48000400 	.word	0x48000400
 8000b54:	48000800 	.word	0x48000800

08000b58 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	603a      	str	r2, [r7, #0]
 8000b60:	1dbb      	adds	r3, r7, #6
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	1d7b      	adds	r3, r7, #5
 8000b68:	1c0a      	adds	r2, r1, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
    CS_ACTIVE;
 8000b6c:	4ba6      	ldr	r3, [pc, #664]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 ff3e 	bl	80039f4 <HAL_GPIO_WritePin>
    WriteCmd(cmd);
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 ff37 	bl	80039f4 <HAL_GPIO_WritePin>
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	210f      	movs	r1, #15
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	240e      	movs	r4, #14
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	1dba      	adds	r2, r7, #6
 8000b9a:	8812      	ldrh	r2, [r2, #0]
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	2390      	movs	r3, #144	; 0x90
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	22e0      	movs	r2, #224	; 0xe0
 8000ba4:	04d2      	lsls	r2, r2, #19
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b97      	ldr	r3, [pc, #604]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000baa:	2287      	movs	r2, #135	; 0x87
 8000bac:	04d2      	lsls	r2, r2, #19
 8000bae:	619a      	str	r2, [r3, #24]
 8000bb0:	4b96      	ldr	r3, [pc, #600]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	0412      	lsls	r2, r2, #16
 8000bb6:	619a      	str	r2, [r3, #24]
 8000bb8:	0008      	movs	r0, r1
 8000bba:	183b      	adds	r3, r7, r0
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	025a      	lsls	r2, r3, #9
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0219      	lsls	r1, r3, #8
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	183b      	adds	r3, r7, r0
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0059      	lsls	r1, r3, #1
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	400b      	ands	r3, r1
 8000be0:	431a      	orrs	r2, r3
 8000be2:	2390      	movs	r3, #144	; 0x90
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	619a      	str	r2, [r3, #24]
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2208      	movs	r2, #8
 8000bee:	401a      	ands	r2, r3
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	400b      	ands	r3, r1
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	183b      	adds	r3, r7, r0
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	105b      	asrs	r3, r3, #1
 8000c02:	2110      	movs	r1, #16
 8000c04:	400b      	ands	r3, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0119      	lsls	r1, r3, #4
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	400b      	ands	r3, r1
 8000c14:	431a      	orrs	r2, r3
 8000c16:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000c18:	619a      	str	r2, [r3, #24]
 8000c1a:	183b      	adds	r3, r7, r0
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	0019      	movs	r1, r3
 8000c22:	4b7a      	ldr	r3, [pc, #488]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	400a      	ands	r2, r1
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	2390      	movs	r3, #144	; 0x90
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fede 	bl	80039f4 <HAL_GPIO_WritePin>
 8000c38:	2390      	movs	r3, #144	; 0x90
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f002 fed7 	bl	80039f4 <HAL_GPIO_WritePin>
 8000c46:	2390      	movs	r3, #144	; 0x90
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f002 fed0 	bl	80039f4 <HAL_GPIO_WritePin>
 8000c54:	2390      	movs	r3, #144	; 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	22e0      	movs	r2, #224	; 0xe0
 8000c5a:	04d2      	lsls	r2, r2, #19
 8000c5c:	619a      	str	r2, [r3, #24]
 8000c5e:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000c60:	2287      	movs	r2, #135	; 0x87
 8000c62:	04d2      	lsls	r2, r2, #19
 8000c64:	619a      	str	r2, [r3, #24]
 8000c66:	4b69      	ldr	r3, [pc, #420]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0412      	lsls	r2, r2, #16
 8000c6c:	619a      	str	r2, [r3, #24]
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	025a      	lsls	r2, r3, #9
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	401a      	ands	r2, r3
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0219      	lsls	r1, r3, #8
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	400b      	ands	r3, r1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	0059      	lsls	r1, r3, #1
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	400b      	ands	r3, r1
 8000c94:	431a      	orrs	r2, r3
 8000c96:	2390      	movs	r3, #144	; 0x90
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	619a      	str	r2, [r3, #24]
 8000c9c:	0020      	movs	r0, r4
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	400b      	ands	r3, r1
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	183b      	adds	r3, r7, r0
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	105b      	asrs	r3, r3, #1
 8000cb8:	2110      	movs	r1, #16
 8000cba:	400b      	ands	r3, r1
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	183b      	adds	r3, r7, r0
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0119      	lsls	r1, r3, #4
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	400b      	ands	r3, r1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	183b      	adds	r3, r7, r0
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	400a      	ands	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	2390      	movs	r3, #144	; 0x90
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f002 fe83 	bl	80039f4 <HAL_GPIO_WritePin>
 8000cee:	2390      	movs	r3, #144	; 0x90
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 fe7c 	bl	80039f4 <HAL_GPIO_WritePin>
 8000cfc:	2390      	movs	r3, #144	; 0x90
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	2201      	movs	r2, #1
 8000d02:	2102      	movs	r1, #2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 fe75 	bl	80039f4 <HAL_GPIO_WritePin>
 8000d0a:	2390      	movs	r3, #144	; 0x90
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2110      	movs	r1, #16
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fe6e 	bl	80039f4 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000d18:	e061      	b.n	8000dde <WriteCmdParamN+0x286>
        uint8_t u8 = *block++;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	603a      	str	r2, [r7, #0]
 8000d20:	210d      	movs	r1, #13
 8000d22:	187a      	adds	r2, r7, r1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	7013      	strb	r3, [r2, #0]
        write8(u8);
 8000d28:	2390      	movs	r3, #144	; 0x90
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	22e0      	movs	r2, #224	; 0xe0
 8000d2e:	04d2      	lsls	r2, r2, #19
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000d34:	2287      	movs	r2, #135	; 0x87
 8000d36:	04d2      	lsls	r2, r2, #19
 8000d38:	619a      	str	r2, [r3, #24]
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	0008      	movs	r0, r1
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	025a      	lsls	r2, r3, #9
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	183b      	adds	r3, r7, r0
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	0219      	lsls	r1, r3, #8
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0059      	lsls	r1, r3, #1
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	400b      	ands	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	2390      	movs	r3, #144	; 0x90
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	619a      	str	r2, [r3, #24]
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2208      	movs	r2, #8
 8000d78:	401a      	ands	r2, r3
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	400b      	ands	r3, r1
 8000d84:	431a      	orrs	r2, r3
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	105b      	asrs	r3, r3, #1
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	400b      	ands	r3, r1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	183b      	adds	r3, r7, r0
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0119      	lsls	r1, r3, #4
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	183b      	adds	r3, r7, r0
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	0019      	movs	r1, r3
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <WriteCmdParamN+0x2b4>)
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	400a      	ands	r2, r1
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	2390      	movs	r3, #144	; 0x90
 8000db6:	05db      	lsls	r3, r3, #23
 8000db8:	2200      	movs	r2, #0
 8000dba:	2102      	movs	r1, #2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f002 fe19 	bl	80039f4 <HAL_GPIO_WritePin>
 8000dc2:	2390      	movs	r3, #144	; 0x90
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2102      	movs	r1, #2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fe12 	bl	80039f4 <HAL_GPIO_WritePin>
 8000dd0:	2390      	movs	r3, #144	; 0x90
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f002 fe0b 	bl	80039f4 <HAL_GPIO_WritePin>
    while (N-- > 0) {
 8000dde:	1d7b      	adds	r3, r7, #5
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	3a01      	subs	r2, #1
 8000de8:	b2d1      	uxtb	r1, r2
 8000dea:	1d7a      	adds	r2, r7, #5
 8000dec:	7011      	strb	r1, [r2, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dc93      	bgt.n	8000d1a <WriteCmdParamN+0x1c2>
    }
    CS_IDLE;
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <WriteCmdParamN+0x2b0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	2101      	movs	r1, #1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 fdfb 	bl	80039f4 <HAL_GPIO_WritePin>
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b005      	add	sp, #20
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000800 	.word	0x48000800

08000e10 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	0005      	movs	r5, r0
 8000e18:	000c      	movs	r4, r1
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	1c2a      	adds	r2, r5, #0
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	1dbb      	adds	r3, r7, #6
 8000e26:	1c22      	adds	r2, r4, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	1d7b      	adds	r3, r7, #5
 8000e2c:	1c02      	adds	r2, r0, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	1c0a      	adds	r2, r1, #0
 8000e34:	701a      	strb	r2, [r3, #0]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000e36:	210c      	movs	r1, #12
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	1dba      	adds	r2, r7, #6
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	1d7a      	adds	r2, r7, #5
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	705a      	strb	r2, [r3, #1]
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	709a      	strb	r2, [r3, #2]
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2220      	movs	r2, #32
 8000e54:	18ba      	adds	r2, r7, r2
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	70da      	strb	r2, [r3, #3]
    WriteCmdParamN(cmd, 4, d);
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	2104      	movs	r1, #4
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fe77 	bl	8000b58 <WriteCmdParamN>
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bdb0      	pop	{r4, r5, r7, pc}

08000e72 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8000e72:	b590      	push	{r4, r7, lr}
 8000e74:	b08b      	sub	sp, #44	; 0x2c
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	801a      	strh	r2, [r3, #0]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000e84:	e050      	b.n	8000f28 <init_table+0xb6>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8000e8c:	2121      	movs	r1, #33	; 0x21
 8000e8e:	187a      	adds	r2, r7, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	7013      	strb	r3, [r2, #0]
        uint8_t len = pgm_read_byte(p++);
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	627a      	str	r2, [r7, #36]	; 0x24
 8000e9a:	2223      	movs	r2, #35	; 0x23
 8000e9c:	18ba      	adds	r2, r7, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	7013      	strb	r3, [r2, #0]
        if (cmd == TFTLCD_DELAY8)
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea8:	d109      	bne.n	8000ebe <init_table+0x4c>
        {
            delay(len);
 8000eaa:	2423      	movs	r4, #35	; 0x23
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fbad 	bl	8000610 <delay>
            len = 0;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e028      	b.n	8000f10 <init_table+0x9e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000ebe:	2322      	movs	r3, #34	; 0x22
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e00e      	b.n	8000ee6 <init_table+0x74>
                dat[i] = pgm_read_byte(p++);
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8000ece:	2022      	movs	r0, #34	; 0x22
 8000ed0:	183a      	adds	r2, r7, r0
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	7819      	ldrb	r1, [r3, #0]
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	5499      	strb	r1, [r3, r2]
            for (uint8_t i = 0; i < len; i++)
 8000edc:	183b      	adds	r3, r7, r0
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	3201      	adds	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	2322      	movs	r3, #34	; 0x22
 8000ee8:	18fa      	adds	r2, r7, r3
 8000eea:	2323      	movs	r3, #35	; 0x23
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3e8      	bcc.n	8000ec8 <init_table+0x56>
            WriteCmdParamN(cmd, len, dat);
 8000ef6:	2321      	movs	r3, #33	; 0x21
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b298      	uxth	r0, r3
 8000efe:	2323      	movs	r3, #35	; 0x23
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	2208      	movs	r2, #8
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	f7ff fe24 	bl	8000b58 <WriteCmdParamN>
        }
        size -= len + 2;
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	2323      	movs	r3, #35	; 0x23
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3b02      	subs	r3, #2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	801a      	strh	r2, [r3, #0]
    while (size > 0)
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dca9      	bgt.n	8000e86 <init_table+0x14>
    }
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b00b      	add	sp, #44	; 0x2c
 8000f38:	bd90      	pop	{r4, r7, pc}
	...

08000f3c <reset>:

void reset(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <reset+0x7c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8000f46:	f7ff fc1b 	bl	8000780 <setWriteDir>
    CS_IDLE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <reset+0x80>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 fd4f 	bl	80039f4 <HAL_GPIO_WritePin>
    RD_IDLE;
 8000f56:	2390      	movs	r3, #144	; 0x90
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f002 fd48 	bl	80039f4 <HAL_GPIO_WritePin>
    WR_IDLE;
 8000f64:	2390      	movs	r3, #144	; 0x90
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f002 fd41 	bl	80039f4 <HAL_GPIO_WritePin>
    RESET_IDLE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <reset+0x84>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	2102      	movs	r1, #2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fd3b 	bl	80039f4 <HAL_GPIO_WritePin>
    delay(50);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f7ff fb46 	bl	8000610 <delay>
    RESET_ACTIVE;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <reset+0x84>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	2102      	movs	r1, #2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f002 fd32 	bl	80039f4 <HAL_GPIO_WritePin>
    delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f7ff fb3d 	bl	8000610 <delay>
    RESET_IDLE;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <reset+0x84>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f002 fd29 	bl	80039f4 <HAL_GPIO_WritePin>
    delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f7ff fb34 	bl	8000610 <delay>
	WriteCmdData(0xB0, 0x0000);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	20b0      	movs	r0, #176	; 0xb0
 8000fac:	f7ff fb96 	bl	80006dc <WriteCmdData>
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000036 	.word	0x20000036
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <read16bits>:

static uint16_t read16bits(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8000fca:	2390      	movs	r3, #144	; 0x90
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f002 fd0e 	bl	80039f4 <HAL_GPIO_WritePin>
 8000fd8:	2390      	movs	r3, #144	; 0x90
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f002 fd07 	bl	80039f4 <HAL_GPIO_WritePin>
 8000fe6:	2390      	movs	r3, #144	; 0x90
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f002 fd00 	bl	80039f4 <HAL_GPIO_WritePin>
 8000ff4:	2390      	movs	r3, #144	; 0x90
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 fcf9 	bl	80039f4 <HAL_GPIO_WritePin>
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	0a5b      	lsrs	r3, r3, #9
 800100a:	b29b      	uxth	r3, r3
 800100c:	2201      	movs	r2, #1
 800100e:	4013      	ands	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <read16bits+0x1f4>)
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	099b      	lsrs	r3, r3, #6
 8001018:	b29b      	uxth	r3, r3
 800101a:	2102      	movs	r1, #2
 800101c:	400b      	ands	r3, r1
 800101e:	b29b      	uxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	2390      	movs	r3, #144	; 0x90
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	2104      	movs	r1, #4
 8001030:	400b      	ands	r3, r1
 8001032:	b29b      	uxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b60      	ldr	r3, [pc, #384]	; (80011bc <read16bits+0x1f8>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	2108      	movs	r1, #8
 8001040:	400b      	ands	r3, r1
 8001042:	b29b      	uxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <read16bits+0x1f8>)
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	2110      	movs	r1, #16
 8001052:	400b      	ands	r3, r1
 8001054:	b29b      	uxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <read16bits+0x1f8>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	b29b      	uxth	r3, r3
 8001060:	18db      	adds	r3, r3, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	2120      	movs	r1, #32
 8001066:	400b      	ands	r3, r1
 8001068:	b29b      	uxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <read16bits+0x1f8>)
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b29b      	uxth	r3, r3
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	400b      	ands	r3, r1
 800107a:	b29b      	uxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b299      	uxth	r1, r3
 8001080:	2390      	movs	r3, #144	; 0x90
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	4013      	ands	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	430a      	orrs	r2, r1
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	2390      	movs	r3, #144	; 0x90
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	2201      	movs	r2, #1
 800109c:	2101      	movs	r1, #1
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 fca8 	bl	80039f4 <HAL_GPIO_WritePin>
 80010a4:	2390      	movs	r3, #144	; 0x90
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 fca1 	bl	80039f4 <HAL_GPIO_WritePin>
    READ_8(lo);
 80010b2:	2390      	movs	r3, #144	; 0x90
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2201      	movs	r2, #1
 80010b8:	2101      	movs	r1, #1
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 fc9a 	bl	80039f4 <HAL_GPIO_WritePin>
 80010c0:	2390      	movs	r3, #144	; 0x90
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	0018      	movs	r0, r3
 80010ca:	f002 fc93 	bl	80039f4 <HAL_GPIO_WritePin>
 80010ce:	2390      	movs	r3, #144	; 0x90
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	2200      	movs	r2, #0
 80010d4:	2101      	movs	r1, #1
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 fc8c 	bl	80039f4 <HAL_GPIO_WritePin>
 80010dc:	2390      	movs	r3, #144	; 0x90
 80010de:	05db      	lsls	r3, r3, #23
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fc85 	bl	80039f4 <HAL_GPIO_WritePin>
 80010ea:	2390      	movs	r3, #144	; 0x90
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	0a5b      	lsrs	r3, r3, #9
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2201      	movs	r2, #1
 80010f6:	4013      	ands	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <read16bits+0x1f4>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	099b      	lsrs	r3, r3, #6
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2102      	movs	r1, #2
 8001104:	400b      	ands	r3, r1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b2da      	uxtb	r2, r3
 800110c:	2390      	movs	r3, #144	; 0x90
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2104      	movs	r1, #4
 8001118:	400b      	ands	r3, r1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <read16bits+0x1f8>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2108      	movs	r1, #8
 8001128:	400b      	ands	r3, r1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <read16bits+0x1f8>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2110      	movs	r1, #16
 800113a:	400b      	ands	r3, r1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <read16bits+0x1f8>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	18db      	adds	r3, r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2120      	movs	r1, #32
 800114e:	400b      	ands	r3, r1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <read16bits+0x1f8>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	400b      	ands	r3, r1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	2390      	movs	r3, #144	; 0x90
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	227f      	movs	r2, #127	; 0x7f
 8001174:	4393      	bics	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	1d7b      	adds	r3, r7, #5
 800117a:	430a      	orrs	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	2390      	movs	r3, #144	; 0x90
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	0018      	movs	r0, r3
 8001188:	f002 fc34 	bl	80039f4 <HAL_GPIO_WritePin>
 800118c:	2390      	movs	r3, #144	; 0x90
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	2201      	movs	r2, #1
 8001192:	2101      	movs	r1, #1
 8001194:	0018      	movs	r0, r3
 8001196:	f002 fc2d 	bl	80039f4 <HAL_GPIO_WritePin>
    return (ret << 8) | lo;
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	1d7b      	adds	r3, r7, #5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000400 	.word	0x48000400

080011c0 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	0002      	movs	r2, r0
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	1d7b      	adds	r3, r7, #5
 80011ce:	1c0a      	adds	r2, r1, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    uint16_t ret;
    if (!done_reset)
 80011d2:	4b83      	ldr	r3, [pc, #524]	; (80013e0 <readReg+0x220>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <readReg+0x1e>
    {
        reset();
 80011da:	f7ff feaf 	bl	8000f3c <reset>
    }

    CS_ACTIVE;
 80011de:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <readReg+0x224>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	0018      	movs	r0, r3
 80011e6:	f002 fc05 	bl	80039f4 <HAL_GPIO_WritePin>
    WriteCmd(reg);
 80011ea:	2390      	movs	r3, #144	; 0x90
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 fbfe 	bl	80039f4 <HAL_GPIO_WritePin>
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b29a      	uxth	r2, r3
 8001200:	210f      	movs	r1, #15
 8001202:	187b      	adds	r3, r7, r1
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	240e      	movs	r4, #14
 8001208:	193b      	adds	r3, r7, r4
 800120a:	1dba      	adds	r2, r7, #6
 800120c:	8812      	ldrh	r2, [r2, #0]
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	2390      	movs	r3, #144	; 0x90
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	22e0      	movs	r2, #224	; 0xe0
 8001216:	04d2      	lsls	r2, r2, #19
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <readReg+0x224>)
 800121c:	2287      	movs	r2, #135	; 0x87
 800121e:	04d2      	lsls	r2, r2, #19
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <readReg+0x228>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0412      	lsls	r2, r2, #16
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	0008      	movs	r0, r1
 800122c:	183b      	adds	r3, r7, r0
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	025a      	lsls	r2, r3, #9
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	401a      	ands	r2, r3
 8001238:	183b      	adds	r3, r7, r0
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	0219      	lsls	r1, r3, #8
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	400b      	ands	r3, r1
 8001244:	431a      	orrs	r2, r3
 8001246:	183b      	adds	r3, r7, r0
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0059      	lsls	r1, r3, #1
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	400b      	ands	r3, r1
 8001252:	431a      	orrs	r2, r3
 8001254:	2390      	movs	r3, #144	; 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	183b      	adds	r3, r7, r0
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2208      	movs	r2, #8
 8001260:	401a      	ands	r2, r3
 8001262:	183b      	adds	r3, r7, r0
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2120      	movs	r1, #32
 800126a:	400b      	ands	r3, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	183b      	adds	r3, r7, r0
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	2110      	movs	r1, #16
 8001276:	400b      	ands	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	183b      	adds	r3, r7, r0
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0119      	lsls	r1, r3, #4
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	400b      	ands	r3, r1
 8001286:	431a      	orrs	r2, r3
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <readReg+0x224>)
 800128a:	619a      	str	r2, [r3, #24]
 800128c:	183b      	adds	r3, r7, r0
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	0019      	movs	r1, r3
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <readReg+0x228>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	400a      	ands	r2, r1
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	2390      	movs	r3, #144	; 0x90
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2200      	movs	r2, #0
 80012a2:	2102      	movs	r1, #2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f002 fba5 	bl	80039f4 <HAL_GPIO_WritePin>
 80012aa:	2390      	movs	r3, #144	; 0x90
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	2201      	movs	r2, #1
 80012b0:	2102      	movs	r1, #2
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 fb9e 	bl	80039f4 <HAL_GPIO_WritePin>
 80012b8:	2390      	movs	r3, #144	; 0x90
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f002 fb97 	bl	80039f4 <HAL_GPIO_WritePin>
 80012c6:	2390      	movs	r3, #144	; 0x90
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	22e0      	movs	r2, #224	; 0xe0
 80012cc:	04d2      	lsls	r2, r2, #19
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <readReg+0x224>)
 80012d2:	2287      	movs	r2, #135	; 0x87
 80012d4:	04d2      	lsls	r2, r2, #19
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <readReg+0x228>)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0412      	lsls	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	025a      	lsls	r2, r3, #9
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	401a      	ands	r2, r3
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0219      	lsls	r1, r3, #8
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	400b      	ands	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	0059      	lsls	r1, r3, #1
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	2390      	movs	r3, #144	; 0x90
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	619a      	str	r2, [r3, #24]
 800130e:	0020      	movs	r0, r4
 8001310:	183b      	adds	r3, r7, r0
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	401a      	ands	r2, r3
 8001318:	183b      	adds	r3, r7, r0
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2120      	movs	r1, #32
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	183b      	adds	r3, r7, r0
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	105b      	asrs	r3, r3, #1
 800132a:	2110      	movs	r1, #16
 800132c:	400b      	ands	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	183b      	adds	r3, r7, r0
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0119      	lsls	r1, r3, #4
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	400b      	ands	r3, r1
 800133c:	431a      	orrs	r2, r3
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <readReg+0x224>)
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	183b      	adds	r3, r7, r0
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	019b      	lsls	r3, r3, #6
 8001348:	0019      	movs	r1, r3
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <readReg+0x228>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	400a      	ands	r2, r1
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	2390      	movs	r3, #144	; 0x90
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	0018      	movs	r0, r3
 800135c:	f002 fb4a 	bl	80039f4 <HAL_GPIO_WritePin>
 8001360:	2390      	movs	r3, #144	; 0x90
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2201      	movs	r2, #1
 8001366:	2102      	movs	r1, #2
 8001368:	0018      	movs	r0, r3
 800136a:	f002 fb43 	bl	80039f4 <HAL_GPIO_WritePin>
 800136e:	2390      	movs	r3, #144	; 0x90
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2201      	movs	r2, #1
 8001374:	2102      	movs	r1, #2
 8001376:	0018      	movs	r0, r3
 8001378:	f002 fb3c 	bl	80039f4 <HAL_GPIO_WritePin>
 800137c:	2390      	movs	r3, #144	; 0x90
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	0018      	movs	r0, r3
 8001386:	f002 fb35 	bl	80039f4 <HAL_GPIO_WritePin>
    setReadDir();
 800138a:	f7ff f9bd 	bl	8000708 <setReadDir>
    delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff f93e 	bl	8000610 <delay>

    do {
    	ret = read16bits();
 8001394:	230c      	movs	r3, #12
 8001396:	18fc      	adds	r4, r7, r3
 8001398:	f7ff fe14 	bl	8000fc4 <read16bits>
 800139c:	0003      	movs	r3, r0
 800139e:	8023      	strh	r3, [r4, #0]
    } while (--index >= 0);
 80013a0:	1d7b      	adds	r3, r7, #5
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	1d7b      	adds	r3, r7, #5
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	1d7b      	adds	r3, r7, #5
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b7f      	cmp	r3, #127	; 0x7f
 80013b2:	d9ef      	bls.n	8001394 <readReg+0x1d4>

    RD_IDLE;
 80013b4:	2390      	movs	r3, #144	; 0x90
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	2201      	movs	r2, #1
 80013ba:	2101      	movs	r1, #1
 80013bc:	0018      	movs	r0, r3
 80013be:	f002 fb19 	bl	80039f4 <HAL_GPIO_WritePin>
    CS_IDLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <readReg+0x224>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	0018      	movs	r0, r3
 80013ca:	f002 fb13 	bl	80039f4 <HAL_GPIO_WritePin>
    setWriteDir();
 80013ce:	f7ff f9d7 	bl	8000780 <setWriteDir>
    return ret;
 80013d2:	230c      	movs	r3, #12
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	881b      	ldrh	r3, [r3, #0]
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b005      	add	sp, #20
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	20000036 	.word	0x20000036
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000800 	.word	0x48000800

080013ec <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0002      	movs	r2, r0
 80013f4:	1dbb      	adds	r3, r7, #6
 80013f6:	801a      	strh	r2, [r3, #0]
    uint16_t h = readReg(reg, 0);
 80013f8:	250e      	movs	r5, #14
 80013fa:	197c      	adds	r4, r7, r5
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fedc 	bl	80011c0 <readReg>
 8001408:	0003      	movs	r3, r0
 800140a:	8023      	strh	r3, [r4, #0]
    uint16_t l = readReg(reg, 1);
 800140c:	260c      	movs	r6, #12
 800140e:	19bc      	adds	r4, r7, r6
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff fed2 	bl	80011c0 <readReg>
 800141c:	0003      	movs	r3, r0
 800141e:	8023      	strh	r3, [r4, #0]
    return ((uint32_t) h << 16) | (l);
 8001420:	197b      	adds	r3, r7, r5
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	19bb      	adds	r3, r7, r6
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	4313      	orrs	r3, r2
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b005      	add	sp, #20
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001434 <tft_init>:

void tft_init(uint16_t ID)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	0002      	movs	r2, r0
 800143c:	1dbb      	adds	r3, r7, #6
 800143e:	801a      	strh	r2, [r3, #0]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    int16_t table_size;

    _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <tft_init+0x94>)
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <tft_init+0x98>)
 8001448:	801a      	strh	r2, [r3, #0]
		0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B]
		// 3.2 TM  3.2 Inch Initial Code not bad
		0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00,
		0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,
	};
	table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <tft_init+0x9c>)
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	2312      	movs	r3, #18
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	223b      	movs	r2, #59	; 0x3b
 8001454:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_height;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <tft_init+0xa0>)
 8001458:	60fb      	str	r3, [r7, #12]
	*p16 = 320;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	22a0      	movs	r2, #160	; 0xa0
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	801a      	strh	r2, [r3, #0]
	p16 = (int16_t *) &_width;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <tft_init+0xa4>)
 8001464:	60fb      	str	r3, [r7, #12]
	*p16 = 480;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	0052      	lsls	r2, r2, #1
 800146c:	801a      	strh	r2, [r3, #0]

    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <tft_init+0x94>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	001a      	movs	r2, r3
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	4013      	ands	r3, r2
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	4193      	sbcs	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <tft_init+0xa8>)
 8001484:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d012      	beq.n	80014b2 <tft_init+0x7e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <tft_init+0xac>)
 800148e:	2109      	movs	r1, #9
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fcee 	bl	8000e72 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001496:	2312      	movs	r3, #18
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2200      	movs	r2, #0
 800149c:	5e9a      	ldrsh	r2, [r3, r2]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff fce5 	bl	8000e72 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <tft_init+0xb0>)
 80014aa:	2106      	movs	r1, #6
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fce0 	bl	8000e72 <init_table>
    }
    setRotation(0);             //PORTRAIT
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f828 	bl	8001508 <setRotation>
    invertDisplay(false);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fb83 	bl	8001bc4 <invertDisplay>
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b006      	add	sp, #24
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	2000008c 	.word	0x2000008c
 80014cc:	00000403 	.word	0x00000403
 80014d0:	08005400 	.word	0x08005400
 80014d4:	20000006 	.word	0x20000006
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000090 	.word	0x20000090
 80014e0:	0800543c 	.word	0x0800543c
 80014e4:	08005448 	.word	0x08005448

080014e8 <readID>:

uint16_t readID(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
    uint16_t ret = readReg32(0xD3);
 80014ee:	20d3      	movs	r0, #211	; 0xd3
 80014f0:	f7ff ff7c 	bl	80013ec <readReg32>
 80014f4:	0002      	movs	r2, r0
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	801a      	strh	r2, [r3, #0]
    return ret;
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	881b      	ldrh	r3, [r3, #0]
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <setRotation>:
        setAddrWindow(0, 0, width() - 1, height() - 1);
    return 0;
}

void setRotation(uint8_t r)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	0002      	movs	r2, r0
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	701a      	strb	r2, [r3, #0]
   uint16_t GS, SS_v, ORG;
   uint8_t val;
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b9f      	ldr	r3, [pc, #636]	; (800179c <setRotation+0x294>)
 8001520:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8001522:	4b9e      	ldr	r3, [pc, #632]	; (800179c <setRotation+0x294>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	001a      	movs	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d002      	beq.n	8001534 <setRotation+0x2c>
 800152e:	23f0      	movs	r3, #240	; 0xf0
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	e001      	b.n	8001538 <setRotation+0x30>
 8001534:	23a0      	movs	r3, #160	; 0xa0
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4a99      	ldr	r2, [pc, #612]	; (80017a0 <setRotation+0x298>)
 800153a:	8013      	strh	r3, [r2, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 800153c:	4b97      	ldr	r3, [pc, #604]	; (800179c <setRotation+0x294>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	001a      	movs	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	4013      	ands	r3, r2
 8001546:	d002      	beq.n	800154e <setRotation+0x46>
 8001548:	23a0      	movs	r3, #160	; 0xa0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	e001      	b.n	8001552 <setRotation+0x4a>
 800154e:	23f0      	movs	r3, #240	; 0xf0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <setRotation+0x29c>)
 8001554:	8013      	strh	r3, [r2, #0]
   switch (rotation) {
 8001556:	4b91      	ldr	r3, [pc, #580]	; (800179c <setRotation+0x294>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00d      	beq.n	800157a <setRotation+0x72>
 800155e:	dc02      	bgt.n	8001566 <setRotation+0x5e>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <setRotation+0x68>
 8001564:	e018      	b.n	8001598 <setRotation+0x90>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d00c      	beq.n	8001584 <setRotation+0x7c>
 800156a:	2b03      	cmp	r3, #3
 800156c:	d00f      	beq.n	800158e <setRotation+0x86>
 800156e:	e013      	b.n	8001598 <setRotation+0x90>
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2248      	movs	r2, #72	; 0x48
 8001576:	701a      	strb	r2, [r3, #0]
       break;
 8001578:	e00e      	b.n	8001598 <setRotation+0x90>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800157a:	230f      	movs	r3, #15
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	701a      	strb	r2, [r3, #0]
       break;
 8001582:	e009      	b.n	8001598 <setRotation+0x90>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2298      	movs	r2, #152	; 0x98
 800158a:	701a      	strb	r2, [r3, #0]
       break;
 800158c:	e004      	b.n	8001598 <setRotation+0x90>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	22f8      	movs	r2, #248	; 0xf8
 8001594:	701a      	strb	r2, [r3, #0]
       break;
 8001596:	46c0      	nop			; (mov r8, r8)
   }
   if (_lcd_capable & INVERT_GS)
 8001598:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <setRotation+0x2a0>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	001a      	movs	r2, r3
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	d008      	beq.n	80015b8 <setRotation+0xb0>
       val ^= 0x80;
 80015a6:	210f      	movs	r1, #15
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	4252      	negs	r2, r2
 80015b0:	4053      	eors	r3, r2
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_SS)
 80015b8:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <setRotation+0x2a0>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	001a      	movs	r2, r3
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d007      	beq.n	80015d6 <setRotation+0xce>
       val ^= 0x40;
 80015c6:	210f      	movs	r1, #15
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	4053      	eors	r3, r2
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_RGB)
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <setRotation+0x2a0>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	001a      	movs	r2, r3
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d007      	beq.n	80015f4 <setRotation+0xec>
       val ^= 0x08;
 80015e4:	210f      	movs	r1, #15
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	4053      	eors	r3, r2
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80015f4:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <setRotation+0x2a0>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	001a      	movs	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	d021      	beq.n	8001644 <setRotation+0x13c>
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <setRotation+0x2a4>)
 8001602:	222a      	movs	r2, #42	; 0x2a
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <setRotation+0x2a8>)
 8001608:	222b      	movs	r2, #43	; 0x2b
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <setRotation+0x2ac>)
 800160e:	222c      	movs	r2, #44	; 0x2c
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <setRotation+0x2b0>)
 8001614:	222a      	movs	r2, #42	; 0x2a
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <setRotation+0x2b4>)
 800161a:	222a      	movs	r2, #42	; 0x2a
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <setRotation+0x2b8>)
 8001620:	222b      	movs	r2, #43	; 0x2b
 8001622:	801a      	strh	r2, [r3, #0]
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <setRotation+0x2bc>)
 8001626:	222b      	movs	r2, #43	; 0x2b
 8001628:	801a      	strh	r2, [r3, #0]
       WriteCmdParamN(0x36, 1, &val);
 800162a:	240f      	movs	r4, #15
 800162c:	193b      	adds	r3, r7, r4
 800162e:	001a      	movs	r2, r3
 8001630:	2101      	movs	r1, #1
 8001632:	2036      	movs	r0, #54	; 0x36
 8001634:	f7ff fa90 	bl	8000b58 <WriteCmdParamN>
       _lcd_madctl = val;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <setRotation+0x2c0>)
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	e05d      	b.n	8001700 <setRotation+0x1f8>
   }
   else {
	   _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <setRotation+0x2a4>)
 8001646:	2220      	movs	r2, #32
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <setRotation+0x2a8>)
 800164c:	2221      	movs	r2, #33	; 0x21
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <setRotation+0x2ac>)
 8001652:	2222      	movs	r2, #34	; 0x22
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <setRotation+0x2b0>)
 8001658:	2250      	movs	r2, #80	; 0x50
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	4b57      	ldr	r3, [pc, #348]	; (80017bc <setRotation+0x2b4>)
 800165e:	2251      	movs	r2, #81	; 0x51
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <setRotation+0x2b8>)
 8001664:	2252      	movs	r2, #82	; 0x52
 8001666:	801a      	strh	r2, [r3, #0]
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <setRotation+0x2bc>)
 800166a:	2253      	movs	r2, #83	; 0x53
 800166c:	801a      	strh	r2, [r3, #0]
	   GS = (val & 0x80) ? (1 << 15) : 0;
 800166e:	240f      	movs	r4, #15
 8001670:	193b      	adds	r3, r7, r4
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b29a      	uxth	r2, r3
 8001678:	2114      	movs	r1, #20
 800167a:	187b      	adds	r3, r7, r1
 800167c:	0bd2      	lsrs	r2, r2, #15
 800167e:	03d2      	lsls	r2, r2, #15
 8001680:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8001682:	187b      	adds	r3, r7, r1
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	229c      	movs	r2, #156	; 0x9c
 8001688:	0192      	lsls	r2, r2, #6
 800168a:	4313      	orrs	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	0019      	movs	r1, r3
 8001690:	2060      	movs	r0, #96	; 0x60
 8001692:	f7ff f823 	bl	80006dc <WriteCmdData>

	   SS_v = (val & 0x40) ? (1 << 8) : 0;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	b299      	uxth	r1, r3
 800169e:	2012      	movs	r0, #18
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0052      	lsls	r2, r2, #1
 80016a6:	400a      	ands	r2, r1
 80016a8:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x01, SS_v);     // set Driver Output Control
 80016aa:	183b      	adds	r3, r7, r0
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	0019      	movs	r1, r3
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff f813 	bl	80006dc <WriteCmdData>

	   ORG = (val & 0x20) ? (1 << 3) : 0;
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	109b      	asrs	r3, r3, #2
 80016bc:	b29a      	uxth	r2, r3
 80016be:	2316      	movs	r3, #22
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2108      	movs	r1, #8
 80016c4:	400a      	ands	r2, r1
 80016c6:	801a      	strh	r2, [r3, #0]
	   if (val & 0x08)
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	2308      	movs	r3, #8
 80016d0:	4013      	ands	r3, r2
 80016d2:	d007      	beq.n	80016e4 <setRotation+0x1dc>
		   ORG |= 0x1000;  //BGR
 80016d4:	2216      	movs	r2, #22
 80016d6:	18bb      	adds	r3, r7, r2
 80016d8:	18ba      	adds	r2, r7, r2
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0149      	lsls	r1, r1, #5
 80016e0:	430a      	orrs	r2, r1
 80016e2:	801a      	strh	r2, [r3, #0]
	   _lcd_madctl = ORG | 0x0030;
 80016e4:	2316      	movs	r3, #22
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <setRotation+0x2c0>)
 80016f2:	801a      	strh	r2, [r3, #0]
	   WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <setRotation+0x2c0>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	0019      	movs	r1, r3
 80016fa:	2003      	movs	r0, #3
 80016fc:	f7fe ffee 	bl	80006dc <WriteCmdData>
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <setRotation+0x294>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	001a      	movs	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4013      	ands	r3, r2
 800170a:	d02b      	beq.n	8001764 <setRotation+0x25c>
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <setRotation+0x2a0>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4013      	ands	r3, r2
 8001718:	d124      	bne.n	8001764 <setRotation+0x25c>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800171a:	2110      	movs	r1, #16
 800171c:	187b      	adds	r3, r7, r1
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <setRotation+0x2a4>)
 8001720:	8812      	ldrh	r2, [r2, #0]
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <setRotation+0x2a8>)
 8001726:	881a      	ldrh	r2, [r3, #0]
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <setRotation+0x2a4>)
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <setRotation+0x2a8>)
 800172e:	187a      	adds	r2, r7, r1
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	801a      	strh	r2, [r3, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001734:	187b      	adds	r3, r7, r1
 8001736:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <setRotation+0x2b0>)
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	801a      	strh	r2, [r3, #0]
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <setRotation+0x2b8>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <setRotation+0x2b0>)
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <setRotation+0x2b8>)
 8001746:	187a      	adds	r2, r7, r1
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	801a      	strh	r2, [r3, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 800174c:	187b      	adds	r3, r7, r1
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <setRotation+0x2b4>)
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <setRotation+0x2bc>)
 8001756:	881a      	ldrh	r2, [r3, #0]
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <setRotation+0x2b4>)
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <setRotation+0x2bc>)
 800175e:	187a      	adds	r2, r7, r1
 8001760:	8812      	ldrh	r2, [r2, #0]
 8001762:	801a      	strh	r2, [r3, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8001764:	f7fe ffa6 	bl	80006b4 <width>
 8001768:	0003      	movs	r3, r0
 800176a:	3b01      	subs	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	b21c      	sxth	r4, r3
 8001770:	f7fe ffaa 	bl	80006c8 <height>
 8001774:	0003      	movs	r3, r0
 8001776:	3b01      	subs	r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21b      	sxth	r3, r3
 800177c:	0022      	movs	r2, r4
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f86b 	bl	800185c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001786:	23f0      	movs	r3, #240	; 0xf0
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2200      	movs	r2, #0
 800178c:	0019      	movs	r1, r3
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f92e 	bl	80019f0 <vertScroll>
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b007      	add	sp, #28
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	20000039 	.word	0x20000039
 80017a0:	20000004 	.word	0x20000004
 80017a4:	20000006 	.word	0x20000006
 80017a8:	2000008c 	.word	0x2000008c
 80017ac:	20000094 	.word	0x20000094
 80017b0:	20000092 	.word	0x20000092
 80017b4:	2000008a 	.word	0x2000008a
 80017b8:	20000096 	.word	0x20000096
 80017bc:	2000009c 	.word	0x2000009c
 80017c0:	2000008e 	.word	0x2000008e
 80017c4:	20000098 	.word	0x20000098
 80017c8:	2000009e 	.word	0x2000009e

080017cc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	0004      	movs	r4, r0
 80017d4:	0008      	movs	r0, r1
 80017d6:	0011      	movs	r1, r2
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	1c22      	adds	r2, r4, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	1c02      	adds	r2, r0, #0
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	1cbb      	adds	r3, r7, #2
 80017e6:	1c0a      	adds	r2, r1, #0
 80017e8:	801a      	strh	r2, [r3, #0]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	2200      	movs	r2, #0
 80017ee:	5e9b      	ldrsh	r3, [r3, r2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db2c      	blt.n	800184e <drawPixel+0x82>
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	5e9b      	ldrsh	r3, [r3, r2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db27      	blt.n	800184e <drawPixel+0x82>
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	2400      	movs	r4, #0
 8001802:	5f1c      	ldrsh	r4, [r3, r4]
 8001804:	f7fe ff56 	bl	80006b4 <width>
 8001808:	0003      	movs	r3, r0
 800180a:	429c      	cmp	r4, r3
 800180c:	da1f      	bge.n	800184e <drawPixel+0x82>
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2400      	movs	r4, #0
 8001812:	5f1c      	ldrsh	r4, [r3, r4]
 8001814:	f7fe ff58 	bl	80006c8 <height>
 8001818:	0003      	movs	r3, r0
 800181a:	429c      	cmp	r4, r3
 800181c:	da17      	bge.n	800184e <drawPixel+0x82>
       return;
   setAddrWindow(x, y, x, y);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2400      	movs	r4, #0
 8001822:	5f1c      	ldrsh	r4, [r3, r4]
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	2200      	movs	r2, #0
 8001828:	5e9a      	ldrsh	r2, [r3, r2]
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2100      	movs	r1, #0
 800182e:	5e59      	ldrsh	r1, [r3, r1]
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	2000      	movs	r0, #0
 8001834:	5e18      	ldrsh	r0, [r3, r0]
 8001836:	0023      	movs	r3, r4
 8001838:	f000 f810 	bl	800185c <setAddrWindow>
   WriteCmdData(_MW, color);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <drawPixel+0x8c>)
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	1cbb      	adds	r3, r7, #2
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f7fe ff48 	bl	80006dc <WriteCmdData>
 800184c:	e000      	b.n	8001850 <drawPixel+0x84>
       return;
 800184e:	46c0      	nop			; (mov r8, r8)
}
 8001850:	46bd      	mov	sp, r7
 8001852:	b003      	add	sp, #12
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	2000008a 	.word	0x2000008a

0800185c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af02      	add	r7, sp, #8
 8001862:	0005      	movs	r5, r0
 8001864:	000c      	movs	r4, r1
 8001866:	0010      	movs	r0, r2
 8001868:	0019      	movs	r1, r3
 800186a:	1dbb      	adds	r3, r7, #6
 800186c:	1c2a      	adds	r2, r5, #0
 800186e:	801a      	strh	r2, [r3, #0]
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	1c22      	adds	r2, r4, #0
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	1c02      	adds	r2, r0, #0
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	003b      	movs	r3, r7
 800187e:	1c0a      	adds	r2, r1, #0
 8001880:	801a      	strh	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <setAddrWindow+0x174>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	001a      	movs	r2, r3
 8001888:	2301      	movs	r3, #1
 800188a:	4013      	ands	r3, r2
 800188c:	d032      	beq.n	80018f4 <setAddrWindow+0x98>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <setAddrWindow+0x178>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b2d8      	uxtb	r0, r3
 8001894:	1dbb      	adds	r3, r7, #6
 8001896:	2200      	movs	r2, #0
 8001898:	5e9b      	ldrsh	r3, [r3, r2]
 800189a:	121b      	asrs	r3, r3, #8
 800189c:	b21b      	sxth	r3, r3
 800189e:	b2d9      	uxtb	r1, r3
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	1cbb      	adds	r3, r7, #2
 80018a8:	2400      	movs	r4, #0
 80018aa:	5f1b      	ldrsh	r3, [r3, r4]
 80018ac:	121b      	asrs	r3, r3, #8
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	b2dc      	uxtb	r4, r3
 80018b2:	1cbb      	adds	r3, r7, #2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	0023      	movs	r3, r4
 80018bc:	f7ff faa8 	bl	8000e10 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80018c0:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <setAddrWindow+0x17c>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	5e9b      	ldrsh	r3, [r3, r2]
 80018cc:	121b      	asrs	r3, r3, #8
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	b2d9      	uxtb	r1, r3
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	003b      	movs	r3, r7
 80018da:	2400      	movs	r4, #0
 80018dc:	5f1b      	ldrsh	r3, [r3, r4]
 80018de:	121b      	asrs	r3, r3, #8
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b2dc      	uxtb	r4, r3
 80018e4:	003b      	movs	r3, r7
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	0023      	movs	r3, r4
 80018ee:	f7ff fa8f 	bl	8000e10 <WriteCmdParam4>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80018f2:	e068      	b.n	80019c6 <setAddrWindow+0x16a>
       WriteCmdData(_MC, x);
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <setAddrWindow+0x180>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	1dbb      	adds	r3, r7, #6
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7fe feec 	bl	80006dc <WriteCmdData>
       WriteCmdData(_MP, y);
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <setAddrWindow+0x184>)
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	0019      	movs	r1, r3
 800190e:	0010      	movs	r0, r2
 8001910:	f7fe fee4 	bl	80006dc <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	2100      	movs	r1, #0
 800191a:	5e52      	ldrsh	r2, [r2, r1]
 800191c:	2100      	movs	r1, #0
 800191e:	5e5b      	ldrsh	r3, [r3, r1]
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <setAddrWindow+0xd8>
 8001924:	1d3a      	adds	r2, r7, #4
 8001926:	003b      	movs	r3, r7
 8001928:	2100      	movs	r1, #0
 800192a:	5e52      	ldrsh	r2, [r2, r1]
 800192c:	2100      	movs	r1, #0
 800192e:	5e5b      	ldrsh	r3, [r3, r1]
 8001930:	429a      	cmp	r2, r3
 8001932:	d048      	beq.n	80019c6 <setAddrWindow+0x16a>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <setAddrWindow+0x174>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	2320      	movs	r3, #32
 800193c:	4013      	ands	r3, r2
 800193e:	d022      	beq.n	8001986 <setAddrWindow+0x12a>
               if (rotation & 1)
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <setAddrWindow+0x188>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	001a      	movs	r2, r3
 8001946:	2301      	movs	r3, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d00e      	beq.n	800196a <setAddrWindow+0x10e>
                   y1 = y = (y1 << 8) | y;
 800194c:	003b      	movs	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	5e9b      	ldrsh	r3, [r3, r2]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b219      	sxth	r1, r3
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	1d3a      	adds	r2, r7, #4
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	003b      	movs	r3, r7
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	8812      	ldrh	r2, [r2, #0]
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e00d      	b.n	8001986 <setAddrWindow+0x12a>
                   x1 = x = (x1 << 8) | x;
 800196a:	1cbb      	adds	r3, r7, #2
 800196c:	2200      	movs	r2, #0
 800196e:	5e9b      	ldrsh	r3, [r3, r2]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b219      	sxth	r1, r3
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	1dba      	adds	r2, r7, #6
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	1cbb      	adds	r3, r7, #2
 8001980:	1dba      	adds	r2, r7, #6
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	801a      	strh	r2, [r3, #0]
           WriteCmdData(_SC, x);
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <setAddrWindow+0x178>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	0019      	movs	r1, r3
 8001990:	0010      	movs	r0, r2
 8001992:	f7fe fea3 	bl	80006dc <WriteCmdData>
           WriteCmdData(_SP, y);
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <setAddrWindow+0x17c>)
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f7fe fe9b 	bl	80006dc <WriteCmdData>
           WriteCmdData(_EC, x1);
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <setAddrWindow+0x18c>)
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	1cbb      	adds	r3, r7, #2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	0019      	movs	r1, r3
 80019b0:	0010      	movs	r0, r2
 80019b2:	f7fe fe93 	bl	80006dc <WriteCmdData>
           WriteCmdData(_EP, y1);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <setAddrWindow+0x190>)
 80019b8:	881a      	ldrh	r2, [r3, #0]
 80019ba:	003b      	movs	r3, r7
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	0019      	movs	r1, r3
 80019c0:	0010      	movs	r0, r2
 80019c2:	f7fe fe8b 	bl	80006dc <WriteCmdData>
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	20000096 	.word	0x20000096
 80019d8:	2000008e 	.word	0x2000008e
 80019dc:	20000094 	.word	0x20000094
 80019e0:	20000092 	.word	0x20000092
 80019e4:	20000039 	.word	0x20000039
 80019e8:	2000009c 	.word	0x2000009c
 80019ec:	20000098 	.word	0x20000098

080019f0 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	0004      	movs	r4, r0
 80019f8:	0008      	movs	r0, r1
 80019fa:	0011      	movs	r1, r2
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	1c22      	adds	r2, r4, #0
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	1c02      	adds	r2, r0, #0
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	1c0a      	adds	r2, r1, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8001a0e:	1dbb      	adds	r3, r7, #6
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	425b      	negs	r3, r3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	33e1      	adds	r3, #225	; 0xe1
 8001a20:	33ff      	adds	r3, #255	; 0xff
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	2316      	movs	r3, #22
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	801a      	strh	r2, [r3, #0]
    int16_t vsp;

	if (_lcd_ID == 0x9327) bfa += 32;
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <vertScroll+0x18c>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <vertScroll+0x190>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d106      	bne.n	8001a42 <vertScroll+0x52>
 8001a34:	2116      	movs	r1, #22
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3320      	adds	r3, #32
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	801a      	strh	r2, [r3, #0]

	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	2200      	movs	r2, #0
 8001a46:	5e9a      	ldrsh	r2, [r3, r2]
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5e5b      	ldrsh	r3, [r3, r1]
 8001a4e:	425b      	negs	r3, r3
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dd07      	ble.n	8001a64 <vertScroll+0x74>
 8001a54:	1cba      	adds	r2, r7, #2
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5e52      	ldrsh	r2, [r2, r1]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5e5b      	ldrsh	r3, [r3, r1]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	db02      	blt.n	8001a6a <vertScroll+0x7a>
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	2200      	movs	r2, #0
 8001a68:	801a      	strh	r2, [r3, #0]
	vsp = top + offset; // vertical start position
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	1cbb      	adds	r3, r7, #2
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	18d3      	adds	r3, r2, r3
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	2314      	movs	r3, #20
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	801a      	strh	r2, [r3, #0]

	if (offset < 0)
 8001a7c:	1cbb      	adds	r3, r7, #2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	5e9b      	ldrsh	r3, [r3, r2]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da08      	bge.n	8001a98 <vertScroll+0xa8>
        vsp += scrollines;          //keep in unsigned range
 8001a86:	2114      	movs	r1, #20
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1) {
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <vertScroll+0x194>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d056      	beq.n	8001b52 <vertScroll+0x162>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8001aaa:	121b      	asrs	r3, r3, #8
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	210c      	movs	r1, #12
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
        d[1] = top;
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	705a      	strb	r2, [r3, #1]
        d[2] = scrollines >> 8; //VSA
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8001ac6:	121b      	asrs	r3, r3, #8
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	709a      	strb	r2, [r3, #2]
        d[3] = scrollines;
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	70da      	strb	r2, [r3, #3]
        d[4] = bfa >> 8;        //BFA
 8001ada:	2016      	movs	r0, #22
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ae2:	121b      	asrs	r3, r3, #8
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	711a      	strb	r2, [r3, #4]
        d[5] = bfa;
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	715a      	strb	r2, [r3, #5]
        WriteCmdParamN(0x33, 6, d);
 8001af6:	000c      	movs	r4, r1
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	001a      	movs	r2, r3
 8001afc:	2106      	movs	r1, #6
 8001afe:	2033      	movs	r0, #51	; 0x33
 8001b00:	f7ff f82a 	bl	8000b58 <WriteCmdParamN>
		d[0] = vsp >> 8;        //VSP
 8001b04:	2014      	movs	r0, #20
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	2200      	movs	r2, #0
 8001b0a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b0c:	121b      	asrs	r3, r3, #8
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	0021      	movs	r1, r4
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	701a      	strb	r2, [r3, #0]
        d[1] = vsp;
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	705a      	strb	r2, [r3, #1]
        WriteCmdParamN(0x37, 2, d);
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	001a      	movs	r2, r3
 8001b26:	2102      	movs	r1, #2
 8001b28:	2037      	movs	r0, #55	; 0x37
 8001b2a:	f7ff f815 	bl	8000b58 <WriteCmdParamN>
		if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8001b2e:	1cbb      	adds	r3, r7, #2
 8001b30:	2200      	movs	r2, #0
 8001b32:	5e9b      	ldrsh	r3, [r3, r2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11d      	bne.n	8001b74 <vertScroll+0x184>
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <vertScroll+0x194>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d017      	beq.n	8001b74 <vertScroll+0x184>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2013      	movs	r0, #19
 8001b4a:	f7ff f805 	bl	8000b58 <WriteCmdParamN>
		}
		return;
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	e010      	b.n	8001b74 <vertScroll+0x184>
    }

	// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
	WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <vertScroll+0x198>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2202      	movs	r2, #2
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	2061      	movs	r0, #97	; 0x61
 8001b60:	f7fe fdbc 	bl	80006dc <WriteCmdData>
	WriteCmdData(0x6A, vsp);        //VL#
 8001b64:	2314      	movs	r3, #20
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	206a      	movs	r0, #106	; 0x6a
 8001b6e:	f7fe fdb5 	bl	80006dc <WriteCmdData>
 8001b72:	e000      	b.n	8001b76 <vertScroll+0x186>
		return;
 8001b74:	46c0      	nop			; (mov r8, r8)
}
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b007      	add	sp, #28
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	2000009a 	.word	0x2000009a
 8001b80:	00009327 	.word	0x00009327
 8001b84:	2000008c 	.word	0x2000008c
 8001b88:	20000090 	.word	0x20000090

08001b8c <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	0002      	movs	r2, r0
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <fillScreen+0x30>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <fillScreen+0x34>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b219      	sxth	r1, r3
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	000b      	movs	r3, r1
 8001bac:	2100      	movs	r1, #0
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 fd00 	bl	80025b4 <fillRect>
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	20000006 	.word	0x20000006

08001bc4 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	0002      	movs	r2, r0
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	701a      	strb	r2, [r3, #0]
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <invertDisplay+0x68>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	4013      	ands	r3, r2
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	4193      	sbcs	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4053      	eors	r3, r2
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <invertDisplay+0x6c>)
 8001bf2:	801a      	strh	r2, [r3, #0]

    if (_lcd_capable & MIPI_DCS_REV1)
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <invertDisplay+0x68>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d00c      	beq.n	8001c1a <invertDisplay+0x56>
    {
		WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <invertDisplay+0x6c>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <invertDisplay+0x48>
 8001c08:	2321      	movs	r3, #33	; 0x21
 8001c0a:	e000      	b.n	8001c0e <invertDisplay+0x4a>
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe ffa0 	bl	8000b58 <WriteCmdParamN>
        return;
 8001c18:	e005      	b.n	8001c26 <invertDisplay+0x62>
    }

    WriteCmdData(0x61, _lcd_rev);
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <invertDisplay+0x6c>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	0019      	movs	r1, r3
 8001c20:	2061      	movs	r0, #97	; 0x61
 8001c22:	f7fe fd5b 	bl	80006dc <WriteCmdData>
}
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000008c 	.word	0x2000008c
 8001c30:	20000090 	.word	0x20000090

08001c34 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	0005      	movs	r5, r0
 8001c3c:	000c      	movs	r4, r1
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	1dbb      	adds	r3, r7, #6
 8001c44:	1c2a      	adds	r2, r5, #0
 8001c46:	801a      	strh	r2, [r3, #0]
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	1c22      	adds	r2, r4, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	1cbb      	adds	r3, r7, #2
 8001c50:	1c02      	adds	r2, r0, #0
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	003b      	movs	r3, r7
 8001c56:	1c0a      	adds	r2, r1, #0
 8001c58:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, 1, h, color);
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	5e9a      	ldrsh	r2, [r3, r2]
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2100      	movs	r1, #0
 8001c64:	5e59      	ldrsh	r1, [r3, r1]
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	2000      	movs	r0, #0
 8001c6a:	5e18      	ldrsh	r0, [r3, r0]
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	0013      	movs	r3, r2
 8001c74:	2201      	movs	r2, #1
 8001c76:	f000 fc9d 	bl	80025b4 <fillRect>
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}

08001c82 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001c82:	b5b0      	push	{r4, r5, r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	0005      	movs	r5, r0
 8001c8a:	000c      	movs	r4, r1
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	1dbb      	adds	r3, r7, #6
 8001c92:	1c2a      	adds	r2, r5, #0
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	1c22      	adds	r2, r4, #0
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	1cbb      	adds	r3, r7, #2
 8001c9e:	1c02      	adds	r2, r0, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	003b      	movs	r3, r7
 8001ca4:	1c0a      	adds	r2, r1, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, w, 1, color);
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	2200      	movs	r2, #0
 8001cac:	5e9a      	ldrsh	r2, [r3, r2]
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5e59      	ldrsh	r1, [r3, r1]
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	5e18      	ldrsh	r0, [r3, r0]
 8001cba:	003b      	movs	r3, r7
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f000 fc77 	bl	80025b4 <fillRect>
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}

08001cce <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	0004      	movs	r4, r0
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	0011      	movs	r1, r2
 8001cda:	1dbb      	adds	r3, r7, #6
 8001cdc:	1c22      	adds	r2, r4, #0
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	1c02      	adds	r2, r0, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	1cbb      	adds	r3, r7, #2
 8001ce8:	1c0a      	adds	r2, r1, #0
 8001cea:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8001cec:	1cbb      	adds	r3, r7, #2
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5e59      	ldrsh	r1, [r3, r1]
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	5e1b      	ldrsh	r3, [r3, r0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fd65 	bl	80017cc <drawPixel>
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b003      	add	sp, #12
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001d0a:	b5b0      	push	{r4, r5, r7, lr}
 8001d0c:	b088      	sub	sp, #32
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	0005      	movs	r5, r0
 8001d12:	000c      	movs	r4, r1
 8001d14:	0010      	movs	r0, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	1c2a      	adds	r2, r5, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	1c22      	adds	r2, r4, #0
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	1cbb      	adds	r3, r7, #2
 8001d26:	1c02      	adds	r2, r0, #0
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	003b      	movs	r3, r7
 8001d2c:	1c0a      	adds	r2, r1, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001d30:	003b      	movs	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	5e9a      	ldrsh	r2, [r3, r2]
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5e5b      	ldrsh	r3, [r3, r1]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	17d9      	asrs	r1, r3, #31
 8001d40:	185a      	adds	r2, r3, r1
 8001d42:	404a      	eors	r2, r1
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	2100      	movs	r1, #0
 8001d48:	5e59      	ldrsh	r1, [r3, r1]
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	5e1b      	ldrsh	r3, [r3, r0]
 8001d50:	1acb      	subs	r3, r1, r3
 8001d52:	17d9      	asrs	r1, r3, #31
 8001d54:	185b      	adds	r3, r3, r1
 8001d56:	404b      	eors	r3, r1
 8001d58:	2101      	movs	r1, #1
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dc01      	bgt.n	8001d62 <writeLine+0x58>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	1c19      	adds	r1, r3, #0
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	211a      	movs	r1, #26
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	5e9b      	ldrsh	r3, [r3, r2]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d019      	beq.n	8001da8 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8001d74:	2118      	movs	r1, #24
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	1dba      	adds	r2, r7, #6
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	1dbb      	adds	r3, r7, #6
 8001d80:	1d3a      	adds	r2, r7, #4
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	187a      	adds	r2, r7, r1
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8001d8e:	2116      	movs	r1, #22
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	1cba      	adds	r2, r7, #2
 8001d94:	8812      	ldrh	r2, [r2, #0]
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	1cbb      	adds	r3, r7, #2
 8001d9a:	003a      	movs	r2, r7
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	003b      	movs	r3, r7
 8001da2:	187a      	adds	r2, r7, r1
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8001da8:	1dba      	adds	r2, r7, #6
 8001daa:	1cbb      	adds	r3, r7, #2
 8001dac:	2100      	movs	r1, #0
 8001dae:	5e52      	ldrsh	r2, [r2, r1]
 8001db0:	2100      	movs	r1, #0
 8001db2:	5e5b      	ldrsh	r3, [r3, r1]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd19      	ble.n	8001dec <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8001db8:	2114      	movs	r1, #20
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	1dba      	adds	r2, r7, #6
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	1cba      	adds	r2, r7, #2
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	1cbb      	adds	r3, r7, #2
 8001dcc:	187a      	adds	r2, r7, r1
 8001dce:	8812      	ldrh	r2, [r2, #0]
 8001dd0:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8001dd2:	2112      	movs	r1, #18
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	1d3a      	adds	r2, r7, #4
 8001dd8:	8812      	ldrh	r2, [r2, #0]
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	003a      	movs	r2, r7
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	003b      	movs	r3, r7
 8001de6:	187a      	adds	r2, r7, r1
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001dec:	1cbb      	adds	r3, r7, #2
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	1dbb      	adds	r3, r7, #6
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2110      	movs	r1, #16
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	5e9a      	ldrsh	r2, [r3, r2]
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2000      	movs	r0, #0
 8001e08:	5e1b      	ldrsh	r3, [r3, r0]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	17d8      	asrs	r0, r3, #31
 8001e0e:	181a      	adds	r2, r3, r0
 8001e10:	4042      	eors	r2, r0
 8001e12:	230e      	movs	r3, #14
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8001e18:	231e      	movs	r3, #30
 8001e1a:	18fa      	adds	r2, r7, r3
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5e5b      	ldrsh	r3, [r3, r1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da00      	bge.n	8001e28 <writeLine+0x11e>
 8001e26:	3301      	adds	r3, #1
 8001e28:	105b      	asrs	r3, r3, #1
 8001e2a:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8001e2c:	1d3a      	adds	r2, r7, #4
 8001e2e:	003b      	movs	r3, r7
 8001e30:	2100      	movs	r1, #0
 8001e32:	5e52      	ldrsh	r2, [r2, r1]
 8001e34:	2100      	movs	r1, #0
 8001e36:	5e5b      	ldrsh	r3, [r3, r1]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	da04      	bge.n	8001e46 <writeLine+0x13c>
        ystep = 1;
 8001e3c:	231c      	movs	r3, #28
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	e04e      	b.n	8001ee4 <writeLine+0x1da>
    } else {
        ystep = -1;
 8001e46:	231c      	movs	r3, #28
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8001e50:	e048      	b.n	8001ee4 <writeLine+0x1da>
        if (steep) {
 8001e52:	231a      	movs	r3, #26
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	5e9b      	ldrsh	r3, [r3, r2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8001e5e:	2330      	movs	r3, #48	; 0x30
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	2100      	movs	r1, #0
 8001e68:	5e59      	ldrsh	r1, [r3, r1]
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	5e1b      	ldrsh	r3, [r3, r0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff ff2c 	bl	8001cce <writePixel>
 8001e76:	e00b      	b.n	8001e90 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8001e78:	2330      	movs	r3, #48	; 0x30
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2100      	movs	r1, #0
 8001e82:	5e59      	ldrsh	r1, [r3, r1]
 8001e84:	1dbb      	adds	r3, r7, #6
 8001e86:	2000      	movs	r0, #0
 8001e88:	5e1b      	ldrsh	r3, [r3, r0]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff ff1f 	bl	8001cce <writePixel>
        }
        err -= dy;
 8001e90:	211e      	movs	r1, #30
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	230e      	movs	r3, #14
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	5e9b      	ldrsh	r3, [r3, r2]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da12      	bge.n	8001ed4 <writeLine+0x1ca>
            y0 += ystep;
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	881a      	ldrh	r2, [r3, #0]
 8001eb2:	231c      	movs	r3, #28
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	801a      	strh	r2, [r3, #0]
            err += dx;
 8001ec0:	211e      	movs	r1, #30
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	1dba      	adds	r2, r7, #6
 8001ee6:	1cbb      	adds	r3, r7, #2
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5e52      	ldrsh	r2, [r2, r1]
 8001eec:	2100      	movs	r1, #0
 8001eee:	5e5b      	ldrsh	r3, [r3, r1]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	ddae      	ble.n	8001e52 <writeLine+0x148>
        }
    }
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b008      	add	sp, #32
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}

08001efc <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001efc:	b5b0      	push	{r4, r5, r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	0005      	movs	r5, r0
 8001f04:	000c      	movs	r4, r1
 8001f06:	0010      	movs	r0, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	1dbb      	adds	r3, r7, #6
 8001f0c:	1c2a      	adds	r2, r5, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	1c22      	adds	r2, r4, #0
 8001f14:	801a      	strh	r2, [r3, #0]
 8001f16:	1cbb      	adds	r3, r7, #2
 8001f18:	1c02      	adds	r2, r0, #0
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	003b      	movs	r3, r7
 8001f1e:	1c0a      	adds	r2, r1, #0
 8001f20:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8001f22:	1dba      	adds	r2, r7, #6
 8001f24:	1cbb      	adds	r3, r7, #2
 8001f26:	2100      	movs	r1, #0
 8001f28:	5e52      	ldrsh	r2, [r2, r1]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5e5b      	ldrsh	r3, [r3, r1]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d12a      	bne.n	8001f88 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8001f32:	1d3a      	adds	r2, r7, #4
 8001f34:	003b      	movs	r3, r7
 8001f36:	2100      	movs	r1, #0
 8001f38:	5e52      	ldrsh	r2, [r2, r1]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5e5b      	ldrsh	r3, [r3, r1]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dd0c      	ble.n	8001f5c <drawLine+0x60>
 8001f42:	210c      	movs	r1, #12
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	1d3a      	adds	r2, r7, #4
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	003a      	movs	r2, r7
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	003b      	movs	r3, r7
 8001f56:	187a      	adds	r2, r7, r1
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	2320      	movs	r3, #32
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	881c      	ldrh	r4, [r3, #0]
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2100      	movs	r1, #0
 8001f78:	5e59      	ldrsh	r1, [r3, r1]
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	5e18      	ldrsh	r0, [r3, r0]
 8001f80:	0023      	movs	r3, r4
 8001f82:	f7ff fe57 	bl	8001c34 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8001f86:	e045      	b.n	8002014 <drawLine+0x118>
    } else if(y0 == y1){
 8001f88:	1d3a      	adds	r2, r7, #4
 8001f8a:	003b      	movs	r3, r7
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5e52      	ldrsh	r2, [r2, r1]
 8001f90:	2100      	movs	r1, #0
 8001f92:	5e5b      	ldrsh	r3, [r3, r1]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d12a      	bne.n	8001fee <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8001f98:	1dba      	adds	r2, r7, #6
 8001f9a:	1cbb      	adds	r3, r7, #2
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5e52      	ldrsh	r2, [r2, r1]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5e5b      	ldrsh	r3, [r3, r1]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dd0c      	ble.n	8001fc2 <drawLine+0xc6>
 8001fa8:	210e      	movs	r1, #14
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	1dba      	adds	r2, r7, #6
 8001fae:	8812      	ldrh	r2, [r2, #0]
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	1dbb      	adds	r3, r7, #6
 8001fb4:	1cba      	adds	r2, r7, #2
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	187a      	adds	r2, r7, r1
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	881c      	ldrh	r4, [r3, #0]
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5e59      	ldrsh	r1, [r3, r1]
 8001fe0:	1dbb      	adds	r3, r7, #6
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	5e18      	ldrsh	r0, [r3, r0]
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	f7ff fe4b 	bl	8001c82 <drawFastHLine>
}
 8001fec:	e012      	b.n	8002014 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8001fee:	003b      	movs	r3, r7
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	5f1c      	ldrsh	r4, [r3, r4]
 8001ff4:	1cbb      	adds	r3, r7, #2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	5e9a      	ldrsh	r2, [r3, r2]
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5e59      	ldrsh	r1, [r3, r1]
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	2000      	movs	r0, #0
 8002004:	5e18      	ldrsh	r0, [r3, r0]
 8002006:	2320      	movs	r3, #32
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	0023      	movs	r3, r4
 8002010:	f7ff fe7b 	bl	8001d0a <writeLine>
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bdb0      	pop	{r4, r5, r7, pc}

0800201c <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	0005      	movs	r5, r0
 8002024:	000c      	movs	r4, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	1c2a      	adds	r2, r5, #0
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	1c22      	adds	r2, r4, #0
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	1cbb      	adds	r3, r7, #2
 8002038:	1c02      	adds	r2, r0, #0
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	003b      	movs	r3, r7
 800203e:	1c0a      	adds	r2, r1, #0
 8002040:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8002042:	1cbb      	adds	r3, r7, #2
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29a      	uxth	r2, r3
 800204c:	2316      	movs	r3, #22
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002052:	2314      	movs	r3, #20
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2201      	movs	r2, #1
 8002058:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 800205a:	1cbb      	adds	r3, r7, #2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	1c1a      	adds	r2, r3, #0
 8002060:	03d2      	lsls	r2, r2, #15
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	18db      	adds	r3, r3, r3
 8002066:	b29a      	uxth	r2, r3
 8002068:	2312      	movs	r3, #18
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 800206e:	2310      	movs	r3, #16
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 8002076:	230e      	movs	r3, #14
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	1cba      	adds	r2, r7, #2
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	1cbb      	adds	r3, r7, #2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	b219      	sxth	r1, r3
 800208e:	003b      	movs	r3, r7
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	2000      	movs	r0, #0
 8002096:	5e1b      	ldrsh	r3, [r3, r0]
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fe18 	bl	8001cce <writePixel>
    writePixel(x0  , y0-r, color);
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	1cbb      	adds	r3, r7, #2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b219      	sxth	r1, r3
 80020ac:	003b      	movs	r3, r7
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	2000      	movs	r0, #0
 80020b4:	5e1b      	ldrsh	r3, [r3, r0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fe09 	bl	8001cce <writePixel>
    writePixel(x0+r, y0  , color);
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	1cbb      	adds	r3, r7, #2
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b218      	sxth	r0, r3
 80020ca:	003b      	movs	r3, r7
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2100      	movs	r1, #0
 80020d2:	5e5b      	ldrsh	r3, [r3, r1]
 80020d4:	0019      	movs	r1, r3
 80020d6:	f7ff fdfa 	bl	8001cce <writePixel>
    writePixel(x0-r, y0  , color);
 80020da:	1dbb      	adds	r3, r7, #6
 80020dc:	881a      	ldrh	r2, [r3, #0]
 80020de:	1cbb      	adds	r3, r7, #2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b218      	sxth	r0, r3
 80020e8:	003b      	movs	r3, r7
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2100      	movs	r1, #0
 80020f0:	5e5b      	ldrsh	r3, [r3, r1]
 80020f2:	0019      	movs	r1, r3
 80020f4:	f7ff fdeb 	bl	8001cce <writePixel>

    while (x<y) {
 80020f8:	e0d1      	b.n	800229e <drawCircle+0x282>
        if (f >= 0) {
 80020fa:	2316      	movs	r3, #22
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	5e9b      	ldrsh	r3, [r3, r2]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db18      	blt.n	8002138 <drawCircle+0x11c>
            y--;
 8002106:	210e      	movs	r1, #14
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2200      	movs	r2, #0
 800210c:	5e9b      	ldrsh	r3, [r3, r2]
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	187b      	adds	r3, r7, r1
 8002116:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002118:	2112      	movs	r1, #18
 800211a:	187b      	adds	r3, r7, r1
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	3302      	adds	r3, #2
 8002120:	b29a      	uxth	r2, r3
 8002122:	187b      	adds	r3, r7, r1
 8002124:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 8002126:	2016      	movs	r0, #22
 8002128:	183b      	adds	r3, r7, r0
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	187b      	adds	r3, r7, r1
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	b29a      	uxth	r2, r3
 8002134:	183b      	adds	r3, r7, r0
 8002136:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002138:	2110      	movs	r1, #16
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2200      	movs	r2, #0
 800213e:	5e9b      	ldrsh	r3, [r3, r2]
 8002140:	b29b      	uxth	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	187b      	adds	r3, r7, r1
 8002148:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 800214a:	2014      	movs	r0, #20
 800214c:	183b      	adds	r3, r7, r0
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	3302      	adds	r3, #2
 8002152:	b29a      	uxth	r2, r3
 8002154:	183b      	adds	r3, r7, r0
 8002156:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 8002158:	2416      	movs	r4, #22
 800215a:	193b      	adds	r3, r7, r4
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	183b      	adds	r3, r7, r0
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	18d3      	adds	r3, r2, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	193b      	adds	r3, r7, r4
 8002168:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	000c      	movs	r4, r1
 8002170:	193b      	adds	r3, r7, r4
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	b29b      	uxth	r3, r3
 8002178:	b218      	sxth	r0, r3
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	881a      	ldrh	r2, [r3, #0]
 800217e:	250e      	movs	r5, #14
 8002180:	197b      	adds	r3, r7, r5
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	b219      	sxth	r1, r3
 800218a:	003b      	movs	r3, r7
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	001a      	movs	r2, r3
 8002190:	f7ff fd9d 	bl	8001cce <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8002194:	1dbb      	adds	r3, r7, #6
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	193b      	adds	r3, r7, r4
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b218      	sxth	r0, r3
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	197b      	adds	r3, r7, r5
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	18d3      	adds	r3, r2, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b219      	sxth	r1, r3
 80021b0:	003b      	movs	r3, r7
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	001a      	movs	r2, r3
 80021b6:	f7ff fd8a 	bl	8001cce <writePixel>
        writePixel(x0 + x, y0 - y, color);
 80021ba:	1dbb      	adds	r3, r7, #6
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b218      	sxth	r0, r3
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	197b      	adds	r3, r7, r5
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b219      	sxth	r1, r3
 80021d6:	003b      	movs	r3, r7
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	001a      	movs	r2, r3
 80021dc:	f7ff fd77 	bl	8001cce <writePixel>
        writePixel(x0 - x, y0 - y, color);
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b218      	sxth	r0, r3
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b219      	sxth	r1, r3
 80021fc:	003b      	movs	r3, r7
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	f7ff fd64 	bl	8001cce <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	197b      	adds	r3, r7, r5
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	18d3      	adds	r3, r2, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	b218      	sxth	r0, r3
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	193b      	adds	r3, r7, r4
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	18d3      	adds	r3, r2, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	b219      	sxth	r1, r3
 8002222:	003b      	movs	r3, r7
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	001a      	movs	r2, r3
 8002228:	f7ff fd51 	bl	8001cce <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800222c:	1dbb      	adds	r3, r7, #6
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	197b      	adds	r3, r7, r5
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	b218      	sxth	r0, r3
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	193b      	adds	r3, r7, r4
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	18d3      	adds	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	b219      	sxth	r1, r3
 8002248:	003b      	movs	r3, r7
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	001a      	movs	r2, r3
 800224e:	f7ff fd3e 	bl	8001cce <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	197b      	adds	r3, r7, r5
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	18d3      	adds	r3, r2, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	b218      	sxth	r0, r3
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	881a      	ldrh	r2, [r3, #0]
 8002264:	193b      	adds	r3, r7, r4
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	b219      	sxth	r1, r3
 800226e:	003b      	movs	r3, r7
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	001a      	movs	r2, r3
 8002274:	f7ff fd2b 	bl	8001cce <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881a      	ldrh	r2, [r3, #0]
 800227c:	197b      	adds	r3, r7, r5
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	b218      	sxth	r0, r3
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	193b      	adds	r3, r7, r4
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	b219      	sxth	r1, r3
 8002294:	003b      	movs	r3, r7
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	f7ff fd18 	bl	8001cce <writePixel>
    while (x<y) {
 800229e:	2310      	movs	r3, #16
 80022a0:	18fa      	adds	r2, r7, r3
 80022a2:	230e      	movs	r3, #14
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2100      	movs	r1, #0
 80022a8:	5e52      	ldrsh	r2, [r2, r1]
 80022aa:	2100      	movs	r1, #0
 80022ac:	5e5b      	ldrsh	r3, [r3, r1]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	da00      	bge.n	80022b4 <drawCircle+0x298>
 80022b2:	e722      	b.n	80020fa <drawCircle+0xde>
    }
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b006      	add	sp, #24
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}

080022bc <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	0005      	movs	r5, r0
 80022c4:	000c      	movs	r4, r1
 80022c6:	0010      	movs	r0, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	1c2a      	adds	r2, r5, #0
 80022ce:	801a      	strh	r2, [r3, #0]
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	1c22      	adds	r2, r4, #0
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	1cbb      	adds	r3, r7, #2
 80022d8:	1c02      	adds	r2, r0, #0
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	003b      	movs	r3, r7
 80022de:	1c0a      	adds	r2, r1, #0
 80022e0:	801a      	strh	r2, [r3, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b219      	sxth	r1, r3
 80022f0:	1cbb      	adds	r3, r7, #2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	18db      	adds	r3, r3, r3
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	003b      	movs	r3, r7
 8002300:	881c      	ldrh	r4, [r3, #0]
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	2000      	movs	r0, #0
 8002306:	5e18      	ldrsh	r0, [r3, r0]
 8002308:	0023      	movs	r3, r4
 800230a:	f7ff fc93 	bl	8001c34 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	2200      	movs	r2, #0
 8002312:	5e9a      	ldrsh	r2, [r3, r2]
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2100      	movs	r1, #0
 8002318:	5e59      	ldrsh	r1, [r3, r1]
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	2000      	movs	r0, #0
 800231e:	5e18      	ldrsh	r0, [r3, r0]
 8002320:	003b      	movs	r3, r7
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2303      	movs	r3, #3
 800232c:	f000 f804 	bl	8002338 <fillCircleHelper>
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bdb0      	pop	{r4, r5, r7, pc}

08002338 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	0005      	movs	r5, r0
 8002340:	000c      	movs	r4, r1
 8002342:	0010      	movs	r0, r2
 8002344:	0019      	movs	r1, r3
 8002346:	1dbb      	adds	r3, r7, #6
 8002348:	1c2a      	adds	r2, r5, #0
 800234a:	801a      	strh	r2, [r3, #0]
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	1c22      	adds	r2, r4, #0
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	1cbb      	adds	r3, r7, #2
 8002354:	1c02      	adds	r2, r0, #0
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	1c7b      	adds	r3, r7, #1
 800235a:	1c0a      	adds	r2, r1, #0
 800235c:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 800235e:	1cbb      	adds	r3, r7, #2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b29a      	uxth	r2, r3
 8002368:	2316      	movs	r3, #22
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 800236e:	2314      	movs	r3, #20
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2201      	movs	r2, #1
 8002374:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	1c1a      	adds	r2, r3, #0
 800237c:	03d2      	lsls	r2, r2, #15
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	18db      	adds	r3, r3, r3
 8002382:	b29a      	uxth	r2, r3
 8002384:	2312      	movs	r3, #18
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 800238a:	2110      	movs	r1, #16
 800238c:	187b      	adds	r3, r7, r1
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8002392:	200e      	movs	r0, #14
 8002394:	183b      	adds	r3, r7, r0
 8002396:	1cba      	adds	r2, r7, #2
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 800239c:	230c      	movs	r3, #12
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	187a      	adds	r2, r7, r1
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 80023a6:	230a      	movs	r3, #10
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	183a      	adds	r2, r7, r0
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 80023b0:	2128      	movs	r1, #40	; 0x28
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	2200      	movs	r2, #0
 80023b6:	5e9b      	ldrsh	r3, [r3, r2]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 80023c2:	e0e7      	b.n	8002594 <fillCircleHelper+0x25c>
        if (f >= 0) {
 80023c4:	2316      	movs	r3, #22
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	5e9b      	ldrsh	r3, [r3, r2]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db18      	blt.n	8002402 <fillCircleHelper+0xca>
            y--;
 80023d0:	210e      	movs	r1, #14
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2200      	movs	r2, #0
 80023d6:	5e9b      	ldrsh	r3, [r3, r2]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 80023e2:	2112      	movs	r1, #18
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	3302      	adds	r3, #2
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 80023f0:	2016      	movs	r0, #22
 80023f2:	183b      	adds	r3, r7, r0
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	183b      	adds	r3, r7, r0
 8002400:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002402:	2110      	movs	r1, #16
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	5e9b      	ldrsh	r3, [r3, r2]
 800240a:	b29b      	uxth	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	187b      	adds	r3, r7, r1
 8002412:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002414:	2014      	movs	r0, #20
 8002416:	183b      	adds	r3, r7, r0
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	3302      	adds	r3, #2
 800241c:	b29a      	uxth	r2, r3
 800241e:	183b      	adds	r3, r7, r0
 8002420:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002422:	2416      	movs	r4, #22
 8002424:	193b      	adds	r3, r7, r4
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	183b      	adds	r3, r7, r0
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	b29a      	uxth	r2, r3
 8002430:	193b      	adds	r3, r7, r4
 8002432:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8002434:	187b      	adds	r3, r7, r1
 8002436:	2200      	movs	r2, #0
 8002438:	5e9a      	ldrsh	r2, [r3, r2]
 800243a:	230e      	movs	r3, #14
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2100      	movs	r1, #0
 8002440:	5e5b      	ldrsh	r3, [r3, r1]
 8002442:	3301      	adds	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	da47      	bge.n	80024d8 <fillCircleHelper+0x1a0>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8002448:	1c7b      	adds	r3, r7, #1
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d01e      	beq.n	8002490 <fillCircleHelper+0x158>
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	2310      	movs	r3, #16
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	b218      	sxth	r0, r3
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	240e      	movs	r4, #14
 8002468:	193b      	adds	r3, r7, r4
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	b219      	sxth	r1, r3
 8002472:	193b      	adds	r3, r7, r4
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	18db      	adds	r3, r3, r3
 8002478:	b29a      	uxth	r2, r3
 800247a:	2328      	movs	r3, #40	; 0x28
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	b21a      	sxth	r2, r3
 8002486:	232c      	movs	r3, #44	; 0x2c
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f7ff fbd2 	bl	8001c34 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8002490:	1c7b      	adds	r3, r7, #1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d01e      	beq.n	80024d8 <fillCircleHelper+0x1a0>
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	2310      	movs	r3, #16
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b218      	sxth	r0, r3
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	240e      	movs	r4, #14
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b219      	sxth	r1, r3
 80024ba:	193b      	adds	r3, r7, r4
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	18db      	adds	r3, r3, r3
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	2328      	movs	r3, #40	; 0x28
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	18d3      	adds	r3, r2, r3
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	232c      	movs	r3, #44	; 0x2c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f7ff fbae 	bl	8001c34 <drawFastVLine>
        }
        if(y != py) {
 80024d8:	230e      	movs	r3, #14
 80024da:	18fa      	adds	r2, r7, r3
 80024dc:	230a      	movs	r3, #10
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2100      	movs	r1, #0
 80024e2:	5e52      	ldrsh	r2, [r2, r1]
 80024e4:	2100      	movs	r1, #0
 80024e6:	5e5b      	ldrsh	r3, [r3, r1]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d04d      	beq.n	8002588 <fillCircleHelper+0x250>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80024ec:	1c7b      	adds	r3, r7, #1
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d01e      	beq.n	8002534 <fillCircleHelper+0x1fc>
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	230a      	movs	r3, #10
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	b218      	sxth	r0, r3
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	240c      	movs	r4, #12
 800250c:	193b      	adds	r3, r7, r4
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	b219      	sxth	r1, r3
 8002516:	193b      	adds	r3, r7, r4
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	18db      	adds	r3, r3, r3
 800251c:	b29a      	uxth	r2, r3
 800251e:	2328      	movs	r3, #40	; 0x28
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	18d3      	adds	r3, r2, r3
 8002526:	b29b      	uxth	r3, r3
 8002528:	b21a      	sxth	r2, r3
 800252a:	232c      	movs	r3, #44	; 0x2c
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f7ff fb80 	bl	8001c34 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8002534:	1c7b      	adds	r3, r7, #1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	4013      	ands	r3, r2
 800253c:	d01e      	beq.n	800257c <fillCircleHelper+0x244>
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	881a      	ldrh	r2, [r3, #0]
 8002542:	230a      	movs	r3, #10
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	b218      	sxth	r0, r3
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	240c      	movs	r4, #12
 8002554:	193b      	adds	r3, r7, r4
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	b29b      	uxth	r3, r3
 800255c:	b219      	sxth	r1, r3
 800255e:	193b      	adds	r3, r7, r4
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	18db      	adds	r3, r3, r3
 8002564:	b29a      	uxth	r2, r3
 8002566:	2328      	movs	r3, #40	; 0x28
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	b21a      	sxth	r2, r3
 8002572:	232c      	movs	r3, #44	; 0x2c
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f7ff fb5c 	bl	8001c34 <drawFastVLine>
            py = y;
 800257c:	230a      	movs	r3, #10
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	220e      	movs	r2, #14
 8002582:	18ba      	adds	r2, r7, r2
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 8002588:	230c      	movs	r3, #12
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2210      	movs	r2, #16
 800258e:	18ba      	adds	r2, r7, r2
 8002590:	8812      	ldrh	r2, [r2, #0]
 8002592:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 8002594:	2310      	movs	r3, #16
 8002596:	18fa      	adds	r2, r7, r3
 8002598:	230e      	movs	r3, #14
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2100      	movs	r1, #0
 800259e:	5e52      	ldrsh	r2, [r2, r1]
 80025a0:	2100      	movs	r1, #0
 80025a2:	5e5b      	ldrsh	r3, [r3, r1]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	da00      	bge.n	80025aa <fillCircleHelper+0x272>
 80025a8:	e70c      	b.n	80023c4 <fillCircleHelper+0x8c>
    }
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080025b4 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	0005      	movs	r5, r0
 80025bc:	000c      	movs	r4, r1
 80025be:	0010      	movs	r0, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	1c2a      	adds	r2, r5, #0
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	1c22      	adds	r2, r4, #0
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	1cbb      	adds	r3, r7, #2
 80025d0:	1c02      	adds	r2, r0, #0
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	003b      	movs	r3, r7
 80025d6:	1c0a      	adds	r2, r1, #0
 80025d8:	801a      	strh	r2, [r3, #0]
    int16_t end;
    if (w < 0) {
 80025da:	1cbb      	adds	r3, r7, #2
 80025dc:	2200      	movs	r2, #0
 80025de:	5e9b      	ldrsh	r3, [r3, r2]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da0d      	bge.n	8002600 <fillRect+0x4c>
        w = -w;
 80025e4:	1cbb      	adds	r3, r7, #2
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	425b      	negs	r3, r3
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	1cbb      	adds	r3, r7, #2
 80025ee:	801a      	strh	r2, [r3, #0]
        x -= w;
 80025f0:	1dbb      	adds	r3, r7, #6
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	1cbb      	adds	r3, r7, #2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	801a      	strh	r2, [r3, #0]
    }                           //+ve w
    end = x + w;
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	18d3      	adds	r3, r2, r3
 800260a:	b29a      	uxth	r2, r3
 800260c:	230e      	movs	r3, #14
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	801a      	strh	r2, [r3, #0]
    if (x < 0)
 8002612:	1dbb      	adds	r3, r7, #6
 8002614:	2200      	movs	r2, #0
 8002616:	5e9b      	ldrsh	r3, [r3, r2]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da02      	bge.n	8002622 <fillRect+0x6e>
        x = 0;
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]
    if (end > width())
 8002622:	230e      	movs	r3, #14
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2400      	movs	r4, #0
 8002628:	5f1c      	ldrsh	r4, [r3, r4]
 800262a:	f7fe f843 	bl	80006b4 <width>
 800262e:	0003      	movs	r3, r0
 8002630:	429c      	cmp	r4, r3
 8002632:	dd06      	ble.n	8002642 <fillRect+0x8e>
        end = width();
 8002634:	f7fe f83e 	bl	80006b4 <width>
 8002638:	0003      	movs	r3, r0
 800263a:	001a      	movs	r2, r3
 800263c:	230e      	movs	r3, #14
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	801a      	strh	r2, [r3, #0]
    w = end - x;
 8002642:	230e      	movs	r3, #14
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	881a      	ldrh	r2, [r3, #0]
 8002648:	1dbb      	adds	r3, r7, #6
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b29a      	uxth	r2, r3
 8002650:	1cbb      	adds	r3, r7, #2
 8002652:	801a      	strh	r2, [r3, #0]
    if (h < 0) {
 8002654:	003b      	movs	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	5e9b      	ldrsh	r3, [r3, r2]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0d      	bge.n	800267a <fillRect+0xc6>
        h = -h;
 800265e:	003b      	movs	r3, r7
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	425b      	negs	r3, r3
 8002664:	b29a      	uxth	r2, r3
 8002666:	003b      	movs	r3, r7
 8002668:	801a      	strh	r2, [r3, #0]
        y -= h;
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	003b      	movs	r3, r7
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b29a      	uxth	r2, r3
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	801a      	strh	r2, [r3, #0]
    }                           //+ve h
    end = y + h;
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	003b      	movs	r3, r7
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	18d3      	adds	r3, r2, r3
 8002684:	b29a      	uxth	r2, r3
 8002686:	230e      	movs	r3, #14
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	801a      	strh	r2, [r3, #0]
    if (y < 0)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	5e9b      	ldrsh	r3, [r3, r2]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da02      	bge.n	800269c <fillRect+0xe8>
        y = 0;
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	801a      	strh	r2, [r3, #0]
    if (end > height())
 800269c:	230e      	movs	r3, #14
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2400      	movs	r4, #0
 80026a2:	5f1c      	ldrsh	r4, [r3, r4]
 80026a4:	f7fe f810 	bl	80006c8 <height>
 80026a8:	0003      	movs	r3, r0
 80026aa:	429c      	cmp	r4, r3
 80026ac:	dd06      	ble.n	80026bc <fillRect+0x108>
        end = height();
 80026ae:	f7fe f80b 	bl	80006c8 <height>
 80026b2:	0003      	movs	r3, r0
 80026b4:	001a      	movs	r2, r3
 80026b6:	230e      	movs	r3, #14
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	801a      	strh	r2, [r3, #0]
    h = end - y;
 80026bc:	230e      	movs	r3, #14
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	003b      	movs	r3, r7
 80026cc:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80026ce:	1dbb      	adds	r3, r7, #6
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	1cbb      	adds	r3, r7, #2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	18d3      	adds	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21c      	sxth	r4, r3
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	003b      	movs	r3, r7
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	18d3      	adds	r3, r2, r3
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2100      	movs	r1, #0
 80026f6:	5e59      	ldrsh	r1, [r3, r1]
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	2000      	movs	r0, #0
 80026fc:	5e18      	ldrsh	r0, [r3, r0]
 80026fe:	0013      	movs	r3, r2
 8002700:	0022      	movs	r2, r4
 8002702:	f7ff f8ab 	bl	800185c <setAddrWindow>
    CS_ACTIVE;
 8002706:	4b7c      	ldr	r3, [pc, #496]	; (80028f8 <fillRect+0x344>)
 8002708:	2200      	movs	r2, #0
 800270a:	2101      	movs	r1, #1
 800270c:	0018      	movs	r0, r3
 800270e:	f001 f971 	bl	80039f4 <HAL_GPIO_WritePin>
    WriteCmd(_MW);
 8002712:	2390      	movs	r3, #144	; 0x90
 8002714:	05db      	lsls	r3, r3, #23
 8002716:	2200      	movs	r2, #0
 8002718:	2110      	movs	r1, #16
 800271a:	0018      	movs	r0, r3
 800271c:	f001 f96a 	bl	80039f4 <HAL_GPIO_WritePin>
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <fillRect+0x348>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	b29a      	uxth	r2, r3
 8002728:	210d      	movs	r1, #13
 800272a:	187b      	adds	r3, r7, r1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <fillRect+0x348>)
 8002730:	881a      	ldrh	r2, [r3, #0]
 8002732:	240c      	movs	r4, #12
 8002734:	193b      	adds	r3, r7, r4
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	2390      	movs	r3, #144	; 0x90
 800273a:	05db      	lsls	r3, r3, #23
 800273c:	22e0      	movs	r2, #224	; 0xe0
 800273e:	04d2      	lsls	r2, r2, #19
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <fillRect+0x344>)
 8002744:	2287      	movs	r2, #135	; 0x87
 8002746:	04d2      	lsls	r2, r2, #19
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <fillRect+0x34c>)
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	0412      	lsls	r2, r2, #16
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	0008      	movs	r0, r1
 8002754:	183b      	adds	r3, r7, r0
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	025a      	lsls	r2, r3, #9
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	401a      	ands	r2, r3
 8002760:	183b      	adds	r3, r7, r0
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	0219      	lsls	r1, r3, #8
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	400b      	ands	r3, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	183b      	adds	r3, r7, r0
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	0059      	lsls	r1, r3, #1
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	400b      	ands	r3, r1
 800277a:	431a      	orrs	r2, r3
 800277c:	2390      	movs	r3, #144	; 0x90
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	183b      	adds	r3, r7, r0
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2208      	movs	r2, #8
 8002788:	401a      	ands	r2, r3
 800278a:	183b      	adds	r3, r7, r0
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2120      	movs	r1, #32
 8002792:	400b      	ands	r3, r1
 8002794:	431a      	orrs	r2, r3
 8002796:	183b      	adds	r3, r7, r0
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	105b      	asrs	r3, r3, #1
 800279c:	2110      	movs	r1, #16
 800279e:	400b      	ands	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	183b      	adds	r3, r7, r0
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	0119      	lsls	r1, r3, #4
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	400b      	ands	r3, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <fillRect+0x344>)
 80027b2:	619a      	str	r2, [r3, #24]
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	0019      	movs	r1, r3
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <fillRect+0x34c>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	400a      	ands	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	2390      	movs	r3, #144	; 0x90
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	2200      	movs	r2, #0
 80027ca:	2102      	movs	r1, #2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f001 f911 	bl	80039f4 <HAL_GPIO_WritePin>
 80027d2:	2390      	movs	r3, #144	; 0x90
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	2201      	movs	r2, #1
 80027d8:	2102      	movs	r1, #2
 80027da:	0018      	movs	r0, r3
 80027dc:	f001 f90a 	bl	80039f4 <HAL_GPIO_WritePin>
 80027e0:	2390      	movs	r3, #144	; 0x90
 80027e2:	05db      	lsls	r3, r3, #23
 80027e4:	2201      	movs	r2, #1
 80027e6:	2102      	movs	r1, #2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f001 f903 	bl	80039f4 <HAL_GPIO_WritePin>
 80027ee:	2390      	movs	r3, #144	; 0x90
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	22e0      	movs	r2, #224	; 0xe0
 80027f4:	04d2      	lsls	r2, r2, #19
 80027f6:	619a      	str	r2, [r3, #24]
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <fillRect+0x344>)
 80027fa:	2287      	movs	r2, #135	; 0x87
 80027fc:	04d2      	lsls	r2, r2, #19
 80027fe:	619a      	str	r2, [r3, #24]
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <fillRect+0x34c>)
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	0412      	lsls	r2, r2, #16
 8002806:	619a      	str	r2, [r3, #24]
 8002808:	193b      	adds	r3, r7, r4
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	025a      	lsls	r2, r3, #9
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	401a      	ands	r2, r3
 8002814:	193b      	adds	r3, r7, r4
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	0219      	lsls	r1, r3, #8
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	400b      	ands	r3, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	193b      	adds	r3, r7, r4
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	0059      	lsls	r1, r3, #1
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	400b      	ands	r3, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	2390      	movs	r3, #144	; 0x90
 8002832:	05db      	lsls	r3, r3, #23
 8002834:	619a      	str	r2, [r3, #24]
 8002836:	0020      	movs	r0, r4
 8002838:	183b      	adds	r3, r7, r0
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	401a      	ands	r2, r3
 8002840:	183b      	adds	r3, r7, r0
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2120      	movs	r1, #32
 8002848:	400b      	ands	r3, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	183b      	adds	r3, r7, r0
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	105b      	asrs	r3, r3, #1
 8002852:	2110      	movs	r1, #16
 8002854:	400b      	ands	r3, r1
 8002856:	431a      	orrs	r2, r3
 8002858:	183b      	adds	r3, r7, r0
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	0119      	lsls	r1, r3, #4
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	400b      	ands	r3, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <fillRect+0x344>)
 8002868:	619a      	str	r2, [r3, #24]
 800286a:	183b      	adds	r3, r7, r0
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	0019      	movs	r1, r3
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <fillRect+0x34c>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	400a      	ands	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	2390      	movs	r3, #144	; 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	2200      	movs	r2, #0
 8002880:	2102      	movs	r1, #2
 8002882:	0018      	movs	r0, r3
 8002884:	f001 f8b6 	bl	80039f4 <HAL_GPIO_WritePin>
 8002888:	2390      	movs	r3, #144	; 0x90
 800288a:	05db      	lsls	r3, r3, #23
 800288c:	2201      	movs	r2, #1
 800288e:	2102      	movs	r1, #2
 8002890:	0018      	movs	r0, r3
 8002892:	f001 f8af 	bl	80039f4 <HAL_GPIO_WritePin>
 8002896:	2390      	movs	r3, #144	; 0x90
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	2201      	movs	r2, #1
 800289c:	2102      	movs	r1, #2
 800289e:	0018      	movs	r0, r3
 80028a0:	f001 f8a8 	bl	80039f4 <HAL_GPIO_WritePin>
 80028a4:	2390      	movs	r3, #144	; 0x90
 80028a6:	05db      	lsls	r3, r3, #23
 80028a8:	2201      	movs	r2, #1
 80028aa:	2110      	movs	r1, #16
 80028ac:	0018      	movs	r0, r3
 80028ae:	f001 f8a1 	bl	80039f4 <HAL_GPIO_WritePin>
    if (h > w) {
 80028b2:	003a      	movs	r2, r7
 80028b4:	1cbb      	adds	r3, r7, #2
 80028b6:	2100      	movs	r1, #0
 80028b8:	5e52      	ldrsh	r2, [r2, r1]
 80028ba:	2100      	movs	r1, #0
 80028bc:	5e5b      	ldrsh	r3, [r3, r1]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dd0c      	ble.n	80028dc <fillRect+0x328>
        end = h;
 80028c2:	210e      	movs	r1, #14
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	003a      	movs	r2, r7
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	801a      	strh	r2, [r3, #0]
        h = w;
 80028cc:	003b      	movs	r3, r7
 80028ce:	1cba      	adds	r2, r7, #2
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	801a      	strh	r2, [r3, #0]
        w = end;
 80028d4:	1cbb      	adds	r3, r7, #2
 80028d6:	187a      	adds	r2, r7, r1
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	801a      	strh	r2, [r3, #0]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80028dc:	2120      	movs	r1, #32
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	230b      	movs	r3, #11
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	230a      	movs	r3, #10
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	187a      	adds	r2, r7, r1
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
    while (h-- > 0) {
 80028f6:	e0cd      	b.n	8002a94 <fillRect+0x4e0>
 80028f8:	48000400 	.word	0x48000400
 80028fc:	2000008a 	.word	0x2000008a
 8002900:	48000800 	.word	0x48000800
        end = w;
 8002904:	230e      	movs	r3, #14
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	1cba      	adds	r2, r7, #2
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	801a      	strh	r2, [r3, #0]

        do {
            write8(hi);
 800290e:	2390      	movs	r3, #144	; 0x90
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	22e0      	movs	r2, #224	; 0xe0
 8002914:	04d2      	lsls	r2, r2, #19
 8002916:	619a      	str	r2, [r3, #24]
 8002918:	4b7a      	ldr	r3, [pc, #488]	; (8002b04 <fillRect+0x550>)
 800291a:	2287      	movs	r2, #135	; 0x87
 800291c:	04d2      	lsls	r2, r2, #19
 800291e:	619a      	str	r2, [r3, #24]
 8002920:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <fillRect+0x554>)
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0412      	lsls	r2, r2, #16
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	200b      	movs	r0, #11
 800292a:	183b      	adds	r3, r7, r0
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	025a      	lsls	r2, r3, #9
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	401a      	ands	r2, r3
 8002936:	183b      	adds	r3, r7, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	0219      	lsls	r1, r3, #8
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	400b      	ands	r3, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	183b      	adds	r3, r7, r0
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	0059      	lsls	r1, r3, #1
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	2390      	movs	r3, #144	; 0x90
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	619a      	str	r2, [r3, #24]
 8002958:	183b      	adds	r3, r7, r0
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	401a      	ands	r2, r3
 8002960:	183b      	adds	r3, r7, r0
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2120      	movs	r1, #32
 8002968:	400b      	ands	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	183b      	adds	r3, r7, r0
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	105b      	asrs	r3, r3, #1
 8002972:	2110      	movs	r1, #16
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	183b      	adds	r3, r7, r0
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	0119      	lsls	r1, r3, #4
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	400b      	ands	r3, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <fillRect+0x550>)
 8002988:	619a      	str	r2, [r3, #24]
 800298a:	183b      	adds	r3, r7, r0
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	019b      	lsls	r3, r3, #6
 8002990:	0019      	movs	r1, r3
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <fillRect+0x554>)
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	400a      	ands	r2, r1
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	2390      	movs	r3, #144	; 0x90
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	2200      	movs	r2, #0
 80029a0:	2102      	movs	r1, #2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 f826 	bl	80039f4 <HAL_GPIO_WritePin>
 80029a8:	2390      	movs	r3, #144	; 0x90
 80029aa:	05db      	lsls	r3, r3, #23
 80029ac:	2201      	movs	r2, #1
 80029ae:	2102      	movs	r1, #2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 f81f 	bl	80039f4 <HAL_GPIO_WritePin>
 80029b6:	2390      	movs	r3, #144	; 0x90
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	2201      	movs	r2, #1
 80029bc:	2102      	movs	r1, #2
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 f818 	bl	80039f4 <HAL_GPIO_WritePin>
            write8(lo);
 80029c4:	2390      	movs	r3, #144	; 0x90
 80029c6:	05db      	lsls	r3, r3, #23
 80029c8:	22e0      	movs	r2, #224	; 0xe0
 80029ca:	04d2      	lsls	r2, r2, #19
 80029cc:	619a      	str	r2, [r3, #24]
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <fillRect+0x550>)
 80029d0:	2287      	movs	r2, #135	; 0x87
 80029d2:	04d2      	lsls	r2, r2, #19
 80029d4:	619a      	str	r2, [r3, #24]
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <fillRect+0x554>)
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	0412      	lsls	r2, r2, #16
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	200a      	movs	r0, #10
 80029e0:	183b      	adds	r3, r7, r0
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	025a      	lsls	r2, r3, #9
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	401a      	ands	r2, r3
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	0219      	lsls	r1, r3, #8
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	400b      	ands	r3, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	0059      	lsls	r1, r3, #1
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	400b      	ands	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	2390      	movs	r3, #144	; 0x90
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	619a      	str	r2, [r3, #24]
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	401a      	ands	r2, r3
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	105b      	asrs	r3, r3, #1
 8002a28:	2110      	movs	r1, #16
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	183b      	adds	r3, r7, r0
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	0119      	lsls	r1, r3, #4
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	400b      	ands	r3, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <fillRect+0x550>)
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	183b      	adds	r3, r7, r0
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	0019      	movs	r1, r3
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <fillRect+0x554>)
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	2390      	movs	r3, #144	; 0x90
 8002a52:	05db      	lsls	r3, r3, #23
 8002a54:	2200      	movs	r2, #0
 8002a56:	2102      	movs	r1, #2
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 ffcb 	bl	80039f4 <HAL_GPIO_WritePin>
 8002a5e:	2390      	movs	r3, #144	; 0x90
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	2201      	movs	r2, #1
 8002a64:	2102      	movs	r1, #2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 ffc4 	bl	80039f4 <HAL_GPIO_WritePin>
 8002a6c:	2390      	movs	r3, #144	; 0x90
 8002a6e:	05db      	lsls	r3, r3, #23
 8002a70:	2201      	movs	r2, #1
 8002a72:	2102      	movs	r1, #2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 ffbd 	bl	80039f4 <HAL_GPIO_WritePin>
        } while (--end != 0);
 8002a7a:	210e      	movs	r1, #14
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d000      	beq.n	8002a94 <fillRect+0x4e0>
 8002a92:	e73c      	b.n	800290e <fillRect+0x35a>
    while (h-- > 0) {
 8002a94:	003b      	movs	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	5e9b      	ldrsh	r3, [r3, r2]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	b291      	uxth	r1, r2
 8002aa0:	003a      	movs	r2, r7
 8002aa2:	8011      	strh	r1, [r2, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	dd00      	ble.n	8002aaa <fillRect+0x4f6>
 8002aa8:	e72c      	b.n	8002904 <fillRect+0x350>
    }
    CS_IDLE;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <fillRect+0x550>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	2101      	movs	r1, #1
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 ff9f 	bl	80039f4 <HAL_GPIO_WritePin>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <fillRect+0x558>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	001a      	movs	r2, r3
 8002abc:	2301      	movs	r3, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00a      	beq.n	8002ad8 <fillRect+0x524>
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <fillRect+0x55c>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <fillRect+0x560>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d116      	bne.n	8002afa <fillRect+0x546>
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <fillRect+0x564>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d010      	beq.n	8002afa <fillRect+0x546>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002ad8:	f7fd fdec 	bl	80006b4 <width>
 8002adc:	0003      	movs	r3, r0
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21c      	sxth	r4, r3
 8002ae4:	f7fd fdf0 	bl	80006c8 <height>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	0022      	movs	r2, r4
 8002af2:	2100      	movs	r1, #0
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe feb1 	bl	800185c <setAddrWindow>
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b004      	add	sp, #16
 8002b00:	bdb0      	pop	{r4, r5, r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	2000008c 	.word	0x2000008c
 8002b10:	2000009a 	.word	0x2000009a
 8002b14:	00001526 	.word	0x00001526
 8002b18:	20000039 	.word	0x20000039

08002b1c <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7ff f833 	bl	8001b8c <fillScreen>
    fillScreen(RED);
 8002b26:	23f8      	movs	r3, #248	; 0xf8
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff f82e 	bl	8001b8c <fillScreen>
    fillScreen(GREEN);
 8002b30:	23fc      	movs	r3, #252	; 0xfc
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff f829 	bl	8001b8c <fillScreen>
    fillScreen(BLUE);
 8002b3a:	201f      	movs	r0, #31
 8002b3c:	f7ff f826 	bl	8001b8c <fillScreen>
    fillScreen(BLACK);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff f823 	bl	8001b8c <fillScreen>
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <testLines>:

void testLines(uint16_t color)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b08b      	sub	sp, #44	; 0x2c
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	0002      	movs	r2, r0
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	801a      	strh	r2, [r3, #0]
    int           x1, y1, x2, y2,
                  w = width(),
 8002b58:	f7fd fdac 	bl	80006b4 <width>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	617b      	str	r3, [r7, #20]
                  h = height();
 8002b60:	f7fd fdb2 	bl	80006c8 <height>
 8002b64:	0003      	movs	r3, r0
 8002b66:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff f80f 	bl	8001b8c <fillScreen>

    x1 = y1 = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	e010      	b.n	8002ba4 <testLines+0x58>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	b218      	sxth	r0, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	b219      	sxth	r1, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	b21c      	sxth	r4, r3
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	0023      	movs	r3, r4
 8002b9a:	f7ff f9af 	bl	8001efc <drawLine>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3306      	adds	r3, #6
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbea      	blt.n	8002b82 <testLines+0x36>
    x2    = w - 1;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e010      	b.n	8002bda <testLines+0x8e>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	b218      	sxth	r0, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	b219      	sxth	r1, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	b21c      	sxth	r4, r3
 8002bc8:	1dbb      	adds	r3, r7, #6
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	0023      	movs	r3, r4
 8002bd0:	f7ff f994 	bl	8001efc <drawLine>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dbea      	blt.n	8002bb8 <testLines+0x6c>

    fillScreen(BLACK);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fe ffd2 	bl	8001b8c <fillScreen>

    x1    = w - 1;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e010      	b.n	8002c20 <testLines+0xd4>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	b218      	sxth	r0, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	b219      	sxth	r1, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	b21c      	sxth	r4, r3
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	0023      	movs	r3, r4
 8002c16:	f7ff f971 	bl	8001efc <drawLine>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3306      	adds	r3, #6
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dbea      	blt.n	8002bfe <testLines+0xb2>
    x2    = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e010      	b.n	8002c54 <testLines+0x108>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	b218      	sxth	r0, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	b219      	sxth	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	b21c      	sxth	r4, r3
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	0023      	movs	r3, r4
 8002c4a:	f7ff f957 	bl	8001efc <drawLine>
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3306      	adds	r3, #6
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbea      	blt.n	8002c32 <testLines+0xe6>

    fillScreen(BLACK);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe ff95 	bl	8001b8c <fillScreen>

    x1    = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e010      	b.n	8002c98 <testLines+0x14c>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	b218      	sxth	r0, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b219      	sxth	r1, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	b21c      	sxth	r4, r3
 8002c86:	1dbb      	adds	r3, r7, #6
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	0023      	movs	r3, r4
 8002c8e:	f7ff f935 	bl	8001efc <drawLine>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3306      	adds	r3, #6
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbea      	blt.n	8002c76 <testLines+0x12a>
    x2    = w - 1;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e010      	b.n	8002cce <testLines+0x182>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	b218      	sxth	r0, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	b219      	sxth	r1, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	b21c      	sxth	r4, r3
 8002cbc:	1dbb      	adds	r3, r7, #6
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	0023      	movs	r3, r4
 8002cc4:	f7ff f91a 	bl	8001efc <drawLine>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3306      	adds	r3, #6
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	dbea      	blt.n	8002cac <testLines+0x160>

    fillScreen(BLACK);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fe ff58 	bl	8001b8c <fillScreen>

    x1    = w - 1;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e010      	b.n	8002d14 <testLines+0x1c8>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	b218      	sxth	r0, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b219      	sxth	r1, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	b21c      	sxth	r4, r3
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	0023      	movs	r3, r4
 8002d0a:	f7ff f8f7 	bl	8001efc <drawLine>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3306      	adds	r3, #6
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbea      	blt.n	8002cf2 <testLines+0x1a6>
    x2    = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e010      	b.n	8002d48 <testLines+0x1fc>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	b218      	sxth	r0, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	b219      	sxth	r1, r3
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	b21c      	sxth	r4, r3
 8002d36:	1dbb      	adds	r3, r7, #6
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	0023      	movs	r3, r4
 8002d3e:	f7ff f8dd 	bl	8001efc <drawLine>
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3306      	adds	r3, #6
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbea      	blt.n	8002d26 <testLines+0x1da>

}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b009      	add	sp, #36	; 0x24
 8002d56:	bd90      	pop	{r4, r7, pc}

08002d58 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	0002      	movs	r2, r0
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	1c0a      	adds	r2, r1, #0
 8002d68:	801a      	strh	r2, [r3, #0]
    int           x, y, w = width(), h = height();
 8002d6a:	f7fd fca3 	bl	80006b4 <width>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	f7fd fca9 	bl	80006c8 <height>
 8002d76:	0003      	movs	r3, r0
 8002d78:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe ff06 	bl	8001b8c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e00b      	b.n	8002d9e <testFastLines+0x46>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	b219      	sxth	r1, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	1dbb      	adds	r3, r7, #6
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe ff75 	bl	8001c82 <drawFastHLine>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	dbef      	blt.n	8002d86 <testFastLines+0x2e>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e00b      	b.n	8002dc4 <testFastLines+0x6c>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	b218      	sxth	r0, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2100      	movs	r1, #0
 8002dba:	f7fe ff3b 	bl	8001c34 <drawFastVLine>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3305      	adds	r3, #5
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbef      	blt.n	8002dac <testFastLines+0x54>
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	0002      	movs	r2, r0
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	1c0a      	adds	r2, r1, #0
 8002de4:	801a      	strh	r2, [r3, #0]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8002de6:	f7fd fc65 	bl	80006b4 <width>
 8002dea:	0003      	movs	r3, r0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	f7fd fc6b 	bl	80006c8 <height>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe fec4 	bl	8001b8c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e01a      	b.n	8002e42 <testFilledCircles+0x6e>
        for (y = radius; y < h; y += r2) {
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e00e      	b.n	8002e32 <testFilledCircles+0x5e>
            fillCircle(x, y, radius, color);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	b218      	sxth	r0, r3
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	b219      	sxth	r1, r3
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f7ff fa49 	bl	80022bc <fillCircle>
        for (y = radius; y < h; y += r2) {
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbec      	blt.n	8002e14 <testFilledCircles+0x40>
    for (x = radius; x < w; x += r2) {
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	dbe0      	blt.n	8002e0c <testFilledCircles+0x38>
        }
    }
}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b008      	add	sp, #32
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	0002      	movs	r2, r0
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	1c0a      	adds	r2, r1, #0
 8002e62:	801a      	strh	r2, [r3, #0]
    int           x, y, r2 = radius * 2,
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8002e6c:	f7fd fc22 	bl	80006b4 <width>
 8002e70:	0003      	movs	r3, r0
 8002e72:	001a      	movs	r2, r3
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8002e7c:	f7fd fc24 	bl	80006c8 <height>
 8002e80:	0003      	movs	r3, r0
 8002e82:	001a      	movs	r2, r3
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	18d3      	adds	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e019      	b.n	8002ec6 <testCircles+0x74>
        for (y = 0; y < h; y += r2) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e00e      	b.n	8002eb6 <testCircles+0x64>
            drawCircle(x, y, radius, color);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	b218      	sxth	r0, r3
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	b219      	sxth	r1, r3
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f7ff f8b7 	bl	800201c <drawCircle>
        for (y = 0; y < h; y += r2) {
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dbec      	blt.n	8002e98 <testCircles+0x46>
    for (x = 0; x < w; x += r2) {
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	18d3      	adds	r3, r2, r3
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbe1      	blt.n	8002e92 <testCircles+0x40>
        }
    }
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b008      	add	sp, #32
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <drawChar>:
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
    }
}

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	0005      	movs	r5, r0
 8002ee0:	000c      	movs	r4, r1
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	1dbb      	adds	r3, r7, #6
 8002ee8:	1c2a      	adds	r2, r5, #0
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	1c22      	adds	r2, r4, #0
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	1c02      	adds	r2, r0, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	003b      	movs	r3, r7
 8002efa:	1c0a      	adds	r2, r1, #0
 8002efc:	801a      	strh	r2, [r3, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8002efe:	4b81      	ldr	r3, [pc, #516]	; (8003104 <drawChar+0x22c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	1cfb      	adds	r3, r7, #3
 8002f08:	1cf9      	adds	r1, r7, #3
 8002f0a:	7809      	ldrb	r1, [r1, #0]
 8002f0c:	1a8a      	subs	r2, r1, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8002f10:	1cfb      	adds	r3, r7, #3
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	00da      	lsls	r2, r3, #3
 8002f16:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <drawChar+0x22c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	18d3      	adds	r3, r2, r3
 8002f20:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8002f22:	4b78      	ldr	r3, [pc, #480]	; (8003104 <drawChar+0x22c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8002f2a:	231e      	movs	r3, #30
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8002f34:	230b      	movs	r3, #11
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	7892      	ldrb	r2, [r2, #2]
 8002f3c:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
 8002f3e:	230a      	movs	r3, #10
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	78d2      	ldrb	r2, [r2, #3]
 8002f46:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3305      	adds	r3, #5
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	2309      	movs	r3, #9
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3306      	adds	r3, #6
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8002f60:	231b      	movs	r3, #27
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	231a      	movs	r3, #26
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
 8002f70:	2318      	movs	r3, #24
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	2200      	movs	r2, #0
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	2316      	movs	r3, #22
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	801a      	strh	r2, [r3, #0]

        if(size > 1)
 8002f80:	2334      	movs	r3, #52	; 0x34
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d90d      	bls.n	8002fa6 <drawChar+0xce>
        {
            xo16 = xo;
 8002f8a:	2318      	movs	r3, #24
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2209      	movs	r2, #9
 8002f90:	18ba      	adds	r2, r7, r2
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	b252      	sxtb	r2, r2
 8002f96:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
 8002f98:	2316      	movs	r3, #22
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	18ba      	adds	r2, r7, r2
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	b252      	sxtb	r2, r2
 8002fa4:	801a      	strh	r2, [r3, #0]
        }

        for(yy=0; yy<h; yy++)
 8002fa6:	231c      	movs	r3, #28
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e09b      	b.n	80030e8 <drawChar+0x210>
        {
            for(xx=0; xx<w; xx++)
 8002fb0:	231d      	movs	r3, #29
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e087      	b.n	80030ca <drawChar+0x1f2>
            {
                if(!(bit++ & 7))
 8002fba:	221a      	movs	r2, #26
 8002fbc:	18bb      	adds	r3, r7, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	18ba      	adds	r2, r7, r2
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	7011      	strb	r1, [r2, #0]
 8002fc6:	001a      	movs	r2, r3
 8002fc8:	2307      	movs	r3, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <drawChar+0x110>
                {
                    bits = pgm_read_byte(&bitmap[bo++]);
 8002fce:	221e      	movs	r2, #30
 8002fd0:	18bb      	adds	r3, r7, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	18ba      	adds	r2, r7, r2
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	8011      	strh	r1, [r2, #0]
 8002fda:	001a      	movs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	189a      	adds	r2, r3, r2
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
                }

                if(bits & 0x80)
 8002fe8:	231b      	movs	r3, #27
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da5e      	bge.n	80030b2 <drawChar+0x1da>
                {
                    if(size == 1)
 8002ff4:	2334      	movs	r3, #52	; 0x34
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d125      	bne.n	800304a <drawChar+0x172>
                    {
                        writePixel(x+xo+xx, y+yo+yy, color);
 8002ffe:	2309      	movs	r3, #9
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b25b      	sxtb	r3, r3
 8003006:	b29a      	uxth	r2, r3
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	b29a      	uxth	r2, r3
 8003010:	231d      	movs	r3, #29
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	18d3      	adds	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	b218      	sxth	r0, r3
 800301e:	2308      	movs	r3, #8
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b25b      	sxtb	r3, r3
 8003026:	b29a      	uxth	r2, r3
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	b29a      	uxth	r2, r3
 8003030:	231c      	movs	r3, #28
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	b29b      	uxth	r3, r3
 800303c:	b219      	sxth	r1, r3
 800303e:	003b      	movs	r3, r7
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	001a      	movs	r2, r3
 8003044:	f7fe fe43 	bl	8001cce <writePixel>
 8003048:	e033      	b.n	80030b2 <drawChar+0x1da>
                    }
                    else
                    {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 800304a:	2318      	movs	r3, #24
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2200      	movs	r2, #0
 8003050:	5e9a      	ldrsh	r2, [r3, r2]
 8003052:	231d      	movs	r3, #29
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	18d3      	adds	r3, r2, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	2134      	movs	r1, #52	; 0x34
 800305e:	187a      	adds	r2, r7, r1
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	b292      	uxth	r2, r2
 8003064:	4353      	muls	r3, r2
 8003066:	b29a      	uxth	r2, r3
 8003068:	1dbb      	adds	r3, r7, #6
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	18d3      	adds	r3, r2, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	b218      	sxth	r0, r3
 8003072:	2316      	movs	r3, #22
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2200      	movs	r2, #0
 8003078:	5e9a      	ldrsh	r2, [r3, r2]
 800307a:	231c      	movs	r3, #28
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	000c      	movs	r4, r1
 8003086:	187a      	adds	r2, r7, r1
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	b292      	uxth	r2, r2
 800308c:	4353      	muls	r3, r2
 800308e:	b29a      	uxth	r2, r3
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	18d3      	adds	r3, r2, r3
 8003096:	b29b      	uxth	r3, r3
 8003098:	b219      	sxth	r1, r3
 800309a:	193b      	adds	r3, r7, r4
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b21a      	sxth	r2, r3
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b21c      	sxth	r4, r3
 80030a6:	003b      	movs	r3, r7
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	0023      	movs	r3, r4
 80030ae:	f7ff fa81 	bl	80025b4 <fillRect>
                    }
                }
                bits <<= 1;
 80030b2:	231b      	movs	r3, #27
 80030b4:	18fa      	adds	r2, r7, r3
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	18db      	adds	r3, r3, r3
 80030bc:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++)
 80030be:	211d      	movs	r1, #29
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	3201      	adds	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	231d      	movs	r3, #29
 80030cc:	18fa      	adds	r2, r7, r3
 80030ce:	230b      	movs	r3, #11
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d200      	bcs.n	80030dc <drawChar+0x204>
 80030da:	e76e      	b.n	8002fba <drawChar+0xe2>
        for(yy=0; yy<h; yy++)
 80030dc:	211c      	movs	r1, #28
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	3201      	adds	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	231c      	movs	r3, #28
 80030ea:	18fa      	adds	r2, r7, r3
 80030ec:	230a      	movs	r3, #10
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d200      	bcs.n	80030fa <drawChar+0x222>
 80030f8:	e75a      	b.n	8002fb0 <drawChar+0xd8>
            }
        }
    } // End classic vs custom font
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b008      	add	sp, #32
 8003100:	bdb0      	pop	{r4, r5, r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	2000003c 	.word	0x2000003c

08003108 <write>:

size_t write(uint8_t c)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	0002      	movs	r2, r0
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	701a      	strb	r2, [r3, #0]
	if(c == '\n')
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b0a      	cmp	r3, #10
 800311a:	d111      	bne.n	8003140 <write+0x38>
	{
		cursor_x  = 0;
 800311c:	4b51      	ldr	r3, [pc, #324]	; (8003264 <write+0x15c>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
		cursor_y += (int16_t)textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <write+0x160>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330a      	adds	r3, #10
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	4a50      	ldr	r2, [pc, #320]	; (800326c <write+0x164>)
 800312c:	7812      	ldrb	r2, [r2, #0]
 800312e:	4353      	muls	r3, r2
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <write+0x168>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	18d3      	adds	r3, r2, r3
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <write+0x168>)
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e08b      	b.n	8003258 <write+0x150>
	}
	else if(c != '\r')
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b0d      	cmp	r3, #13
 8003146:	d100      	bne.n	800314a <write+0x42>
 8003148:	e086      	b.n	8003258 <write+0x150>
	{
		uint8_t first = pgm_read_byte(&gfxFont->first);
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <write+0x160>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2117      	movs	r1, #23
 8003150:	187b      	adds	r3, r7, r1
 8003152:	7a12      	ldrb	r2, [r2, #8]
 8003154:	701a      	strb	r2, [r3, #0]

		if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last)))
 8003156:	1dfa      	adds	r2, r7, #7
 8003158:	187b      	adds	r3, r7, r1
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d200      	bcs.n	8003164 <write+0x5c>
 8003162:	e079      	b.n	8003258 <write+0x150>
 8003164:	4b40      	ldr	r3, [pc, #256]	; (8003268 <write+0x160>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3309      	adds	r3, #9
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	1dfa      	adds	r2, r7, #7
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d871      	bhi.n	8003258 <write+0x150>
		{
			GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c - first]);
 8003174:	1dfb      	adds	r3, r7, #7
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	2317      	movs	r3, #23
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	00da      	lsls	r2, r3, #3
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <write+0x160>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3304      	adds	r3, #4
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	613b      	str	r3, [r7, #16]
			uint8_t w = pgm_read_byte(&glyph->width);
 800318e:	210f      	movs	r1, #15
 8003190:	187b      	adds	r3, r7, r1
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	7892      	ldrb	r2, [r2, #2]
 8003196:	701a      	strb	r2, [r3, #0]
			uint8_t h = pgm_read_byte(&glyph->height);
 8003198:	230e      	movs	r3, #14
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	78d2      	ldrb	r2, [r2, #3]
 80031a0:	701a      	strb	r2, [r3, #0]

			if((w > 0) && (h > 0))
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d049      	beq.n	800323e <write+0x136>
 80031aa:	230e      	movs	r3, #14
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d044      	beq.n	800323e <write+0x136>
			{ // Is there an associated bitmap?
				int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	3305      	adds	r3, #5
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b25a      	sxtb	r2, r3
 80031bc:	230c      	movs	r3, #12
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	801a      	strh	r2, [r3, #0]

				if(wrap && ((cursor_x + textsize * (xo + w)) > _width))
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <write+0x16c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d024      	beq.n	8003214 <write+0x10c>
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <write+0x15c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	0019      	movs	r1, r3
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <write+0x164>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	230c      	movs	r3, #12
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	5e9a      	ldrsh	r2, [r3, r2]
 80031de:	230f      	movs	r3, #15
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	4343      	muls	r3, r0
 80031e8:	18cb      	adds	r3, r1, r3
 80031ea:	4a23      	ldr	r2, [pc, #140]	; (8003278 <write+0x170>)
 80031ec:	8812      	ldrh	r2, [r2, #0]
 80031ee:	4293      	cmp	r3, r2
 80031f0:	dd10      	ble.n	8003214 <write+0x10c>
				{
					cursor_x  = 0;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <write+0x15c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
					cursor_y += (int16_t)textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <write+0x160>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330a      	adds	r3, #10
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4a1a      	ldr	r2, [pc, #104]	; (800326c <write+0x164>)
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	4353      	muls	r3, r2
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <write+0x168>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	18d3      	adds	r3, r2, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <write+0x168>)
 8003212:	701a      	strb	r2, [r3, #0]
				}

				drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <write+0x15c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b218      	sxth	r0, r3
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <write+0x168>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b21c      	sxth	r4, r3
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <write+0x174>)
 8003222:	881d      	ldrh	r5, [r3, #0]
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <write+0x178>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	4a10      	ldr	r2, [pc, #64]	; (800326c <write+0x164>)
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	1df9      	adds	r1, r7, #7
 800322e:	7809      	ldrb	r1, [r1, #0]
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	002b      	movs	r3, r5
 8003236:	000a      	movs	r2, r1
 8003238:	0021      	movs	r1, r4
 800323a:	f7ff fe4d 	bl	8002ed8 <drawChar>
			}

			cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3304      	adds	r3, #4
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <write+0x164>)
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	4353      	muls	r3, r2
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <write+0x15c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <write+0x15c>)
 8003256:	701a      	strb	r2, [r3, #0]
		}
	}

    return 1;
 8003258:	2301      	movs	r3, #1
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b006      	add	sp, #24
 8003260:	bdb0      	pop	{r4, r5, r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000038 	.word	0x20000038
 8003268:	2000003c 	.word	0x2000003c
 800326c:	20000008 	.word	0x20000008
 8003270:	20000037 	.word	0x20000037
 8003274:	2000000e 	.word	0x2000000e
 8003278:	20000004 	.word	0x20000004
 800327c:	2000000a 	.word	0x2000000a
 8003280:	2000000c 	.word	0x2000000c

08003284 <setFont>:

void setFont(const GFXfont *f)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    if(f)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <setFont+0x24>
    {            // Font struct pointer passed in?
        if(!gfxFont)
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <setFont+0x48>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d110      	bne.n	80032bc <setFont+0x38>
        { // And no current font struct?
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <setFont+0x4c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3306      	adds	r3, #6
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <setFont+0x4c>)
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e009      	b.n	80032bc <setFont+0x38>
        }
    }
    else if(gfxFont)
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <setFont+0x48>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <setFont+0x38>
    { 	// NULL passed.  Current font struct defined?
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <setFont+0x4c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	3b06      	subs	r3, #6
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <setFont+0x4c>)
 80032ba:	701a      	strb	r2, [r3, #0]
    }

    gfxFont = (GFXfont *)f;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <setFont+0x48>)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	2000003c 	.word	0x2000003c
 80032d0:	20000037 	.word	0x20000037

080032d4 <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	0008      	movs	r0, r1
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	0019      	movs	r1, r3
 80032e2:	240a      	movs	r4, #10
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	1c02      	adds	r2, r0, #0
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	2509      	movs	r5, #9
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	1c0a      	adds	r2, r1, #0
 80032f0:	701a      	strb	r2, [r3, #0]
	setFont(f);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ffc5 	bl	8003284 <setFont>
	textcolor = txtcolor;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <printnewtstr+0x70>)
 80032fc:	193a      	adds	r2, r7, r4
 80032fe:	8812      	ldrh	r2, [r2, #0]
 8003300:	801a      	strh	r2, [r3, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8003302:	197b      	adds	r3, r7, r5
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <printnewtstr+0x3e>
 800330a:	2309      	movs	r3, #9
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	e000      	b.n	8003314 <printnewtstr+0x40>
 8003312:	2201      	movs	r2, #1
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <printnewtstr+0x74>)
 8003316:	701a      	strb	r2, [r3, #0]
	setCursor(0, row);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	b21b      	sxth	r3, r3
 800331c:	0019      	movs	r1, r3
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f814 	bl	800334c <setCursor>
	while (*str) write (*str++);
 8003324:	e006      	b.n	8003334 <printnewtstr+0x60>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	623a      	str	r2, [r7, #32]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff feea 	bl	8003108 <write>
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f4      	bne.n	8003326 <printnewtstr+0x52>
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	2000000a 	.word	0x2000000a
 8003348:	20000008 	.word	0x20000008

0800334c <setCursor>:
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	0002      	movs	r2, r0
 8003354:	1dbb      	adds	r3, r7, #6
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	1c0a      	adds	r2, r1, #0
 800335c:	801a      	strh	r2, [r3, #0]
	cursor_x = x;
 800335e:	1dbb      	adds	r3, r7, #6
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <setCursor+0x30>)
 8003366:	701a      	strb	r2, [r3, #0]
	cursor_y = y;
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <setCursor+0x34>)
 8003370:	701a      	strb	r2, [r3, #0]
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	20000038 	.word	0x20000038
 8003380:	20000037 	.word	0x20000037

08003384 <getRotation>:

uint8_t getRotation (void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	return rotation;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <getRotation+0x10>)
 800338a:	781b      	ldrb	r3, [r3, #0]
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000039 	.word	0x20000039

08003398 <scrollup>:

void scrollup (uint16_t speed)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	0002      	movs	r2, r0
 80033a0:	1dbb      	adds	r3, r7, #6
 80033a2:	801a      	strh	r2, [r3, #0]
     uint16_t maxscroll;
     if (getRotation() & 1)
 80033a4:	f7ff ffee 	bl	8003384 <getRotation>
 80033a8:	0003      	movs	r3, r0
 80033aa:	001a      	movs	r2, r3
 80033ac:	2301      	movs	r3, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	d006      	beq.n	80033c0 <scrollup+0x28>
	 {
    	 maxscroll = width();
 80033b2:	230e      	movs	r3, #14
 80033b4:	18fc      	adds	r4, r7, r3
 80033b6:	f7fd f97d 	bl	80006b4 <width>
 80033ba:	0003      	movs	r3, r0
 80033bc:	8023      	strh	r3, [r4, #0]
 80033be:	e005      	b.n	80033cc <scrollup+0x34>
	 }
     else
     {
    	 maxscroll = height();
 80033c0:	230e      	movs	r3, #14
 80033c2:	18fc      	adds	r4, r7, r3
 80033c4:	f7fd f980 	bl	80006c8 <height>
 80033c8:	0003      	movs	r3, r0
 80033ca:	8023      	strh	r3, [r4, #0]
     }

     for (uint16_t i = 1; i <= maxscroll; i++)
 80033cc:	230c      	movs	r3, #12
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2201      	movs	r2, #1
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e023      	b.n	800341e <scrollup+0x86>
     {
    	 vertScroll(0, maxscroll, i);
 80033d6:	230e      	movs	r3, #14
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	5e59      	ldrsh	r1, [r3, r1]
 80033de:	230c      	movs	r3, #12
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2200      	movs	r2, #0
 80033e4:	5e9b      	ldrsh	r3, [r3, r2]
 80033e6:	001a      	movs	r2, r3
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fe fb01 	bl	80019f0 <vertScroll>
         if (speed < 655)
 80033ee:	1dbb      	adds	r3, r7, #6
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <scrollup+0xa0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d807      	bhi.n	8003408 <scrollup+0x70>
		 {
        	 delay(speed*100);
 80033f8:	1dbb      	adds	r3, r7, #6
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2264      	movs	r2, #100	; 0x64
 80033fe:	4353      	muls	r3, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7fd f905 	bl	8000610 <delay>
 8003406:	e004      	b.n	8003412 <scrollup+0x7a>
		 }
         else
		 {
        	 HAL_Delay(speed);
 8003408:	1dbb      	adds	r3, r7, #6
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f8a3 	bl	8003558 <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 8003412:	210c      	movs	r1, #12
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	187b      	adds	r3, r7, r1
 800341a:	3201      	adds	r2, #1
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	230c      	movs	r3, #12
 8003420:	18fa      	adds	r2, r7, r3
 8003422:	230e      	movs	r3, #14
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d9d3      	bls.n	80033d6 <scrollup+0x3e>
		 }
     }

}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b005      	add	sp, #20
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	0000028e 	.word	0x0000028e

0800343c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800343c:	480d      	ldr	r0, [pc, #52]	; (8003474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800343e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003440:	480d      	ldr	r0, [pc, #52]	; (8003478 <LoopForever+0x6>)
  ldr r1, =_edata
 8003442:	490e      	ldr	r1, [pc, #56]	; (800347c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <LoopForever+0xe>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003448:	e002      	b.n	8003450 <LoopCopyDataInit>

0800344a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800344c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344e:	3304      	adds	r3, #4

08003450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003454:	d3f9      	bcc.n	800344a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003458:	4c0b      	ldr	r4, [pc, #44]	; (8003488 <LoopForever+0x16>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800345c:	e001      	b.n	8003462 <LoopFillZerobss>

0800345e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003460:	3204      	adds	r2, #4

08003462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003464:	d3fb      	bcc.n	800345e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003466:	f7fd f8ce 	bl	8000606 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800346a:	f001 fa8f 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800346e:	f7fc fed7 	bl	8000220 <main>

08003472 <LoopForever>:

LoopForever:
    b LoopForever
 8003472:	e7fe      	b.n	8003472 <LoopForever>
  ldr   r0, =_estack
 8003474:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800347c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003480:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 8003484:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003488:	200000a4 	.word	0x200000a4

0800348c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800348c:	e7fe      	b.n	800348c <ADC1_COMP_IRQHandler>
	...

08003490 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_Init+0x24>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_Init+0x24>)
 800349a:	2110      	movs	r1, #16
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f000 f809 	bl	80034b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a6:	f7fd f851 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_InitTick+0x5c>)
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_InitTick+0x60>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	0019      	movs	r1, r3
 80034ca:	23fa      	movs	r3, #250	; 0xfa
 80034cc:	0098      	lsls	r0, r3, #2
 80034ce:	f7fc fe1b 	bl	8000108 <__udivsi3>
 80034d2:	0003      	movs	r3, r0
 80034d4:	0019      	movs	r1, r3
 80034d6:	0020      	movs	r0, r4
 80034d8:	f7fc fe16 	bl	8000108 <__udivsi3>
 80034dc:	0003      	movs	r3, r0
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f903 	bl	80036ea <HAL_SYSTICK_Config>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e00f      	b.n	800350c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d80b      	bhi.n	800350a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	2301      	movs	r3, #1
 80034f6:	425b      	negs	r3, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f8e0 	bl	80036c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_InitTick+0x64>)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b003      	add	sp, #12
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	20000000 	.word	0x20000000
 8003518:	20000014 	.word	0x20000014
 800351c:	20000010 	.word	0x20000010

08003520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x1c>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	001a      	movs	r2, r3
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_IncTick+0x20>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	18d2      	adds	r2, r2, r3
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_IncTick+0x20>)
 8003532:	601a      	str	r2, [r3, #0]
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000014 	.word	0x20000014
 8003540:	200000a0 	.word	0x200000a0

08003544 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  return uwTick;
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <HAL_GetTick+0x10>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	200000a0 	.word	0x200000a0

08003558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff fff0 	bl	8003544 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_Delay+0x40>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	001a      	movs	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	189b      	adds	r3, r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	f7ff ffe0 	bl	8003544 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d8f7      	bhi.n	8003580 <HAL_Delay+0x28>
  {
  }
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000014 	.word	0x20000014

0800359c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	0002      	movs	r2, r0
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b7f      	cmp	r3, #127	; 0x7f
 80035b0:	d828      	bhi.n	8003604 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <__NVIC_SetPriority+0xd4>)
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	33c0      	adds	r3, #192	; 0xc0
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	589b      	ldr	r3, [r3, r2]
 80035c2:	1dfa      	adds	r2, r7, #7
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	0011      	movs	r1, r2
 80035c8:	2203      	movs	r2, #3
 80035ca:	400a      	ands	r2, r1
 80035cc:	00d2      	lsls	r2, r2, #3
 80035ce:	21ff      	movs	r1, #255	; 0xff
 80035d0:	4091      	lsls	r1, r2
 80035d2:	000a      	movs	r2, r1
 80035d4:	43d2      	mvns	r2, r2
 80035d6:	401a      	ands	r2, r3
 80035d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	019b      	lsls	r3, r3, #6
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	401a      	ands	r2, r3
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	0018      	movs	r0, r3
 80035e8:	2303      	movs	r3, #3
 80035ea:	4003      	ands	r3, r0
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035f0:	481f      	ldr	r0, [pc, #124]	; (8003670 <__NVIC_SetPriority+0xd4>)
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	430a      	orrs	r2, r1
 80035fc:	33c0      	adds	r3, #192	; 0xc0
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003602:	e031      	b.n	8003668 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003604:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <__NVIC_SetPriority+0xd8>)
 8003606:	1dfb      	adds	r3, r7, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	0019      	movs	r1, r3
 800360c:	230f      	movs	r3, #15
 800360e:	400b      	ands	r3, r1
 8003610:	3b08      	subs	r3, #8
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3306      	adds	r3, #6
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	3304      	adds	r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1dfa      	adds	r2, r7, #7
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	0011      	movs	r1, r2
 8003624:	2203      	movs	r2, #3
 8003626:	400a      	ands	r2, r1
 8003628:	00d2      	lsls	r2, r2, #3
 800362a:	21ff      	movs	r1, #255	; 0xff
 800362c:	4091      	lsls	r1, r2
 800362e:	000a      	movs	r2, r1
 8003630:	43d2      	mvns	r2, r2
 8003632:	401a      	ands	r2, r3
 8003634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	401a      	ands	r2, r3
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	0018      	movs	r0, r3
 8003644:	2303      	movs	r3, #3
 8003646:	4003      	ands	r3, r0
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800364c:	4809      	ldr	r0, [pc, #36]	; (8003674 <__NVIC_SetPriority+0xd8>)
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	001c      	movs	r4, r3
 8003654:	230f      	movs	r3, #15
 8003656:	4023      	ands	r3, r4
 8003658:	3b08      	subs	r3, #8
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	430a      	orrs	r2, r1
 800365e:	3306      	adds	r3, #6
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	18c3      	adds	r3, r0, r3
 8003664:	3304      	adds	r3, #4
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b003      	add	sp, #12
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	4a0c      	ldr	r2, [pc, #48]	; (80036b8 <SysTick_Config+0x40>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800368a:	2301      	movs	r3, #1
 800368c:	e010      	b.n	80036b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <SysTick_Config+0x44>)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	3a01      	subs	r2, #1
 8003694:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003696:	2301      	movs	r3, #1
 8003698:	425b      	negs	r3, r3
 800369a:	2103      	movs	r1, #3
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff ff7d 	bl	800359c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <SysTick_Config+0x44>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <SysTick_Config+0x44>)
 80036aa:	2207      	movs	r2, #7
 80036ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00ffffff 	.word	0x00ffffff
 80036bc:	e000e010 	.word	0xe000e010

080036c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	210f      	movs	r1, #15
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff ff5d 	bl	800359c <__NVIC_SetPriority>
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ffbf 	bl	8003678 <SysTick_Config>
 80036fa:	0003      	movs	r3, r0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003712:	e155      	b.n	80039c0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4091      	lsls	r1, r2
 800371e:	000a      	movs	r2, r1
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d100      	bne.n	800372c <HAL_GPIO_Init+0x28>
 800372a:	e146      	b.n	80039ba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d00b      	beq.n	800374c <HAL_GPIO_Init+0x48>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003740:	2b11      	cmp	r3, #17
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b12      	cmp	r3, #18
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	409a      	lsls	r2, r3
 800375a:	0013      	movs	r3, r2
 800375c:	43da      	mvns	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	409a      	lsls	r2, r3
 800376e:	0013      	movs	r3, r2
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	2201      	movs	r2, #1
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	409a      	lsls	r2, r3
 80037bc:	0013      	movs	r3, r2
 80037be:	43da      	mvns	r2, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0xea>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d123      	bne.n	8003836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	58d3      	ldr	r3, [r2, r3]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2207      	movs	r2, #7
 8003800:	4013      	ands	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	43da      	mvns	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2107      	movs	r1, #7
 800381a:	400b      	ands	r3, r1
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	409a      	lsls	r2, r3
 8003820:	0013      	movs	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	6939      	ldr	r1, [r7, #16]
 8003834:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	409a      	lsls	r2, r3
 8003844:	0013      	movs	r3, r2
 8003846:	43da      	mvns	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	401a      	ands	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	0013      	movs	r3, r2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	055b      	lsls	r3, r3, #21
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_GPIO_Init+0x174>
 8003876:	e0a0      	b.n	80039ba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003878:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_GPIO_Init+0x2d4>)
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_GPIO_Init+0x2d4>)
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <HAL_GPIO_Init+0x2d4>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003890:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_GPIO_Init+0x2d8>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	589b      	ldr	r3, [r3, r2]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2203      	movs	r2, #3
 80038a2:	4013      	ands	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	409a      	lsls	r2, r3
 80038aa:	0013      	movs	r3, r2
 80038ac:	43da      	mvns	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2390      	movs	r3, #144	; 0x90
 80038b8:	05db      	lsls	r3, r3, #23
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x1ee>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a47      	ldr	r2, [pc, #284]	; (80039e0 <HAL_GPIO_Init+0x2dc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x1ea>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a46      	ldr	r2, [pc, #280]	; (80039e4 <HAL_GPIO_Init+0x2e0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x1e6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <HAL_GPIO_Init+0x2e4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x1e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a44      	ldr	r2, [pc, #272]	; (80039ec <HAL_GPIO_Init+0x2e8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x1de>
 80038de:	2304      	movs	r3, #4
 80038e0:	e008      	b.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038f2:	2300      	movs	r3, #0
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	2103      	movs	r1, #3
 80038f8:	400a      	ands	r2, r1
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003904:	4935      	ldr	r1, [pc, #212]	; (80039dc <HAL_GPIO_Init+0x2d8>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	025b      	lsls	r3, r3, #9
 800392a:	4013      	ands	r3, r2
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43da      	mvns	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4013      	ands	r3, r2
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43da      	mvns	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	035b      	lsls	r3, r3, #13
 800397e:	4013      	ands	r3, r2
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43da      	mvns	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	039b      	lsls	r3, r3, #14
 80039a8:	4013      	ands	r3, r2
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	40da      	lsrs	r2, r3
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	d000      	beq.n	80039ce <HAL_GPIO_Init+0x2ca>
 80039cc:	e6a2      	b.n	8003714 <HAL_GPIO_Init+0x10>
  } 
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b006      	add	sp, #24
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	40010400 	.word	0x40010400

080039f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	0008      	movs	r0, r1
 80039fe:	0011      	movs	r1, r2
 8003a00:	1cbb      	adds	r3, r7, #2
 8003a02:	1c02      	adds	r2, r0, #0
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	1c7b      	adds	r3, r7, #1
 8003a08:	1c0a      	adds	r2, r1, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0c:	1c7b      	adds	r3, r7, #1
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a14:	1cbb      	adds	r3, r7, #2
 8003a16:	881a      	ldrh	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1e:	1cbb      	adds	r3, r7, #2
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f000 fb76 	bl	8004130 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d100      	bne.n	8003a50 <HAL_RCC_OscConfig+0x20>
 8003a4e:	e08e      	b.n	8003b6e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a50:	4bc5      	ldr	r3, [pc, #788]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	220c      	movs	r2, #12
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d00e      	beq.n	8003a7a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a5c:	4bc2      	ldr	r3, [pc, #776]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	220c      	movs	r2, #12
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d117      	bne.n	8003a98 <HAL_RCC_OscConfig+0x68>
 8003a68:	4bbf      	ldr	r3, [pc, #764]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	23c0      	movs	r3, #192	; 0xc0
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	401a      	ands	r2, r3
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	025b      	lsls	r3, r3, #9
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d10e      	bne.n	8003a98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7a:	4bbb      	ldr	r3, [pc, #748]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	029b      	lsls	r3, r3, #10
 8003a82:	4013      	ands	r3, r2
 8003a84:	d100      	bne.n	8003a88 <HAL_RCC_OscConfig+0x58>
 8003a86:	e071      	b.n	8003b6c <HAL_RCC_OscConfig+0x13c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d000      	beq.n	8003a92 <HAL_RCC_OscConfig+0x62>
 8003a90:	e06c      	b.n	8003b6c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f000 fb4c 	bl	8004130 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x80>
 8003aa0:	4bb1      	ldr	r3, [pc, #708]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4bb0      	ldr	r3, [pc, #704]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	0249      	lsls	r1, r1, #9
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e02f      	b.n	8003b10 <HAL_RCC_OscConfig+0xe0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0xa2>
 8003ab8:	4bab      	ldr	r3, [pc, #684]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4baa      	ldr	r3, [pc, #680]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003abe:	49ab      	ldr	r1, [pc, #684]	; (8003d6c <HAL_RCC_OscConfig+0x33c>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4ba8      	ldr	r3, [pc, #672]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4ba7      	ldr	r3, [pc, #668]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aca:	49a9      	ldr	r1, [pc, #676]	; (8003d70 <HAL_RCC_OscConfig+0x340>)
 8003acc:	400a      	ands	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e01e      	b.n	8003b10 <HAL_RCC_OscConfig+0xe0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d10e      	bne.n	8003af8 <HAL_RCC_OscConfig+0xc8>
 8003ada:	4ba3      	ldr	r3, [pc, #652]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4ba2      	ldr	r3, [pc, #648]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	02c9      	lsls	r1, r1, #11
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4b9f      	ldr	r3, [pc, #636]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b9e      	ldr	r3, [pc, #632]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0249      	lsls	r1, r1, #9
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0xe0>
 8003af8:	4b9b      	ldr	r3, [pc, #620]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b9a      	ldr	r3, [pc, #616]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003afe:	499b      	ldr	r1, [pc, #620]	; (8003d6c <HAL_RCC_OscConfig+0x33c>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4b98      	ldr	r3, [pc, #608]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b97      	ldr	r3, [pc, #604]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b0a:	4999      	ldr	r1, [pc, #612]	; (8003d70 <HAL_RCC_OscConfig+0x340>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d014      	beq.n	8003b42 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7ff fd14 	bl	8003544 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b22:	f7ff fd0f 	bl	8003544 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e2fd      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b34:	4b8c      	ldr	r3, [pc, #560]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	029b      	lsls	r3, r3, #10
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0xf2>
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7ff fcff 	bl	8003544 <HAL_GetTick>
 8003b46:	0003      	movs	r3, r0
 8003b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7ff fcfa 	bl	8003544 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e2e8      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	4013      	ands	r3, r2
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x11c>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2202      	movs	r2, #2
 8003b74:	4013      	ands	r3, r2
 8003b76:	d100      	bne.n	8003b7a <HAL_RCC_OscConfig+0x14a>
 8003b78:	e06c      	b.n	8003c54 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	220c      	movs	r2, #12
 8003b80:	4013      	ands	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b84:	4b78      	ldr	r3, [pc, #480]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d11f      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1a0>
 8003b90:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	401a      	ands	r2, r3
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x188>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e2bb      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22f8      	movs	r2, #248	; 0xf8
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00da      	lsls	r2, r3, #3
 8003bc8:	4b67      	ldr	r3, [pc, #412]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e041      	b.n	8003c54 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d024      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b62      	ldr	r3, [pc, #392]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7ff fcae 	bl	8003544 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7ff fca9 	bl	8003544 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e297      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d0f1      	beq.n	8003bee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22f8      	movs	r2, #248	; 0xf8
 8003c10:	4393      	bics	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e018      	b.n	8003c54 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c28:	2101      	movs	r1, #1
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7ff fc89 	bl	8003544 <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c38:	f7ff fc84 	bl	8003544 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e272      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d1f1      	bne.n	8003c38 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7ff fc67 	bl	8003544 <HAL_GetTick>
 8003c76:	0003      	movs	r3, r0
 8003c78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7ff fc62 	bl	8003544 <HAL_GetTick>
 8003c80:	0002      	movs	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e250      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2202      	movs	r2, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	d0f1      	beq.n	8003c7c <HAL_RCC_OscConfig+0x24c>
 8003c98:	e018      	b.n	8003ccc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9e:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	438a      	bics	r2, r1
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7ff fc4d 	bl	8003544 <HAL_GetTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7ff fc48 	bl	8003544 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e236      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d1f1      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d100      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2a8>
 8003cd6:	e0b5      	b.n	8003e44 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	231f      	movs	r3, #31
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	055b      	lsls	r3, r3, #21
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	0549      	lsls	r1, r1, #21
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	61da      	str	r2, [r3, #28]
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	055b      	lsls	r3, r3, #21
 8003d02:	4013      	ands	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d08:	231f      	movs	r3, #31
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_RCC_OscConfig+0x344>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d11a      	bne.n	8003d52 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_RCC_OscConfig+0x344>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_RCC_OscConfig+0x344>)
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	0049      	lsls	r1, r1, #1
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7ff fc0b 	bl	8003544 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7ff fc06 	bl	8003544 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1f4      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_OscConfig+0x344>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10e      	bne.n	8003d78 <HAL_RCC_OscConfig+0x348>
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_RCC_OscConfig+0x338>)
 8003d60:	2101      	movs	r1, #1
 8003d62:	430a      	orrs	r2, r1
 8003d64:	621a      	str	r2, [r3, #32]
 8003d66:	e035      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3a4>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	fffeffff 	.word	0xfffeffff
 8003d70:	fffbffff 	.word	0xfffbffff
 8003d74:	40007000 	.word	0x40007000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x36a>
 8003d80:	4bca      	ldr	r3, [pc, #808]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	4bc9      	ldr	r3, [pc, #804]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	621a      	str	r2, [r3, #32]
 8003d8c:	4bc7      	ldr	r3, [pc, #796]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	4bc6      	ldr	r3, [pc, #792]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003d92:	2104      	movs	r1, #4
 8003d94:	438a      	bics	r2, r1
 8003d96:	621a      	str	r2, [r3, #32]
 8003d98:	e01c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3a4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x38c>
 8003da2:	4bc2      	ldr	r3, [pc, #776]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	4bc1      	ldr	r3, [pc, #772]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003da8:	2104      	movs	r1, #4
 8003daa:	430a      	orrs	r2, r1
 8003dac:	621a      	str	r2, [r3, #32]
 8003dae:	4bbf      	ldr	r3, [pc, #764]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	4bbe      	ldr	r3, [pc, #760]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	430a      	orrs	r2, r1
 8003db8:	621a      	str	r2, [r3, #32]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3a4>
 8003dbc:	4bbb      	ldr	r3, [pc, #748]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	4bba      	ldr	r3, [pc, #744]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	621a      	str	r2, [r3, #32]
 8003dc8:	4bb8      	ldr	r3, [pc, #736]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	4bb7      	ldr	r3, [pc, #732]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003dce:	2104      	movs	r1, #4
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d014      	beq.n	8003e06 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7ff fbb2 	bl	8003544 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e009      	b.n	8003dfa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7ff fbad 	bl	8003544 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	4aaf      	ldr	r2, [pc, #700]	; (80040b0 <HAL_RCC_OscConfig+0x680>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e19a      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	4bac      	ldr	r3, [pc, #688]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x3b6>
 8003e04:	e013      	b.n	8003e2e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7ff fb9d 	bl	8003544 <HAL_GetTick>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0e:	e009      	b.n	8003e24 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7ff fb98 	bl	8003544 <HAL_GetTick>
 8003e14:	0002      	movs	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	4aa5      	ldr	r2, [pc, #660]	; (80040b0 <HAL_RCC_OscConfig+0x680>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e185      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e24:	4ba1      	ldr	r3, [pc, #644]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e2e:	231f      	movs	r3, #31
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e38:	4b9c      	ldr	r3, [pc, #624]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	4b9b      	ldr	r3, [pc, #620]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e3e:	499d      	ldr	r1, [pc, #628]	; (80040b4 <HAL_RCC_OscConfig+0x684>)
 8003e40:	400a      	ands	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12a      	bne.n	8003eac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e56:	4b95      	ldr	r3, [pc, #596]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e5a:	4b94      	ldr	r3, [pc, #592]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e62:	4b92      	ldr	r3, [pc, #584]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e66:	4b91      	ldr	r3, [pc, #580]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e68:	2101      	movs	r1, #1
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7ff fb69 	bl	8003544 <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e78:	f7ff fb64 	bl	8003544 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e152      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e8a:	4b88      	ldr	r3, [pc, #544]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	2202      	movs	r2, #2
 8003e90:	4013      	ands	r3, r2
 8003e92:	d0f1      	beq.n	8003e78 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e94:	4b85      	ldr	r3, [pc, #532]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	22f8      	movs	r2, #248	; 0xf8
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	00da      	lsls	r2, r3, #3
 8003ea4:	4b81      	ldr	r3, [pc, #516]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eaa:	e034      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	3305      	adds	r3, #5
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003eb4:	4b7d      	ldr	r3, [pc, #500]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb8:	4b7c      	ldr	r3, [pc, #496]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003eba:	2104      	movs	r1, #4
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ec0:	4b7a      	ldr	r3, [pc, #488]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	22f8      	movs	r2, #248	; 0xf8
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	00da      	lsls	r2, r3, #3
 8003ed0:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed6:	e01e      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ed8:	4b74      	ldr	r3, [pc, #464]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003edc:	4b73      	ldr	r3, [pc, #460]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ede:	2104      	movs	r1, #4
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ee4:	4b71      	ldr	r3, [pc, #452]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee8:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	438a      	bics	r2, r1
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7ff fb28 	bl	8003544 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003efa:	f7ff fb23 	bl	8003544 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e111      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f0c:	4b67      	ldr	r3, [pc, #412]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2202      	movs	r2, #2
 8003f12:	4013      	ands	r3, r2
 8003f14:	d1f1      	bne.n	8003efa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d05c      	beq.n	8003fda <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f20:	4b62      	ldr	r3, [pc, #392]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	220c      	movs	r2, #12
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d00e      	beq.n	8003f4a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f2c:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	220c      	movs	r2, #12
 8003f32:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d114      	bne.n	8003f62 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f38:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	23c0      	movs	r3, #192	; 0xc0
 8003f3e:	025b      	lsls	r3, r3, #9
 8003f40:	401a      	ands	r2, r3
 8003f42:	23c0      	movs	r3, #192	; 0xc0
 8003f44:	025b      	lsls	r3, r3, #9
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f4a:	4b58      	ldr	r3, [pc, #352]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	025b      	lsls	r3, r3, #9
 8003f52:	4013      	ands	r3, r2
 8003f54:	d040      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x5a8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d03c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0e6      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01b      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f6a:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0249      	lsls	r1, r1, #9
 8003f74:	430a      	orrs	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7ff fae4 	bl	8003544 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f82:	f7ff fadf 	bl	8003544 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0cd      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f94:	4b45      	ldr	r3, [pc, #276]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	025b      	lsls	r3, r3, #9
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x552>
 8003fa0:	e01b      	b.n	8003fda <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fa2:	4b42      	ldr	r3, [pc, #264]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003fa8:	4943      	ldr	r1, [pc, #268]	; (80040b8 <HAL_RCC_OscConfig+0x688>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7ff fac9 	bl	8003544 <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb8:	f7ff fac4 	bl	8003544 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e0b2      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	025b      	lsls	r3, r3, #9
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x588>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003fd8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d100      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5b4>
 8003fe2:	e0a4      	b.n	800412e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	220c      	movs	r2, #12
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d100      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x5c2>
 8003ff0:	e078      	b.n	80040e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d14c      	bne.n	8004094 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004000:	492e      	ldr	r1, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x68c>)
 8004002:	400a      	ands	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7ff fa9d 	bl	8003544 <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7ff fa98 	bl	8003544 <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e086      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	049b      	lsls	r3, r3, #18
 800402a:	4013      	ands	r3, r2
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	220f      	movs	r2, #15
 8004034:	4393      	bics	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 800403e:	430a      	orrs	r2, r1
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_RCC_OscConfig+0x690>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	431a      	orrs	r2, r3
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	0449      	lsls	r1, r1, #17
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7ff fa6b 	bl	8003544 <HAL_GetTick>
 800406e:	0003      	movs	r3, r0
 8004070:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7ff fa66 	bl	8003544 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e054      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	049b      	lsls	r3, r3, #18
 800408e:	4013      	ands	r3, r2
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x644>
 8004092:	e04c      	b.n	800412e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_RCC_OscConfig+0x67c>)
 800409a:	4908      	ldr	r1, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x68c>)
 800409c:	400a      	ands	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7ff fa50 	bl	8003544 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	e015      	b.n	80040d6 <HAL_RCC_OscConfig+0x6a6>
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40021000 	.word	0x40021000
 80040b0:	00001388 	.word	0x00001388
 80040b4:	efffffff 	.word	0xefffffff
 80040b8:	fffeffff 	.word	0xfffeffff
 80040bc:	feffffff 	.word	0xfeffffff
 80040c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7ff fa3e 	bl	8003544 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e02c      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <HAL_RCC_OscConfig+0x708>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	049b      	lsls	r3, r3, #18
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x694>
 80040e2:	e024      	b.n	800412e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e01f      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_RCC_OscConfig+0x708>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_OscConfig+0x708>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	23c0      	movs	r3, #192	; 0xc0
 8004100:	025b      	lsls	r3, r3, #9
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	429a      	cmp	r2, r3
 800410a:	d10e      	bne.n	800412a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	220f      	movs	r2, #15
 8004110:	401a      	ands	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d107      	bne.n	800412a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	23f0      	movs	r3, #240	; 0xf0
 800411e:	039b      	lsls	r3, r3, #14
 8004120:	401a      	ands	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b008      	add	sp, #32
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0bf      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d911      	bls.n	8004182 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2201      	movs	r2, #1
 8004164:	4393      	bics	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	4b5b      	ldr	r3, [pc, #364]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0a6      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d015      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2204      	movs	r2, #4
 8004192:	4013      	ands	r3, r2
 8004194:	d006      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004196:	4b51      	ldr	r3, [pc, #324]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 800419c:	21e0      	movs	r1, #224	; 0xe0
 800419e:	00c9      	lsls	r1, r1, #3
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	22f0      	movs	r2, #240	; 0xf0
 80041aa:	4393      	bics	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d04c      	beq.n	800425c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	4013      	ands	r3, r2
 80041d4:	d120      	bne.n	8004218 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07a      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	049b      	lsls	r3, r3, #18
 80041ea:	4013      	ands	r3, r2
 80041ec:	d114      	bne.n	8004218 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e06e      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80041fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	4013      	ands	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e062      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2202      	movs	r2, #2
 8004210:	4013      	ands	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e05b      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2203      	movs	r2, #3
 800421e:	4393      	bics	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422c:	f7ff f98a 	bl	8003544 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004234:	e009      	b.n	800424a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004236:	f7ff f985 	bl	8003544 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <HAL_RCC_ClockConfig+0x1a4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e042      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	220c      	movs	r2, #12
 8004250:	401a      	ands	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1ec      	bne.n	8004236 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d211      	bcs.n	800428e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	4393      	bics	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x19c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	4013      	ands	r3, r2
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e020      	b.n	80042d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2204      	movs	r2, #4
 8004294:	4013      	ands	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <HAL_RCC_ClockConfig+0x1a8>)
 800429e:	4013      	ands	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042ac:	f000 f820 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042b0:	0001      	movs	r1, r0
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_ClockConfig+0x1a0>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	220f      	movs	r2, #15
 80042ba:	4013      	ands	r3, r2
 80042bc:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1ac>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	000a      	movs	r2, r1
 80042c2:	40da      	lsrs	r2, r3
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1b0>)
 80042c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7ff f8f5 	bl	80034b8 <HAL_InitTick>
  
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	00001388 	.word	0x00001388
 80042e4:	fffff8ff 	.word	0xfffff8ff
 80042e8:	080053f0 	.word	0x080053f0
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b08f      	sub	sp, #60	; 0x3c
 80042f4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80042f6:	2314      	movs	r3, #20
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	4a37      	ldr	r2, [pc, #220]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xe8>)
 80042fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042fe:	c313      	stmia	r3!, {r0, r1, r4}
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	4a35      	ldr	r2, [pc, #212]	; (80043dc <HAL_RCC_GetSysClockFreq+0xec>)
 8004308:	ca13      	ldmia	r2!, {r0, r1, r4}
 800430a:	c313      	stmia	r3!, {r0, r1, r4}
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	2300      	movs	r3, #0
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004324:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	220c      	movs	r2, #12
 800432e:	4013      	ands	r3, r2
 8004330:	2b08      	cmp	r3, #8
 8004332:	d006      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x52>
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d043      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0xd0>
 8004338:	2b04      	cmp	r3, #4
 800433a:	d144      	bne.n	80043c6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004340:	e044      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	220f      	movs	r2, #15
 8004348:	4013      	ands	r3, r2
 800434a:	2214      	movs	r2, #20
 800434c:	18ba      	adds	r2, r7, r2
 800434e:	5cd3      	ldrb	r3, [r2, r3]
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	220f      	movs	r2, #15
 8004358:	4013      	ands	r3, r2
 800435a:	1d3a      	adds	r2, r7, #4
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004362:	23c0      	movs	r3, #192	; 0xc0
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	401a      	ands	r2, r3
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	025b      	lsls	r3, r3, #9
 800436c:	429a      	cmp	r2, r3
 800436e:	d109      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004372:	481c      	ldr	r0, [pc, #112]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004374:	f7fb fec8 	bl	8000108 <__udivsi3>
 8004378:	0003      	movs	r3, r0
 800437a:	001a      	movs	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	4353      	muls	r3, r2
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
 8004382:	e01a      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004386:	23c0      	movs	r3, #192	; 0xc0
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	401a      	ands	r2, r3
 800438c:	23c0      	movs	r3, #192	; 0xc0
 800438e:	025b      	lsls	r3, r3, #9
 8004390:	429a      	cmp	r2, r3
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004396:	4814      	ldr	r0, [pc, #80]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004398:	f7fb feb6 	bl	8000108 <__udivsi3>
 800439c:	0003      	movs	r3, r0
 800439e:	001a      	movs	r2, r3
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	4353      	muls	r3, r2
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	e008      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043aa:	480e      	ldr	r0, [pc, #56]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043ac:	f7fb feac 	bl	8000108 <__udivsi3>
 80043b0:	0003      	movs	r3, r0
 80043b2:	001a      	movs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	4353      	muls	r3, r2
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043be:	e005      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043c4:	e002      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b00f      	add	sp, #60	; 0x3c
 80043d4:	bd90      	pop	{r4, r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	08004a08 	.word	0x08004a08
 80043dc:	08004a18 	.word	0x08004a18
 80043e0:	40021000 	.word	0x40021000
 80043e4:	007a1200 	.word	0x007a1200
 80043e8:	02dc6c00 	.word	0x02dc6c00

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223d      	movs	r2, #61	; 0x3d
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223c      	movs	r2, #60	; 0x3c
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fc f8bd 	bl	8000594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223d      	movs	r2, #61	; 0x3d
 800441e:	2102      	movs	r1, #2
 8004420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	0019      	movs	r1, r3
 800442c:	0010      	movs	r0, r2
 800442e:	f000 f935 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2246      	movs	r2, #70	; 0x46
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223e      	movs	r2, #62	; 0x3e
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223f      	movs	r2, #63	; 0x3f
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2240      	movs	r2, #64	; 0x40
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2241      	movs	r2, #65	; 0x41
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2242      	movs	r2, #66	; 0x42
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2243      	movs	r2, #67	; 0x43
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2244      	movs	r2, #68	; 0x44
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2245      	movs	r2, #69	; 0x45
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	223d      	movs	r2, #61	; 0x3d
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	223d      	movs	r2, #61	; 0x3d
 8004498:	5c9b      	ldrb	r3, [r3, r2]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e033      	b.n	800450c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223d      	movs	r2, #61	; 0x3d
 80044a8:	2102      	movs	r1, #2
 80044aa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_TIM_Base_Start+0x88>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <HAL_TIM_Base_Start+0x4a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	429a      	cmp	r2, r3
 80044c0:	d009      	beq.n	80044d6 <HAL_TIM_Base_Start+0x4a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a14      	ldr	r2, [pc, #80]	; (8004518 <HAL_TIM_Base_Start+0x8c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIM_Base_Start+0x4a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_TIM_Base_Start+0x90>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2207      	movs	r2, #7
 80044de:	4013      	ands	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d010      	beq.n	800450a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	e007      	b.n	800450a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b004      	add	sp, #16
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40014000 	.word	0x40014000

08004520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223c      	movs	r2, #60	; 0x3c
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e0ab      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x170>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	223c      	movs	r2, #60	; 0x3c
 800453c:	2101      	movs	r1, #1
 800453e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	223d      	movs	r2, #61	; 0x3d
 8004544:	2102      	movs	r1, #2
 8004546:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2277      	movs	r2, #119	; 0x77
 8004554:	4393      	bics	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a4f      	ldr	r2, [pc, #316]	; (8004698 <HAL_TIM_ConfigClockSource+0x178>)
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d100      	bne.n	8004572 <HAL_TIM_ConfigClockSource+0x52>
 8004570:	e06b      	b.n	800464a <HAL_TIM_ConfigClockSource+0x12a>
 8004572:	d80e      	bhi.n	8004592 <HAL_TIM_ConfigClockSource+0x72>
 8004574:	2b10      	cmp	r3, #16
 8004576:	d100      	bne.n	800457a <HAL_TIM_ConfigClockSource+0x5a>
 8004578:	e077      	b.n	800466a <HAL_TIM_ConfigClockSource+0x14a>
 800457a:	d803      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x64>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d100      	bne.n	8004582 <HAL_TIM_ConfigClockSource+0x62>
 8004580:	e073      	b.n	800466a <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004582:	e07c      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004584:	2b20      	cmp	r3, #32
 8004586:	d100      	bne.n	800458a <HAL_TIM_ConfigClockSource+0x6a>
 8004588:	e06f      	b.n	800466a <HAL_TIM_ConfigClockSource+0x14a>
 800458a:	2b30      	cmp	r3, #48	; 0x30
 800458c:	d100      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x70>
 800458e:	e06c      	b.n	800466a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004590:	e075      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004592:	2b70      	cmp	r3, #112	; 0x70
 8004594:	d00e      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x94>
 8004596:	d804      	bhi.n	80045a2 <HAL_TIM_ConfigClockSource+0x82>
 8004598:	2b50      	cmp	r3, #80	; 0x50
 800459a:	d036      	beq.n	800460a <HAL_TIM_ConfigClockSource+0xea>
 800459c:	2b60      	cmp	r3, #96	; 0x60
 800459e:	d044      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80045a0:	e06d      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	0152      	lsls	r2, r2, #5
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d068      	beq.n	800467c <HAL_TIM_ConfigClockSource+0x15c>
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0192      	lsls	r2, r2, #6
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d017      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80045b2:	e064      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 f964 	bl	8004890 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2277      	movs	r2, #119	; 0x77
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	609a      	str	r2, [r3, #8]
      break;
 80045e0:	e04d      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 f94d 	bl	8004890 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	01c9      	lsls	r1, r1, #7
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
      break;
 8004608:	e039      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	001a      	movs	r2, r3
 8004618:	f000 f8c0 	bl	800479c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2150      	movs	r1, #80	; 0x50
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f91a 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8004628:	e029      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	001a      	movs	r2, r3
 8004638:	f000 f8de 	bl	80047f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2160      	movs	r1, #96	; 0x60
 8004642:	0018      	movs	r0, r3
 8004644:	f000 f90a 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8004648:	e019      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	001a      	movs	r2, r3
 8004658:	f000 f8a0 	bl	800479c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f8fa 	bl	800485c <TIM_ITRx_SetConfig>
      break;
 8004668:	e009      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	0019      	movs	r1, r3
 8004674:	0010      	movs	r0, r2
 8004676:	f000 f8f1 	bl	800485c <TIM_ITRx_SetConfig>
        break;
 800467a:	e000      	b.n	800467e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800467c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	223d      	movs	r2, #61	; 0x3d
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	223c      	movs	r2, #60	; 0x3c
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b004      	add	sp, #16
 8004696:	bd80      	pop	{r7, pc}
 8004698:	ffff00ff 	.word	0xffff00ff

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d008      	beq.n	80046c6 <TIM_Base_SetConfig+0x2a>
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d003      	beq.n	80046c6 <TIM_Base_SetConfig+0x2a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a30      	ldr	r2, [pc, #192]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2270      	movs	r2, #112	; 0x70
 80046ca:	4393      	bics	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a29      	ldr	r2, [pc, #164]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	05db      	lsls	r3, r3, #23
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d013      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a25      	ldr	r2, [pc, #148]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a24      	ldr	r2, [pc, #144]	; (8004788 <TIM_Base_SetConfig+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a23      	ldr	r2, [pc, #140]	; (800478c <TIM_Base_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <TIM_Base_SetConfig+0xf4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0x76>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a21      	ldr	r2, [pc, #132]	; (8004794 <TIM_Base_SetConfig+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a20      	ldr	r2, [pc, #128]	; (8004798 <TIM_Base_SetConfig+0xfc>)
 8004716:	4013      	ands	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	4393      	bics	r3, r2
 800472a:	001a      	movs	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00b      	beq.n	800476a <TIM_Base_SetConfig+0xce>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a0d      	ldr	r2, [pc, #52]	; (800478c <TIM_Base_SetConfig+0xf0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <TIM_Base_SetConfig+0xce>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <TIM_Base_SetConfig+0xf4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_Base_SetConfig+0xce>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <TIM_Base_SetConfig+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d103      	bne.n	8004772 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	615a      	str	r2, [r3, #20]
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b004      	add	sp, #16
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40002000 	.word	0x40002000
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800
 8004798:	fffffcff 	.word	0xfffffcff

0800479c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4393      	bics	r3, r2
 80047b6:	001a      	movs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	22f0      	movs	r2, #240	; 0xf0
 80047c6:	4393      	bics	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	220a      	movs	r2, #10
 80047d8:	4393      	bics	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b006      	add	sp, #24
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	2210      	movs	r2, #16
 800480a:	4393      	bics	r3, r2
 800480c:	001a      	movs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <TIM_TI2_ConfigInputStage+0x60>)
 8004822:	4013      	ands	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	031b      	lsls	r3, r3, #12
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	22a0      	movs	r2, #160	; 0xa0
 8004834:	4393      	bics	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b006      	add	sp, #24
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	ffff0fff 	.word	0xffff0fff

0800485c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2270      	movs	r2, #112	; 0x70
 8004870:	4393      	bics	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	2207      	movs	r2, #7
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <TIM_ETR_SetConfig+0x3c>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b006      	add	sp, #24
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	ffff00ff 	.word	0xffff00ff

080048d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	223c      	movs	r2, #60	; 0x3c
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e047      	b.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	223c      	movs	r2, #60	; 0x3c
 80048ec:	2101      	movs	r1, #1
 80048ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223d      	movs	r2, #61	; 0x3d
 80048f4:	2102      	movs	r1, #2
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2270      	movs	r2, #112	; 0x70
 800490c:	4393      	bics	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00f      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	429a      	cmp	r2, r3
 8004936:	d009      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a11      	ldr	r2, [pc, #68]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10c      	bne.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	4393      	bics	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223d      	movs	r2, #61	; 0x3d
 800496a:	2101      	movs	r1, #1
 800496c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	223c      	movs	r2, #60	; 0x3c
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b004      	add	sp, #16
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400
 8004988:	40014000 	.word	0x40014000

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	2600      	movs	r6, #0
 8004990:	4d0c      	ldr	r5, [pc, #48]	; (80049c4 <__libc_init_array+0x38>)
 8004992:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	2600      	movs	r6, #0
 800499e:	f000 f821 	bl	80049e4 <_init>
 80049a2:	4d0a      	ldr	r5, [pc, #40]	; (80049cc <__libc_init_array+0x40>)
 80049a4:	4c0a      	ldr	r4, [pc, #40]	; (80049d0 <__libc_init_array+0x44>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	00b3      	lsls	r3, r6, #2
 80049b2:	58eb      	ldr	r3, [r5, r3]
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	00b3      	lsls	r3, r6, #2
 80049bc:	58eb      	ldr	r3, [r5, r3]
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08005450 	.word	0x08005450
 80049c8:	08005450 	.word	0x08005450
 80049cc:	08005450 	.word	0x08005450
 80049d0:	08005454 	.word	0x08005454

080049d4 <memset>:
 80049d4:	0003      	movs	r3, r0
 80049d6:	1812      	adds	r2, r2, r0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d100      	bne.n	80049de <memset+0xa>
 80049dc:	4770      	bx	lr
 80049de:	7019      	strb	r1, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	e7f9      	b.n	80049d8 <memset+0x4>

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
