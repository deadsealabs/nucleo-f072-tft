
nucleo-f072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ffc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800513c  0800513c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800513c  0800513c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08005154  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08005154  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001601  00000000  00000000  0002a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0002c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e5a  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008acd  00000000  00000000  00044f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000939cb  00000000  00000000  0004da17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e13e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000e1460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050a4 	.word	0x080050a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080050a4 	.word	0x080050a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f003 fc94 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e6 	bl	80003fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f876 	bl	8000320 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ID = readID();
 8000234:	f001 fbc0 	bl	80019b8 <readID>
 8000238:	0003      	movs	r3, r0
 800023a:	001a      	movs	r2, r3
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <main+0x78>)
 800023e:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000240:	2064      	movs	r0, #100	; 0x64
 8000242:	f003 fce9 	bl	8003c18 <HAL_Delay>

  tft_init (ID);
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <main+0x78>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fb3e 	bl	80018cc <tft_init>

  setRotation(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f001 fbc1 	bl	80019d8 <setRotation>

  fillScreen(BLACK);
 8000256:	2000      	movs	r0, #0
 8000258:	f002 fa48 	bl	80026ec <fillScreen>

  testFillScreen();
 800025c:	f003 fa70 	bl	8003740 <testFillScreen>
  testLines(CYAN);
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0x7c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f003 fa84 	bl	8003770 <testLines>
  testFastLines(RED, BLUE);
 8000268:	23f8      	movs	r3, #248	; 0xf8
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	211f      	movs	r1, #31
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fb84 	bl	800397c <testFastLines>
  testFilledCircles(10, MAGENTA);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0x80>)
 8000276:	0019      	movs	r1, r3
 8000278:	200a      	movs	r0, #10
 800027a:	f003 fbbd 	bl	80039f8 <testFilledCircles>
  testCircles(10, WHITE);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x84>)
 8000280:	0019      	movs	r1, r3
 8000282:	200a      	movs	r0, #10
 8000284:	f003 fbf7 	bl	8003a76 <testCircles>

  fillScreen(BLACK);
 8000288:	2000      	movs	r0, #0
 800028a:	f002 fa2f 	bl	80026ec <fillScreen>

  setRotation(1);
 800028e:	2001      	movs	r0, #1
 8000290:	f001 fba2 	bl	80019d8 <setRotation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x74>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000002c 	.word	0x2000002c
 800029c:	000007ff 	.word	0x000007ff
 80002a0:	0000f81f 	.word	0x0000f81f
 80002a4:	0000ffff 	.word	0x0000ffff

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f004 feeb 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f004 fee4 	bl	8005094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2220      	movs	r2, #32
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 ff05 	bl	80040f0 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ea:	f000 f925 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2203      	movs	r2, #3
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f004 fa76 	bl	80047fc <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000314:	f000 f910 	bl	8000538 <Error_Handler>
  }
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b013      	add	sp, #76	; 0x4c
 800031e:	bd90      	pop	{r4, r7, pc}

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	2310      	movs	r3, #16
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	2310      	movs	r3, #16
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f004 feaf 	bl	8005094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	2308      	movs	r3, #8
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2308      	movs	r3, #8
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f004 fea7 	bl	8005094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  __TIM1_CLK_ENABLE();
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_TIM1_Init+0xcc>)
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0109      	lsls	r1, r1, #4
 8000350:	430a      	orrs	r2, r1
 8000352:	619a      	str	r2, [r3, #24]
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_TIM1_Init+0xcc>)
 8000356:	699a      	ldr	r2, [r3, #24]
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <MX_TIM1_Init+0xd4>)
 8000366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800036a:	222f      	movs	r2, #47	; 0x2f
 800036c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000376:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <MX_TIM1_Init+0xd8>)
 8000378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_TIM1_Init+0xd0>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_TIM1_Init+0xd0>)
 800038e:	0018      	movs	r0, r3
 8000390:	f004 fb8c 	bl	8004aac <HAL_TIM_Base_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000398:	f000 f8ce 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	2110      	movs	r1, #16
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	0152      	lsls	r2, r2, #5
 80003a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a6:	187a      	adds	r2, r7, r1
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003aa:	0011      	movs	r1, r2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f004 fc17 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f8bf 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	2108      	movs	r1, #8
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f004 fdde 	bl	8004f90 <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80003d8:	f000 f8ae 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <MX_TIM1_Init+0xd0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f004 fbb4 	bl	8004b4c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b008      	add	sp, #32
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	20000034 	.word	0x20000034
 80003f4:	40012c00 	.word	0x40012c00
 80003f8:	0000fffe 	.word	0x0000fffe

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	; 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 fe41 	bl	8005094 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b44      	ldr	r3, [pc, #272]	; (8000524 <MX_GPIO_Init+0x128>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <MX_GPIO_Init+0x128>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0309      	lsls	r1, r1, #12
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <MX_GPIO_Init+0x128>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	031b      	lsls	r3, r3, #12
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <MX_GPIO_Init+0x128>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <MX_GPIO_Init+0x128>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b39      	ldr	r3, [pc, #228]	; (8000524 <MX_GPIO_Init+0x128>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <MX_GPIO_Init+0x128>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_GPIO_Init+0x128>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	02c9      	lsls	r1, r1, #11
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x128>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	02db      	lsls	r3, r3, #11
 8000460:	4013      	ands	r3, r2
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|D1_Pin, GPIO_PIN_RESET);
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_GPIO_Init+0x12c>)
 8000468:	2200      	movs	r2, #0
 800046a:	2182      	movs	r1, #130	; 0x82
 800046c:	0018      	movs	r0, r3
 800046e:	f003 fe21 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WR_Pin|RS_Pin|D7_Pin|D0_Pin
 8000472:	492e      	ldr	r1, [pc, #184]	; (800052c <MX_GPIO_Init+0x130>)
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fe1a 	bl	80040b4 <HAL_GPIO_WritePin>
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D6_Pin|D3_Pin|D5_Pin
 8000480:	492b      	ldr	r1, [pc, #172]	; (8000530 <MX_GPIO_Init+0x134>)
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <MX_GPIO_Init+0x138>)
 8000484:	2200      	movs	r2, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fe14 	bl	80040b4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin D1_Pin */
  GPIO_InitStruct.Pin = RST_Pin|D1_Pin;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2282      	movs	r2, #130	; 0x82
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f003 fc8a 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RD_Pin */
  GPIO_InitStruct.Pin = RD_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RD_GPIO_Port, &GPIO_InitStruct);
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f003 fc7a 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_Pin RS_Pin D7_Pin D0_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = WR_Pin|RS_Pin|D7_Pin|D0_Pin
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <MX_GPIO_Init+0x130>)
 80004d4:	601a      	str	r2, [r3, #0]
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2201      	movs	r2, #1
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	193a      	adds	r2, r7, r4
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f003 fc67 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = CS_Pin|D6_Pin|D3_Pin|D5_Pin
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <MX_GPIO_Init+0x134>)
 80004fc:	601a      	str	r2, [r3, #0]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	187b      	adds	r3, r7, r1
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <MX_GPIO_Init+0x138>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f003 fc54 	bl	8003dc4 <HAL_GPIO_Init>

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b009      	add	sp, #36	; 0x24
 8000522:	bd90      	pop	{r4, r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800
 800052c:	00000712 	.word	0x00000712
 8000530:	00000439 	.word	0x00000439
 8000534:	48000400 	.word	0x48000400

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x44>)
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_MspInit+0x44>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	619a      	str	r2, [r3, #24]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x44>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_MspInit+0x44>)
 8000564:	69da      	ldr	r2, [r3, #28]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_MspInit+0x44>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0549      	lsls	r1, r1, #21
 800056c:	430a      	orrs	r2, r1
 800056e:	61da      	str	r2, [r3, #28]
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_MspInit+0x44>)
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	055b      	lsls	r3, r3, #21
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_TIM_Base_MspInit+0x38>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d10d      	bne.n	80005ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0109      	lsls	r1, r1, #4
 80005a8:	430a      	orrs	r2, r1
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_TIM_Base_MspInit+0x3c>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40012c00 	.word	0x40012c00
 80005c8:	40021000 	.word	0x40021000

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f003 faf4 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <delay>:
#define  HEIGHT   ((uint16_t)480)

/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <delay+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <delay+0x28>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d8f9      	bhi.n	800061a <delay+0x12>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000034 	.word	0x20000034

08000634 <PIN_LOW>:
#include "functions.h"
#include "user_setting.h"
#include "stdlib.h"

void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	000a      	movs	r2, r1
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000642:	1cbb      	adds	r3, r7, #2
 8000644:	8819      	ldrh	r1, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f003 fd32 	bl	80040b4 <HAL_GPIO_WritePin>
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	000a      	movs	r2, r1
 8000662:	1cbb      	adds	r3, r7, #2
 8000664:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000666:	1cbb      	adds	r3, r7, #2
 8000668:	8819      	ldrh	r1, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fd20 	bl	80040b4 <HAL_GPIO_WritePin>
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}

0800067c <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	000a      	movs	r2, r1
 8000686:	1cbb      	adds	r3, r7, #2
 8000688:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800068a:	1cbb      	adds	r3, r7, #2
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	210c      	movs	r1, #12
 8000690:	187b      	adds	r3, r7, r1
 8000692:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 fb8c 	bl	8003dc4 <HAL_GPIO_Init>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b008      	add	sp, #32
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	000a      	movs	r2, r1
 80006be:	1cbb      	adds	r3, r7, #2
 80006c0:	801a      	strh	r2, [r3, #0]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80006c2:	1cbb      	adds	r3, r7, #2
 80006c4:	881a      	ldrh	r2, [r3, #0]
 80006c6:	210c      	movs	r1, #12
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2203      	movs	r2, #3
 80006dc:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 fb6d 	bl	8003dc4 <HAL_GPIO_Init>
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b008      	add	sp, #32
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <width+0x10>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000004 	.word	0x20000004

08000708 <height>:

uint16_t height(void)
{ return _height; }
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <height+0x10>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000006 	.word	0x20000006

0800071c <color565_to_r>:

static uint16_t color565_to_555(uint16_t color) {
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
}

static uint8_t color565_to_r(uint16_t color) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	801a      	strh	r2, [r3, #0]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	121b      	asrs	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2207      	movs	r2, #7
 8000732:	4393      	bics	r3, r2
 8000734:	b2db      	uxtb	r3, r3
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}

0800073e <color565_to_g>:

static uint8_t color565_to_g(uint16_t color) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	0002      	movs	r2, r0
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	801a      	strh	r2, [r3, #0]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	10db      	asrs	r3, r3, #3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2203      	movs	r2, #3
 8000754:	4393      	bics	r3, r2
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	801a      	strh	r2, [r3, #0]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}

0800077c <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	1c0a      	adds	r2, r1, #0
 800078c:	801a      	strh	r2, [r3, #0]
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	881a      	ldrh	r2, [r3, #0]
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f000 f9af 	bl	8000afc <writecmddata>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	009a      	lsls	r2, r3, #2
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff60 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <setReadDir+0x70>)
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ff5b 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	00da      	lsls	r2, r3, #3
 80007ca:	2390      	movs	r3, #144	; 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff53 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <setReadDir+0x74>)
 80007d8:	2108      	movs	r1, #8
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ff4e 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <setReadDir+0x74>)
 80007e2:	2120      	movs	r1, #32
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ff49 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <setReadDir+0x74>)
 80007ec:	2110      	movs	r1, #16
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff44 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <setReadDir+0x74>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f7ff ff3d 	bl	800067c <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	005a      	lsls	r2, r3, #1
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ff35 	bl	800067c <PIN_INPUT>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	48000800 	.word	0x48000800
 800081c:	48000400 	.word	0x48000400

08000820 <setWriteDir>:

void setWriteDir (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	009a      	lsls	r2, r3, #2
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff ff40 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <setWriteDir+0x70>)
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff ff3b 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	00da      	lsls	r2, r3, #3
 8000842:	2390      	movs	r3, #144	; 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff ff33 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <setWriteDir+0x74>)
 8000850:	2108      	movs	r1, #8
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ff2e 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <setWriteDir+0x74>)
 800085a:	2120      	movs	r1, #32
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff29 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <setWriteDir+0x74>)
 8000864:	2110      	movs	r1, #16
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff ff24 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <setWriteDir+0x74>)
 8000872:	0019      	movs	r1, r3
 8000874:	0010      	movs	r0, r2
 8000876:	f7ff ff1d 	bl	80006b4 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	2390      	movs	r3, #144	; 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff15 	bl	80006b4 <PIN_OUTPUT>
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000800 	.word	0x48000800
 8000894:	48000400 	.word	0x48000400

08000898 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	801a      	strh	r2, [r3, #0]
    uint8_t r = color565_to_r(color);
 80008a4:	250f      	movs	r5, #15
 80008a6:	197c      	adds	r4, r7, r5
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ff35 	bl	800071c <color565_to_r>
 80008b2:	0003      	movs	r3, r0
 80008b4:	7023      	strb	r3, [r4, #0]
    uint8_t g = color565_to_g(color);
 80008b6:	260e      	movs	r6, #14
 80008b8:	19bc      	adds	r4, r7, r6
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ff3d 	bl	800073e <color565_to_g>
 80008c4:	0003      	movs	r3, r0
 80008c6:	7023      	strb	r3, [r4, #0]
    uint8_t b = color565_to_b(color);
 80008c8:	200d      	movs	r0, #13
 80008ca:	183c      	adds	r4, r7, r0
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff45 	bl	8000760 <color565_to_b>
 80008d6:	0003      	movs	r3, r0
 80008d8:	7023      	strb	r3, [r4, #0]
    write8(r);
 80008da:	2390      	movs	r3, #144	; 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	22e0      	movs	r2, #224	; 0xe0
 80008e0:	04d2      	lsls	r2, r2, #19
 80008e2:	619a      	str	r2, [r3, #24]
 80008e4:	4b83      	ldr	r3, [pc, #524]	; (8000af4 <write24+0x25c>)
 80008e6:	2287      	movs	r2, #135	; 0x87
 80008e8:	04d2      	lsls	r2, r2, #19
 80008ea:	619a      	str	r2, [r3, #24]
 80008ec:	4b82      	ldr	r3, [pc, #520]	; (8000af8 <write24+0x260>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0412      	lsls	r2, r2, #16
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	197b      	adds	r3, r7, r5
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	025a      	lsls	r2, r3, #9
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	401a      	ands	r2, r3
 8000900:	197b      	adds	r3, r7, r5
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	0219      	lsls	r1, r3, #8
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	400b      	ands	r3, r1
 800090c:	431a      	orrs	r2, r3
 800090e:	197b      	adds	r3, r7, r5
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0059      	lsls	r1, r3, #1
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	400b      	ands	r3, r1
 800091a:	431a      	orrs	r2, r3
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	619a      	str	r2, [r3, #24]
 8000922:	0028      	movs	r0, r5
 8000924:	183b      	adds	r3, r7, r0
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2208      	movs	r2, #8
 800092a:	401a      	ands	r2, r3
 800092c:	183b      	adds	r3, r7, r0
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2120      	movs	r1, #32
 8000934:	400b      	ands	r3, r1
 8000936:	431a      	orrs	r2, r3
 8000938:	183b      	adds	r3, r7, r0
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	105b      	asrs	r3, r3, #1
 800093e:	2110      	movs	r1, #16
 8000940:	400b      	ands	r3, r1
 8000942:	431a      	orrs	r2, r3
 8000944:	183b      	adds	r3, r7, r0
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	0119      	lsls	r1, r3, #4
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	400b      	ands	r3, r1
 8000950:	431a      	orrs	r2, r3
 8000952:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <write24+0x25c>)
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	183b      	adds	r3, r7, r0
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	019b      	lsls	r3, r3, #6
 800095c:	0019      	movs	r1, r3
 800095e:	4b66      	ldr	r3, [pc, #408]	; (8000af8 <write24+0x260>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	400a      	ands	r2, r1
 8000964:	619a      	str	r2, [r3, #24]
 8000966:	2390      	movs	r3, #144	; 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2102      	movs	r1, #2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fe61 	bl	8000634 <PIN_LOW>
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2102      	movs	r1, #2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fe6d 	bl	8000658 <PIN_HIGH>
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2102      	movs	r1, #2
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fe67 	bl	8000658 <PIN_HIGH>
    write8(g);
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	22e0      	movs	r2, #224	; 0xe0
 8000990:	04d2      	lsls	r2, r2, #19
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <write24+0x25c>)
 8000996:	2287      	movs	r2, #135	; 0x87
 8000998:	04d2      	lsls	r2, r2, #19
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <write24+0x260>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0412      	lsls	r2, r2, #16
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	19bb      	adds	r3, r7, r6
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	025a      	lsls	r2, r3, #9
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	401a      	ands	r2, r3
 80009b0:	19bb      	adds	r3, r7, r6
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0219      	lsls	r1, r3, #8
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	400b      	ands	r3, r1
 80009bc:	431a      	orrs	r2, r3
 80009be:	19bb      	adds	r3, r7, r6
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0059      	lsls	r1, r3, #1
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	400b      	ands	r3, r1
 80009ca:	431a      	orrs	r2, r3
 80009cc:	2390      	movs	r3, #144	; 0x90
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	619a      	str	r2, [r3, #24]
 80009d2:	0030      	movs	r0, r6
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2208      	movs	r2, #8
 80009da:	401a      	ands	r2, r3
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2120      	movs	r1, #32
 80009e4:	400b      	ands	r3, r1
 80009e6:	431a      	orrs	r2, r3
 80009e8:	183b      	adds	r3, r7, r0
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	105b      	asrs	r3, r3, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	400b      	ands	r3, r1
 80009f2:	431a      	orrs	r2, r3
 80009f4:	183b      	adds	r3, r7, r0
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0119      	lsls	r1, r3, #4
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	400b      	ands	r3, r1
 8000a00:	431a      	orrs	r2, r3
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <write24+0x25c>)
 8000a04:	619a      	str	r2, [r3, #24]
 8000a06:	183b      	adds	r3, r7, r0
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	019b      	lsls	r3, r3, #6
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <write24+0x260>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	400a      	ands	r2, r1
 8000a14:	619a      	str	r2, [r3, #24]
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fe09 	bl	8000634 <PIN_LOW>
 8000a22:	2390      	movs	r3, #144	; 0x90
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2102      	movs	r1, #2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff fe15 	bl	8000658 <PIN_HIGH>
 8000a2e:	2390      	movs	r3, #144	; 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2102      	movs	r1, #2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fe0f 	bl	8000658 <PIN_HIGH>
    write8(b);
 8000a3a:	2390      	movs	r3, #144	; 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	22e0      	movs	r2, #224	; 0xe0
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <write24+0x25c>)
 8000a46:	2287      	movs	r2, #135	; 0x87
 8000a48:	04d2      	lsls	r2, r2, #19
 8000a4a:	619a      	str	r2, [r3, #24]
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <write24+0x260>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0412      	lsls	r2, r2, #16
 8000a52:	619a      	str	r2, [r3, #24]
 8000a54:	200d      	movs	r0, #13
 8000a56:	183b      	adds	r3, r7, r0
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	025a      	lsls	r2, r3, #9
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	401a      	ands	r2, r3
 8000a62:	183b      	adds	r3, r7, r0
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0219      	lsls	r1, r3, #8
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	183b      	adds	r3, r7, r0
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	0059      	lsls	r1, r3, #1
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	2390      	movs	r3, #144	; 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2208      	movs	r2, #8
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	183b      	adds	r3, r7, r0
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2120      	movs	r1, #32
 8000a94:	400b      	ands	r3, r1
 8000a96:	431a      	orrs	r2, r3
 8000a98:	183b      	adds	r3, r7, r0
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	105b      	asrs	r3, r3, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	183b      	adds	r3, r7, r0
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0119      	lsls	r1, r3, #4
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	400b      	ands	r3, r1
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <write24+0x25c>)
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	183b      	adds	r3, r7, r0
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	019b      	lsls	r3, r3, #6
 8000abc:	0019      	movs	r1, r3
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <write24+0x260>)
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	619a      	str	r2, [r3, #24]
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	2102      	movs	r1, #2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fdb1 	bl	8000634 <PIN_LOW>
 8000ad2:	2390      	movs	r3, #144	; 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fdbd 	bl	8000658 <PIN_HIGH>
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fdb7 	bl	8000658 <PIN_HIGH>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b005      	add	sp, #20
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800

08000afc <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	801a      	strh	r2, [r3, #0]
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	1c0a      	adds	r2, r1, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
    CS_ACTIVE;
 8000b0e:	4bc9      	ldr	r3, [pc, #804]	; (8000e34 <writecmddata+0x338>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fd8e 	bl	8000634 <PIN_LOW>
    WriteCmd(cmd);
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fd88 	bl	8000634 <PIN_LOW>
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	240e      	movs	r4, #14
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	1dba      	adds	r2, r7, #6
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	2390      	movs	r3, #144	; 0x90
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	22e0      	movs	r2, #224	; 0xe0
 8000b42:	04d2      	lsls	r2, r2, #19
 8000b44:	619a      	str	r2, [r3, #24]
 8000b46:	4bbb      	ldr	r3, [pc, #748]	; (8000e34 <writecmddata+0x338>)
 8000b48:	2287      	movs	r2, #135	; 0x87
 8000b4a:	04d2      	lsls	r2, r2, #19
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	4bba      	ldr	r3, [pc, #744]	; (8000e38 <writecmddata+0x33c>)
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0412      	lsls	r2, r2, #16
 8000b54:	619a      	str	r2, [r3, #24]
 8000b56:	0008      	movs	r0, r1
 8000b58:	183b      	adds	r3, r7, r0
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	025a      	lsls	r2, r3, #9
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	401a      	ands	r2, r3
 8000b64:	183b      	adds	r3, r7, r0
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0219      	lsls	r1, r3, #8
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	400b      	ands	r3, r1
 8000b70:	431a      	orrs	r2, r3
 8000b72:	183b      	adds	r3, r7, r0
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0059      	lsls	r1, r3, #1
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	2390      	movs	r3, #144	; 0x90
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	183b      	adds	r3, r7, r0
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	183b      	adds	r3, r7, r0
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	400b      	ands	r3, r1
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	183b      	adds	r3, r7, r0
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	105b      	asrs	r3, r3, #1
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	183b      	adds	r3, r7, r0
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0119      	lsls	r1, r3, #4
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	4b9f      	ldr	r3, [pc, #636]	; (8000e34 <writecmddata+0x338>)
 8000bb6:	619a      	str	r2, [r3, #24]
 8000bb8:	183b      	adds	r3, r7, r0
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	019b      	lsls	r3, r3, #6
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	4b9d      	ldr	r3, [pc, #628]	; (8000e38 <writecmddata+0x33c>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	619a      	str	r2, [r3, #24]
 8000bc8:	2390      	movs	r3, #144	; 0x90
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2102      	movs	r1, #2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fd30 	bl	8000634 <PIN_LOW>
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2102      	movs	r1, #2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fd3c 	bl	8000658 <PIN_HIGH>
 8000be0:	2390      	movs	r3, #144	; 0x90
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	2102      	movs	r1, #2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fd36 	bl	8000658 <PIN_HIGH>
 8000bec:	2390      	movs	r3, #144	; 0x90
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	22e0      	movs	r2, #224	; 0xe0
 8000bf2:	04d2      	lsls	r2, r2, #19
 8000bf4:	619a      	str	r2, [r3, #24]
 8000bf6:	4b8f      	ldr	r3, [pc, #572]	; (8000e34 <writecmddata+0x338>)
 8000bf8:	2287      	movs	r2, #135	; 0x87
 8000bfa:	04d2      	lsls	r2, r2, #19
 8000bfc:	619a      	str	r2, [r3, #24]
 8000bfe:	4b8e      	ldr	r3, [pc, #568]	; (8000e38 <writecmddata+0x33c>)
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0412      	lsls	r2, r2, #16
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	025a      	lsls	r2, r3, #9
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	401a      	ands	r2, r3
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	0219      	lsls	r1, r3, #8
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	0059      	lsls	r1, r3, #1
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	2390      	movs	r3, #144	; 0x90
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	619a      	str	r2, [r3, #24]
 8000c34:	0020      	movs	r0, r4
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	183b      	adds	r3, r7, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2120      	movs	r1, #32
 8000c46:	400b      	ands	r3, r1
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	183b      	adds	r3, r7, r0
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	105b      	asrs	r3, r3, #1
 8000c50:	2110      	movs	r1, #16
 8000c52:	400b      	ands	r3, r1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	183b      	adds	r3, r7, r0
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0119      	lsls	r1, r3, #4
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	400b      	ands	r3, r1
 8000c62:	431a      	orrs	r2, r3
 8000c64:	4b73      	ldr	r3, [pc, #460]	; (8000e34 <writecmddata+0x338>)
 8000c66:	619a      	str	r2, [r3, #24]
 8000c68:	183b      	adds	r3, r7, r0
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	0019      	movs	r1, r3
 8000c70:	4b71      	ldr	r3, [pc, #452]	; (8000e38 <writecmddata+0x33c>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	400a      	ands	r2, r1
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	2390      	movs	r3, #144	; 0x90
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fcd8 	bl	8000634 <PIN_LOW>
 8000c84:	2390      	movs	r3, #144	; 0x90
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	2102      	movs	r1, #2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fce4 	bl	8000658 <PIN_HIGH>
 8000c90:	2390      	movs	r3, #144	; 0x90
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	2102      	movs	r1, #2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fcde 	bl	8000658 <PIN_HIGH>
 8000c9c:	2390      	movs	r3, #144	; 0x90
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fcd8 	bl	8000658 <PIN_HIGH>
    WriteData(dat);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	210d      	movs	r1, #13
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	240c      	movs	r4, #12
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	1d3a      	adds	r2, r7, #4
 8000cbc:	8812      	ldrh	r2, [r2, #0]
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	2390      	movs	r3, #144	; 0x90
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	22e0      	movs	r2, #224	; 0xe0
 8000cc6:	04d2      	lsls	r2, r2, #19
 8000cc8:	619a      	str	r2, [r3, #24]
 8000cca:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <writecmddata+0x338>)
 8000ccc:	2287      	movs	r2, #135	; 0x87
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	619a      	str	r2, [r3, #24]
 8000cd2:	4b59      	ldr	r3, [pc, #356]	; (8000e38 <writecmddata+0x33c>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0412      	lsls	r2, r2, #16
 8000cd8:	619a      	str	r2, [r3, #24]
 8000cda:	0008      	movs	r0, r1
 8000cdc:	183b      	adds	r3, r7, r0
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	025a      	lsls	r2, r3, #9
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	183b      	adds	r3, r7, r0
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0219      	lsls	r1, r3, #8
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	183b      	adds	r3, r7, r0
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	0059      	lsls	r1, r3, #1
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	400b      	ands	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	2390      	movs	r3, #144	; 0x90
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	183b      	adds	r3, r7, r0
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2208      	movs	r2, #8
 8000d10:	401a      	ands	r2, r3
 8000d12:	183b      	adds	r3, r7, r0
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2120      	movs	r1, #32
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	105b      	asrs	r3, r3, #1
 8000d24:	2110      	movs	r1, #16
 8000d26:	400b      	ands	r3, r1
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	183b      	adds	r3, r7, r0
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0119      	lsls	r1, r3, #4
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	400b      	ands	r3, r1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <writecmddata+0x338>)
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	0019      	movs	r1, r3
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <writecmddata+0x33c>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	400a      	ands	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	2390      	movs	r3, #144	; 0x90
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2102      	movs	r1, #2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fc6e 	bl	8000634 <PIN_LOW>
 8000d58:	2390      	movs	r3, #144	; 0x90
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fc7a 	bl	8000658 <PIN_HIGH>
 8000d64:	2390      	movs	r3, #144	; 0x90
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2102      	movs	r1, #2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fc74 	bl	8000658 <PIN_HIGH>
 8000d70:	2390      	movs	r3, #144	; 0x90
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	22e0      	movs	r2, #224	; 0xe0
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <writecmddata+0x338>)
 8000d7c:	2287      	movs	r2, #135	; 0x87
 8000d7e:	04d2      	lsls	r2, r2, #19
 8000d80:	619a      	str	r2, [r3, #24]
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <writecmddata+0x33c>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0412      	lsls	r2, r2, #16
 8000d88:	619a      	str	r2, [r3, #24]
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	025a      	lsls	r2, r3, #9
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	401a      	ands	r2, r3
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0219      	lsls	r1, r3, #8
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	400b      	ands	r3, r1
 8000da2:	431a      	orrs	r2, r3
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0059      	lsls	r1, r3, #1
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	400b      	ands	r3, r1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	2390      	movs	r3, #144	; 0x90
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	619a      	str	r2, [r3, #24]
 8000db8:	0020      	movs	r0, r4
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	183b      	adds	r3, r7, r0
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	400b      	ands	r3, r1
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	183b      	adds	r3, r7, r0
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0119      	lsls	r1, r3, #4
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	400b      	ands	r3, r1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <writecmddata+0x338>)
 8000dea:	619a      	str	r2, [r3, #24]
 8000dec:	183b      	adds	r3, r7, r0
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	0019      	movs	r1, r3
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <writecmddata+0x33c>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	400a      	ands	r2, r1
 8000dfa:	619a      	str	r2, [r3, #24]
 8000dfc:	2390      	movs	r3, #144	; 0x90
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2102      	movs	r1, #2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fc16 	bl	8000634 <PIN_LOW>
 8000e08:	2390      	movs	r3, #144	; 0x90
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fc22 	bl	8000658 <PIN_HIGH>
 8000e14:	2390      	movs	r3, #144	; 0x90
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	2102      	movs	r1, #2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fc1c 	bl	8000658 <PIN_HIGH>
    CS_IDLE;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <writecmddata+0x338>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fc17 	bl	8000658 <PIN_HIGH>
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b005      	add	sp, #20
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	48000400 	.word	0x48000400
 8000e38:	48000800 	.word	0x48000800

08000e3c <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	603a      	str	r2, [r7, #0]
 8000e44:	1dbb      	adds	r3, r7, #6
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1d7b      	adds	r3, r7, #5
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
    CS_ACTIVE;
 8000e50:	4b66      	ldr	r3, [pc, #408]	; (8000fec <WriteCmdParamN+0x1b0>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff fbed 	bl	8000634 <PIN_LOW>
    WriteCmd(cmd);
 8000e5a:	2390      	movs	r3, #144	; 0x90
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	2110      	movs	r1, #16
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fbe7 	bl	8000634 <PIN_LOW>
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	210f      	movs	r1, #15
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	240e      	movs	r4, #14
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	1dba      	adds	r2, r7, #6
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	2390      	movs	r3, #144	; 0x90
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	22e0      	movs	r2, #224	; 0xe0
 8000e84:	04d2      	lsls	r2, r2, #19
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	4b58      	ldr	r3, [pc, #352]	; (8000fec <WriteCmdParamN+0x1b0>)
 8000e8a:	2287      	movs	r2, #135	; 0x87
 8000e8c:	04d2      	lsls	r2, r2, #19
 8000e8e:	619a      	str	r2, [r3, #24]
 8000e90:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <WriteCmdParamN+0x1b4>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	0008      	movs	r0, r1
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	025a      	lsls	r2, r3, #9
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	0219      	lsls	r1, r3, #8
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0059      	lsls	r1, r3, #1
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	2390      	movs	r3, #144	; 0x90
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	619a      	str	r2, [r3, #24]
 8000ec8:	183b      	adds	r3, r7, r0
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	401a      	ands	r2, r3
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	400b      	ands	r3, r1
 8000eda:	431a      	orrs	r2, r3
 8000edc:	183b      	adds	r3, r7, r0
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	105b      	asrs	r3, r3, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0119      	lsls	r1, r3, #4
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <WriteCmdParamN+0x1b0>)
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	183b      	adds	r3, r7, r0
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	019b      	lsls	r3, r3, #6
 8000f00:	0019      	movs	r1, r3
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <WriteCmdParamN+0x1b4>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	400a      	ands	r2, r1
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	2390      	movs	r3, #144	; 0x90
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	2102      	movs	r1, #2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fb8f 	bl	8000634 <PIN_LOW>
 8000f16:	2390      	movs	r3, #144	; 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fb9b 	bl	8000658 <PIN_HIGH>
 8000f22:	2390      	movs	r3, #144	; 0x90
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	2102      	movs	r1, #2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff fb95 	bl	8000658 <PIN_HIGH>
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	22e0      	movs	r2, #224	; 0xe0
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <WriteCmdParamN+0x1b0>)
 8000f3a:	2287      	movs	r2, #135	; 0x87
 8000f3c:	04d2      	lsls	r2, r2, #19
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <WriteCmdParamN+0x1b4>)
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0412      	lsls	r2, r2, #16
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	025a      	lsls	r2, r3, #9
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	401a      	ands	r2, r3
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	0219      	lsls	r1, r3, #8
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	0059      	lsls	r1, r3, #1
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	2390      	movs	r3, #144	; 0x90
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	0020      	movs	r0, r4
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	401a      	ands	r2, r3
 8000f80:	183b      	adds	r3, r7, r0
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	400b      	ands	r3, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	105b      	asrs	r3, r3, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	400b      	ands	r3, r1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	183b      	adds	r3, r7, r0
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	0119      	lsls	r1, r3, #4
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <WriteCmdParamN+0x1b0>)
 8000fa8:	619a      	str	r2, [r3, #24]
 8000faa:	183b      	adds	r3, r7, r0
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	019b      	lsls	r3, r3, #6
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <WriteCmdParamN+0x1b4>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	619a      	str	r2, [r3, #24]
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fb37 	bl	8000634 <PIN_LOW>
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	2102      	movs	r1, #2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fb43 	bl	8000658 <PIN_HIGH>
 8000fd2:	2390      	movs	r3, #144	; 0x90
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff fb3d 	bl	8000658 <PIN_HIGH>
 8000fde:	2390      	movs	r3, #144	; 0x90
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fb37 	bl	8000658 <PIN_HIGH>
    while (N-- > 0) {
 8000fea:	e142      	b.n	8001272 <WriteCmdParamN+0x436>
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
        uint8_t u8 = *block++;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	603a      	str	r2, [r7, #0]
 8000ffa:	210d      	movs	r1, #13
 8000ffc:	187a      	adds	r2, r7, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	7013      	strb	r3, [r2, #0]
        write8(u8);
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	22e0      	movs	r2, #224	; 0xe0
 8001008:	04d2      	lsls	r2, r2, #19
 800100a:	619a      	str	r2, [r3, #24]
 800100c:	4ba3      	ldr	r3, [pc, #652]	; (800129c <WriteCmdParamN+0x460>)
 800100e:	2287      	movs	r2, #135	; 0x87
 8001010:	04d2      	lsls	r2, r2, #19
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	4ba2      	ldr	r3, [pc, #648]	; (80012a0 <WriteCmdParamN+0x464>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	0412      	lsls	r2, r2, #16
 800101a:	619a      	str	r2, [r3, #24]
 800101c:	0008      	movs	r0, r1
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	025a      	lsls	r2, r3, #9
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	401a      	ands	r2, r3
 800102a:	183b      	adds	r3, r7, r0
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0219      	lsls	r1, r3, #8
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	400b      	ands	r3, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	183b      	adds	r3, r7, r0
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	0059      	lsls	r1, r3, #1
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	183b      	adds	r3, r7, r0
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2208      	movs	r2, #8
 8001052:	401a      	ands	r2, r3
 8001054:	183b      	adds	r3, r7, r0
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2120      	movs	r1, #32
 800105c:	400b      	ands	r3, r1
 800105e:	431a      	orrs	r2, r3
 8001060:	183b      	adds	r3, r7, r0
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	105b      	asrs	r3, r3, #1
 8001066:	2110      	movs	r1, #16
 8001068:	400b      	ands	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	183b      	adds	r3, r7, r0
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	0119      	lsls	r1, r3, #4
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	400b      	ands	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <WriteCmdParamN+0x460>)
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	183b      	adds	r3, r7, r0
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	019b      	lsls	r3, r3, #6
 8001084:	0019      	movs	r1, r3
 8001086:	4b86      	ldr	r3, [pc, #536]	; (80012a0 <WriteCmdParamN+0x464>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	400a      	ands	r2, r1
 800108c:	619a      	str	r2, [r3, #24]
 800108e:	2390      	movs	r3, #144	; 0x90
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	2102      	movs	r1, #2
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff facd 	bl	8000634 <PIN_LOW>
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	2102      	movs	r1, #2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fad9 	bl	8000658 <PIN_HIGH>
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	2102      	movs	r1, #2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff fad3 	bl	8000658 <PIN_HIGH>
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	1dba      	adds	r2, r7, #6
 80010b6:	8812      	ldrh	r2, [r2, #0]
 80010b8:	801a      	strh	r2, [r3, #0]
        if (N && is8347) {
 80010ba:	1d7b      	adds	r3, r7, #5
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d100      	bne.n	80010c6 <WriteCmdParamN+0x28a>
 80010c4:	e0d5      	b.n	8001272 <WriteCmdParamN+0x436>
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <WriteCmdParamN+0x468>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	1dba      	adds	r2, r7, #6
 80010cc:	1db9      	adds	r1, r7, #6
 80010ce:	8809      	ldrh	r1, [r1, #0]
 80010d0:	8011      	strh	r1, [r2, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d100      	bne.n	80010d8 <WriteCmdParamN+0x29c>
 80010d6:	e0cc      	b.n	8001272 <WriteCmdParamN+0x436>
            cmd++;
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	1dbb      	adds	r3, r7, #6
 80010de:	3201      	adds	r2, #1
 80010e0:	801a      	strh	r2, [r3, #0]
            WriteCmd(cmd);
 80010e2:	2390      	movs	r3, #144	; 0x90
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	2110      	movs	r1, #16
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff faa3 	bl	8000634 <PIN_LOW>
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	210c      	movs	r1, #12
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	240b      	movs	r4, #11
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	1dba      	adds	r2, r7, #6
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	2390      	movs	r3, #144	; 0x90
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	22e0      	movs	r2, #224	; 0xe0
 800110c:	04d2      	lsls	r2, r2, #19
 800110e:	619a      	str	r2, [r3, #24]
 8001110:	4b62      	ldr	r3, [pc, #392]	; (800129c <WriteCmdParamN+0x460>)
 8001112:	2287      	movs	r2, #135	; 0x87
 8001114:	04d2      	lsls	r2, r2, #19
 8001116:	619a      	str	r2, [r3, #24]
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <WriteCmdParamN+0x464>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0412      	lsls	r2, r2, #16
 800111e:	619a      	str	r2, [r3, #24]
 8001120:	0008      	movs	r0, r1
 8001122:	183b      	adds	r3, r7, r0
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	025a      	lsls	r2, r3, #9
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	401a      	ands	r2, r3
 800112e:	183b      	adds	r3, r7, r0
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0219      	lsls	r1, r3, #8
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	400b      	ands	r3, r1
 800113a:	431a      	orrs	r2, r3
 800113c:	183b      	adds	r3, r7, r0
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	400b      	ands	r3, r1
 8001148:	431a      	orrs	r2, r3
 800114a:	2390      	movs	r3, #144	; 0x90
 800114c:	05db      	lsls	r3, r3, #23
 800114e:	619a      	str	r2, [r3, #24]
 8001150:	183b      	adds	r3, r7, r0
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2208      	movs	r2, #8
 8001156:	401a      	ands	r2, r3
 8001158:	183b      	adds	r3, r7, r0
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2120      	movs	r1, #32
 8001160:	400b      	ands	r3, r1
 8001162:	431a      	orrs	r2, r3
 8001164:	183b      	adds	r3, r7, r0
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	105b      	asrs	r3, r3, #1
 800116a:	2110      	movs	r1, #16
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	183b      	adds	r3, r7, r0
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0119      	lsls	r1, r3, #4
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	400b      	ands	r3, r1
 800117c:	431a      	orrs	r2, r3
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <WriteCmdParamN+0x460>)
 8001180:	619a      	str	r2, [r3, #24]
 8001182:	183b      	adds	r3, r7, r0
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	019b      	lsls	r3, r3, #6
 8001188:	0019      	movs	r1, r3
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <WriteCmdParamN+0x464>)
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	400a      	ands	r2, r1
 8001190:	619a      	str	r2, [r3, #24]
 8001192:	2390      	movs	r3, #144	; 0x90
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	2102      	movs	r1, #2
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fa4b 	bl	8000634 <PIN_LOW>
 800119e:	2390      	movs	r3, #144	; 0x90
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2102      	movs	r1, #2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fa57 	bl	8000658 <PIN_HIGH>
 80011aa:	2390      	movs	r3, #144	; 0x90
 80011ac:	05db      	lsls	r3, r3, #23
 80011ae:	2102      	movs	r1, #2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fa51 	bl	8000658 <PIN_HIGH>
 80011b6:	2390      	movs	r3, #144	; 0x90
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	22e0      	movs	r2, #224	; 0xe0
 80011bc:	04d2      	lsls	r2, r2, #19
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <WriteCmdParamN+0x460>)
 80011c2:	2287      	movs	r2, #135	; 0x87
 80011c4:	04d2      	lsls	r2, r2, #19
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <WriteCmdParamN+0x464>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	0412      	lsls	r2, r2, #16
 80011ce:	619a      	str	r2, [r3, #24]
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	025a      	lsls	r2, r3, #9
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	401a      	ands	r2, r3
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	0219      	lsls	r1, r3, #8
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	400b      	ands	r3, r1
 80011e8:	431a      	orrs	r2, r3
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0059      	lsls	r1, r3, #1
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	2390      	movs	r3, #144	; 0x90
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	0020      	movs	r0, r4
 8001200:	183b      	adds	r3, r7, r0
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	401a      	ands	r2, r3
 8001208:	183b      	adds	r3, r7, r0
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2120      	movs	r1, #32
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	105b      	asrs	r3, r3, #1
 800121a:	2110      	movs	r1, #16
 800121c:	400b      	ands	r3, r1
 800121e:	431a      	orrs	r2, r3
 8001220:	183b      	adds	r3, r7, r0
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	0119      	lsls	r1, r3, #4
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	400b      	ands	r3, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <WriteCmdParamN+0x460>)
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	183b      	adds	r3, r7, r0
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	019b      	lsls	r3, r3, #6
 8001238:	0019      	movs	r1, r3
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <WriteCmdParamN+0x464>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	400a      	ands	r2, r1
 8001240:	619a      	str	r2, [r3, #24]
 8001242:	2390      	movs	r3, #144	; 0x90
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	2102      	movs	r1, #2
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff f9f3 	bl	8000634 <PIN_LOW>
 800124e:	2390      	movs	r3, #144	; 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	2102      	movs	r1, #2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff f9ff 	bl	8000658 <PIN_HIGH>
 800125a:	2390      	movs	r3, #144	; 0x90
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2102      	movs	r1, #2
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff f9f9 	bl	8000658 <PIN_HIGH>
 8001266:	2390      	movs	r3, #144	; 0x90
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	2110      	movs	r1, #16
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff f9f3 	bl	8000658 <PIN_HIGH>
    while (N-- > 0) {
 8001272:	1d7b      	adds	r3, r7, #5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	3a01      	subs	r2, #1
 800127c:	b2d1      	uxtb	r1, r2
 800127e:	1d7a      	adds	r2, r7, #5
 8001280:	7011      	strb	r1, [r2, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	dd00      	ble.n	8001288 <WriteCmdParamN+0x44c>
 8001286:	e6b5      	b.n	8000ff4 <WriteCmdParamN+0x1b8>
        }
    }
    CS_IDLE;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <WriteCmdParamN+0x460>)
 800128a:	2101      	movs	r1, #1
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff f9e3 	bl	8000658 <PIN_HIGH>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b005      	add	sp, #20
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	2000002f 	.word	0x2000002f

080012a8 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0005      	movs	r5, r0
 80012b0:	000c      	movs	r4, r1
 80012b2:	0010      	movs	r0, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	1c2a      	adds	r2, r5, #0
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	1c22      	adds	r2, r4, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	1d7b      	adds	r3, r7, #5
 80012c4:	1c02      	adds	r2, r0, #0
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	1c0a      	adds	r2, r1, #0
 80012cc:	701a      	strb	r2, [r3, #0]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 80012ce:	210c      	movs	r1, #12
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	1dba      	adds	r2, r7, #6
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	1d7a      	adds	r2, r7, #5
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	705a      	strb	r2, [r3, #1]
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	709a      	strb	r2, [r3, #2]
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2220      	movs	r2, #32
 80012ec:	18ba      	adds	r2, r7, r2
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	70da      	strb	r2, [r3, #3]
    WriteCmdParamN(cmd, 4, d);
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	187a      	adds	r2, r7, r1
 80012fa:	2104      	movs	r1, #4
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fd9d 	bl	8000e3c <WriteCmdParamN>
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bdb0      	pop	{r4, r5, r7, pc}

0800130a <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 800130a:	b590      	push	{r4, r7, lr}
 800130c:	b08b      	sub	sp, #44	; 0x2c
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	000a      	movs	r2, r1
 8001314:	1cbb      	adds	r3, r7, #2
 8001316:	801a      	strh	r2, [r3, #0]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 800131c:	e050      	b.n	80013c0 <init_table+0xb6>
    {
        uint8_t cmd = pgm_read_byte(p++);
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	627a      	str	r2, [r7, #36]	; 0x24
 8001324:	2121      	movs	r1, #33	; 0x21
 8001326:	187a      	adds	r2, r7, r1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	7013      	strb	r3, [r2, #0]
        uint8_t len = pgm_read_byte(p++);
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	627a      	str	r2, [r7, #36]	; 0x24
 8001332:	2223      	movs	r2, #35	; 0x23
 8001334:	18ba      	adds	r2, r7, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	7013      	strb	r3, [r2, #0]
        if (cmd == TFTLCD_DELAY8)
 800133a:	187b      	adds	r3, r7, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b7f      	cmp	r3, #127	; 0x7f
 8001340:	d109      	bne.n	8001356 <init_table+0x4c>
        {
            delay(len);
 8001342:	2423      	movs	r4, #35	; 0x23
 8001344:	193b      	adds	r3, r7, r4
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff f95d 	bl	8000608 <delay>
            len = 0;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e028      	b.n	80013a8 <init_table+0x9e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001356:	2322      	movs	r3, #34	; 0x22
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e00e      	b.n	800137e <init_table+0x74>
                dat[i] = pgm_read_byte(p++);
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	627a      	str	r2, [r7, #36]	; 0x24
 8001366:	2022      	movs	r0, #34	; 0x22
 8001368:	183a      	adds	r2, r7, r0
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	2308      	movs	r3, #8
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	5499      	strb	r1, [r3, r2]
            for (uint8_t i = 0; i < len; i++)
 8001374:	183b      	adds	r3, r7, r0
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	183b      	adds	r3, r7, r0
 800137a:	3201      	adds	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	2322      	movs	r3, #34	; 0x22
 8001380:	18fa      	adds	r2, r7, r3
 8001382:	2323      	movs	r3, #35	; 0x23
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3e8      	bcc.n	8001360 <init_table+0x56>
            WriteCmdParamN(cmd, len, dat);
 800138e:	2321      	movs	r3, #33	; 0x21
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b298      	uxth	r0, r3
 8001396:	2323      	movs	r3, #35	; 0x23
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	2208      	movs	r2, #8
 80013a0:	18ba      	adds	r2, r7, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	f7ff fd4a 	bl	8000e3c <WriteCmdParamN>
        }
        size -= len + 2;
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	2323      	movs	r3, #35	; 0x23
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3b02      	subs	r3, #2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	1cbb      	adds	r3, r7, #2
 80013be:	801a      	strh	r2, [r3, #0]
    while (size > 0)
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	2200      	movs	r2, #0
 80013c4:	5e9b      	ldrsh	r3, [r3, r2]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dca9      	bgt.n	800131e <init_table+0x14>
    }
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b00b      	add	sp, #44	; 0x2c
 80013d0:	bd90      	pop	{r4, r7, pc}
	...

080013d4 <reset>:

void reset(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    done_reset = 1;
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <reset+0xa8>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80013de:	f7ff fa1f 	bl	8000820 <setWriteDir>
    CTL_INIT();
 80013e2:	2390      	movs	r3, #144	; 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	2101      	movs	r1, #1
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff f963 	bl	80006b4 <PIN_OUTPUT>
 80013ee:	2390      	movs	r3, #144	; 0x90
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2102      	movs	r1, #2
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff f95d 	bl	80006b4 <PIN_OUTPUT>
 80013fa:	2390      	movs	r3, #144	; 0x90
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	2110      	movs	r1, #16
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff f957 	bl	80006b4 <PIN_OUTPUT>
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <reset+0xac>)
 8001408:	2101      	movs	r1, #1
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff f952 	bl	80006b4 <PIN_OUTPUT>
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <reset+0xb0>)
 8001412:	2102      	movs	r1, #2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff f94d 	bl	80006b4 <PIN_OUTPUT>
    CS_IDLE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <reset+0xac>)
 800141c:	2101      	movs	r1, #1
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff f91a 	bl	8000658 <PIN_HIGH>
    RD_IDLE;
 8001424:	2390      	movs	r3, #144	; 0x90
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	2101      	movs	r1, #1
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff f914 	bl	8000658 <PIN_HIGH>
    WR_IDLE;
 8001430:	2390      	movs	r3, #144	; 0x90
 8001432:	05db      	lsls	r3, r3, #23
 8001434:	2102      	movs	r1, #2
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff f90e 	bl	8000658 <PIN_HIGH>
    RESET_IDLE;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <reset+0xb0>)
 800143e:	2102      	movs	r1, #2
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff f909 	bl	8000658 <PIN_HIGH>
    delay(50);
 8001446:	2032      	movs	r0, #50	; 0x32
 8001448:	f7ff f8de 	bl	8000608 <delay>
    RESET_ACTIVE;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <reset+0xb0>)
 800144e:	2102      	movs	r1, #2
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff f8ef 	bl	8000634 <PIN_LOW>
    delay(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f7ff f8d6 	bl	8000608 <delay>
    RESET_IDLE;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <reset+0xb0>)
 800145e:	2102      	movs	r1, #2
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff f8f9 	bl	8000658 <PIN_HIGH>
    delay(100);
 8001466:	2064      	movs	r0, #100	; 0x64
 8001468:	f7ff f8ce 	bl	8000608 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 800146c:	2100      	movs	r1, #0
 800146e:	20b0      	movs	r0, #176	; 0xb0
 8001470:	f7ff f984 	bl	800077c <WriteCmdData>
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000002e 	.word	0x2000002e
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800

08001488 <read16bits>:

static uint16_t read16bits(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 800148e:	2390      	movs	r3, #144	; 0x90
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	2101      	movs	r1, #1
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff f8df 	bl	8000658 <PIN_HIGH>
 800149a:	2390      	movs	r3, #144	; 0x90
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	2101      	movs	r1, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff f8c7 	bl	8000634 <PIN_LOW>
 80014a6:	2390      	movs	r3, #144	; 0x90
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	2101      	movs	r1, #1
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff f8c1 	bl	8000634 <PIN_LOW>
 80014b2:	2390      	movs	r3, #144	; 0x90
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2101      	movs	r1, #1
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff f8bb 	bl	8000634 <PIN_LOW>
 80014be:	2390      	movs	r3, #144	; 0x90
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	0a5b      	lsrs	r3, r3, #9
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <read16bits+0x1dc>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	099b      	lsrs	r3, r3, #6
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2102      	movs	r1, #2
 80014d8:	400b      	ands	r3, r1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b29a      	uxth	r2, r3
 80014e0:	2390      	movs	r3, #144	; 0x90
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2104      	movs	r1, #4
 80014ec:	400b      	ands	r3, r1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <read16bits+0x1e0>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2108      	movs	r1, #8
 80014fc:	400b      	ands	r3, r1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b58      	ldr	r3, [pc, #352]	; (8001668 <read16bits+0x1e0>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	2110      	movs	r1, #16
 800150e:	400b      	ands	r3, r1
 8001510:	b29b      	uxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <read16bits+0x1e0>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	b29b      	uxth	r3, r3
 800151c:	18db      	adds	r3, r3, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	2120      	movs	r1, #32
 8001522:	400b      	ands	r3, r1
 8001524:	b29b      	uxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <read16bits+0x1e0>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	b29b      	uxth	r3, r3
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	400b      	ands	r3, r1
 8001536:	b29b      	uxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b299      	uxth	r1, r3
 800153c:	2390      	movs	r3, #144	; 0x90
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	4013      	ands	r3, r2
 800154a:	b29a      	uxth	r2, r3
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	430a      	orrs	r2, r1
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	2390      	movs	r3, #144	; 0x90
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	2101      	movs	r1, #1
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff f87d 	bl	8000658 <PIN_HIGH>
 800155e:	2390      	movs	r3, #144	; 0x90
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	2101      	movs	r1, #1
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff f877 	bl	8000658 <PIN_HIGH>
    READ_8(lo);
 800156a:	2390      	movs	r3, #144	; 0x90
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	2101      	movs	r1, #1
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff f871 	bl	8000658 <PIN_HIGH>
 8001576:	2390      	movs	r3, #144	; 0x90
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	2101      	movs	r1, #1
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff f859 	bl	8000634 <PIN_LOW>
 8001582:	2390      	movs	r3, #144	; 0x90
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	2101      	movs	r1, #1
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff f853 	bl	8000634 <PIN_LOW>
 800158e:	2390      	movs	r3, #144	; 0x90
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	2101      	movs	r1, #1
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff f84d 	bl	8000634 <PIN_LOW>
 800159a:	2390      	movs	r3, #144	; 0x90
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	0a5b      	lsrs	r3, r3, #9
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2201      	movs	r2, #1
 80015a6:	4013      	ands	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <read16bits+0x1dc>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	099b      	lsrs	r3, r3, #6
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2102      	movs	r1, #2
 80015b4:	400b      	ands	r3, r1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	2390      	movs	r3, #144	; 0x90
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2104      	movs	r1, #4
 80015c8:	400b      	ands	r3, r1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <read16bits+0x1e0>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2108      	movs	r1, #8
 80015d8:	400b      	ands	r3, r1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <read16bits+0x1e0>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2110      	movs	r1, #16
 80015ea:	400b      	ands	r3, r1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <read16bits+0x1e0>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	18db      	adds	r3, r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2120      	movs	r1, #32
 80015fe:	400b      	ands	r3, r1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <read16bits+0x1e0>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	400b      	ands	r3, r1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b2d9      	uxtb	r1, r3
 8001618:	2390      	movs	r3, #144	; 0x90
 800161a:	05db      	lsls	r3, r3, #23
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	227f      	movs	r2, #127	; 0x7f
 8001624:	4393      	bics	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	1d7b      	adds	r3, r7, #5
 800162a:	430a      	orrs	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	2390      	movs	r3, #144	; 0x90
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	2101      	movs	r1, #1
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff f80f 	bl	8000658 <PIN_HIGH>
 800163a:	2390      	movs	r3, #144	; 0x90
 800163c:	05db      	lsls	r3, r3, #23
 800163e:	2101      	movs	r1, #1
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff f809 	bl	8000658 <PIN_HIGH>
    return (ret << 8) | lo;
 8001646:	1dbb      	adds	r3, r7, #6
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	1d7b      	adds	r3, r7, #5
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29b      	uxth	r3, r3
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	48000800 	.word	0x48000800
 8001668:	48000400 	.word	0x48000400

0800166c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	0002      	movs	r2, r0
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	1d7b      	adds	r3, r7, #5
 800167a:	1c0a      	adds	r2, r1, #0
 800167c:	701a      	strb	r2, [r3, #0]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 800167e:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <readReg+0x20c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <readReg+0x1e>
        reset();
 8001686:	f7ff fea5 	bl	80013d4 <reset>
    CS_ACTIVE;
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <readReg+0x210>)
 800168c:	2101      	movs	r1, #1
 800168e:	0018      	movs	r0, r3
 8001690:	f7fe ffd0 	bl	8000634 <PIN_LOW>
    WriteCmd(reg);
 8001694:	2390      	movs	r3, #144	; 0x90
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	2110      	movs	r1, #16
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe ffca 	bl	8000634 <PIN_LOW>
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	210f      	movs	r1, #15
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	240e      	movs	r4, #14
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	1dba      	adds	r2, r7, #6
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	2390      	movs	r3, #144	; 0x90
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	22e0      	movs	r2, #224	; 0xe0
 80016be:	04d2      	lsls	r2, r2, #19
 80016c0:	619a      	str	r2, [r3, #24]
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <readReg+0x210>)
 80016c4:	2287      	movs	r2, #135	; 0x87
 80016c6:	04d2      	lsls	r2, r2, #19
 80016c8:	619a      	str	r2, [r3, #24]
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <readReg+0x214>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0412      	lsls	r2, r2, #16
 80016d0:	619a      	str	r2, [r3, #24]
 80016d2:	0008      	movs	r0, r1
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	025a      	lsls	r2, r3, #9
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	401a      	ands	r2, r3
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	0219      	lsls	r1, r3, #8
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	400b      	ands	r3, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	0059      	lsls	r1, r3, #1
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	400b      	ands	r3, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	2390      	movs	r3, #144	; 0x90
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	619a      	str	r2, [r3, #24]
 8001702:	183b      	adds	r3, r7, r0
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2208      	movs	r2, #8
 8001708:	401a      	ands	r2, r3
 800170a:	183b      	adds	r3, r7, r0
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2120      	movs	r1, #32
 8001712:	400b      	ands	r3, r1
 8001714:	431a      	orrs	r2, r3
 8001716:	183b      	adds	r3, r7, r0
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	2110      	movs	r1, #16
 800171e:	400b      	ands	r3, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	183b      	adds	r3, r7, r0
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0119      	lsls	r1, r3, #4
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	400b      	ands	r3, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	4b52      	ldr	r3, [pc, #328]	; (800187c <readReg+0x210>)
 8001732:	619a      	str	r2, [r3, #24]
 8001734:	183b      	adds	r3, r7, r0
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	0019      	movs	r1, r3
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <readReg+0x214>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	400a      	ands	r2, r1
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	2390      	movs	r3, #144	; 0x90
 8001746:	05db      	lsls	r3, r3, #23
 8001748:	2102      	movs	r1, #2
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe ff72 	bl	8000634 <PIN_LOW>
 8001750:	2390      	movs	r3, #144	; 0x90
 8001752:	05db      	lsls	r3, r3, #23
 8001754:	2102      	movs	r1, #2
 8001756:	0018      	movs	r0, r3
 8001758:	f7fe ff7e 	bl	8000658 <PIN_HIGH>
 800175c:	2390      	movs	r3, #144	; 0x90
 800175e:	05db      	lsls	r3, r3, #23
 8001760:	2102      	movs	r1, #2
 8001762:	0018      	movs	r0, r3
 8001764:	f7fe ff78 	bl	8000658 <PIN_HIGH>
 8001768:	2390      	movs	r3, #144	; 0x90
 800176a:	05db      	lsls	r3, r3, #23
 800176c:	22e0      	movs	r2, #224	; 0xe0
 800176e:	04d2      	lsls	r2, r2, #19
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <readReg+0x210>)
 8001774:	2287      	movs	r2, #135	; 0x87
 8001776:	04d2      	lsls	r2, r2, #19
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <readReg+0x214>)
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0412      	lsls	r2, r2, #16
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	193b      	adds	r3, r7, r4
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	025a      	lsls	r2, r3, #9
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	401a      	ands	r2, r3
 800178e:	193b      	adds	r3, r7, r4
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	0219      	lsls	r1, r3, #8
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	400b      	ands	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	193b      	adds	r3, r7, r4
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	0059      	lsls	r1, r3, #1
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	400b      	ands	r3, r1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	2390      	movs	r3, #144	; 0x90
 80017ac:	05db      	lsls	r3, r3, #23
 80017ae:	619a      	str	r2, [r3, #24]
 80017b0:	0020      	movs	r0, r4
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2208      	movs	r2, #8
 80017b8:	401a      	ands	r2, r3
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	400b      	ands	r3, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	105b      	asrs	r3, r3, #1
 80017cc:	2110      	movs	r1, #16
 80017ce:	400b      	ands	r3, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	0119      	lsls	r1, r3, #4
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	400b      	ands	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <readReg+0x210>)
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	0019      	movs	r1, r3
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <readReg+0x214>)
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	400a      	ands	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	2390      	movs	r3, #144	; 0x90
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	2102      	movs	r1, #2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7fe ff1a 	bl	8000634 <PIN_LOW>
 8001800:	2390      	movs	r3, #144	; 0x90
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	2102      	movs	r1, #2
 8001806:	0018      	movs	r0, r3
 8001808:	f7fe ff26 	bl	8000658 <PIN_HIGH>
 800180c:	2390      	movs	r3, #144	; 0x90
 800180e:	05db      	lsls	r3, r3, #23
 8001810:	2102      	movs	r1, #2
 8001812:	0018      	movs	r0, r3
 8001814:	f7fe ff20 	bl	8000658 <PIN_HIGH>
 8001818:	2390      	movs	r3, #144	; 0x90
 800181a:	05db      	lsls	r3, r3, #23
 800181c:	2110      	movs	r1, #16
 800181e:	0018      	movs	r0, r3
 8001820:	f7fe ff1a 	bl	8000658 <PIN_HIGH>
    setReadDir();
 8001824:	f7fe ffc0 	bl	80007a8 <setReadDir>
    delay(1);    //1us should be adequate
 8001828:	2001      	movs	r0, #1
 800182a:	f7fe feed 	bl	8000608 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 800182e:	230c      	movs	r3, #12
 8001830:	18fc      	adds	r4, r7, r3
 8001832:	f7ff fe29 	bl	8001488 <read16bits>
 8001836:	0003      	movs	r3, r0
 8001838:	8023      	strh	r3, [r4, #0]
 800183a:	1d7b      	adds	r3, r7, #5
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	1d7b      	adds	r3, r7, #5
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	1d7b      	adds	r3, r7, #5
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b7f      	cmp	r3, #127	; 0x7f
 800184c:	d9ef      	bls.n	800182e <readReg+0x1c2>
    RD_IDLE;
 800184e:	2390      	movs	r3, #144	; 0x90
 8001850:	05db      	lsls	r3, r3, #23
 8001852:	2101      	movs	r1, #1
 8001854:	0018      	movs	r0, r3
 8001856:	f7fe feff 	bl	8000658 <PIN_HIGH>
    CS_IDLE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <readReg+0x210>)
 800185c:	2101      	movs	r1, #1
 800185e:	0018      	movs	r0, r3
 8001860:	f7fe fefa 	bl	8000658 <PIN_HIGH>
    setWriteDir();
 8001864:	f7fe ffdc 	bl	8000820 <setWriteDir>
    return ret;
 8001868:	230c      	movs	r3, #12
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	881b      	ldrh	r3, [r3, #0]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b005      	add	sp, #20
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	2000002e 	.word	0x2000002e
 800187c:	48000400 	.word	0x48000400
 8001880:	48000800 	.word	0x48000800

08001884 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	0002      	movs	r2, r0
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	801a      	strh	r2, [r3, #0]
    uint16_t h = readReg(reg, 0);
 8001890:	250e      	movs	r5, #14
 8001892:	197c      	adds	r4, r7, r5
 8001894:	1dbb      	adds	r3, r7, #6
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fee6 	bl	800166c <readReg>
 80018a0:	0003      	movs	r3, r0
 80018a2:	8023      	strh	r3, [r4, #0]
    uint16_t l = readReg(reg, 1);
 80018a4:	260c      	movs	r6, #12
 80018a6:	19bc      	adds	r4, r7, r6
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff fedc 	bl	800166c <readReg>
 80018b4:	0003      	movs	r3, r0
 80018b6:	8023      	strh	r3, [r4, #0]
    return ((uint32_t) h << 16) | (l);
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	19bb      	adds	r3, r7, r6
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	4313      	orrs	r3, r2
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b005      	add	sp, #20
 80018ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018cc <tft_init>:
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
}


void tft_init(uint16_t ID)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	0002      	movs	r2, r0
 80018d4:	1dbb      	adds	r3, r7, #6
 80018d6:	801a      	strh	r2, [r3, #0]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
    int16_t table_size;
    _lcd_xor = 0;
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <tft_init+0xbc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <tft_init+0xc0>)
 80018e4:	1dba      	adds	r2, r7, #6
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <tft_init+0xc0>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	001a      	movs	r2, r3
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <tft_init+0xc4>)
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d115      	bne.n	8001922 <tft_init+0x56>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <tft_init+0xc8>)
 80018f8:	4a27      	ldr	r2, [pc, #156]	; (8001998 <tft_init+0xcc>)
 80018fa:	801a      	strh	r2, [r3, #0]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B]
            // 3.2 TM  3.2 Inch Initial Code not bad
			0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00,
			0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <tft_init+0xd0>)
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	2312      	movs	r3, #18
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	223b      	movs	r2, #59	; 0x3b
 8001906:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) &_height;
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <tft_init+0xd4>)
 800190a:	60fb      	str	r3, [r7, #12]
        *p16 = 320;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22a0      	movs	r2, #160	; 0xa0
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) &_width;
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <tft_init+0xd8>)
 8001916:	60fb      	str	r3, [r7, #12]
        *p16 = 480;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	22f0      	movs	r2, #240	; 0xf0
 800191c:	0052      	lsls	r2, r2, #1
 800191e:	801a      	strh	r2, [r3, #0]
        break;
 8001920:	e005      	b.n	800192e <tft_init+0x62>
    default:
        p16 = (int16_t *) &width;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <tft_init+0xdc>)
 8001924:	60fb      	str	r3, [r7, #12]
        *p16 = 0;       //error value for width
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	801a      	strh	r2, [r3, #0]
        break;
 800192c:	46c0      	nop			; (mov r8, r8)
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <tft_init+0xc8>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	001a      	movs	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	4013      	ands	r3, r2
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	4193      	sbcs	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <tft_init+0xe0>)
 8001944:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d012      	beq.n	8001972 <tft_init+0xa6>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <tft_init+0xe4>)
 800194e:	2109      	movs	r1, #9
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fcda 	bl	800130a <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001956:	2312      	movs	r3, #18
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2200      	movs	r2, #0
 800195c:	5e9a      	ldrsh	r2, [r3, r2]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	0011      	movs	r1, r2
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff fcd1 	bl	800130a <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <tft_init+0xe8>)
 800196a:	2106      	movs	r1, #6
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fccc 	bl	800130a <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f830 	bl	80019d8 <setRotation>
    invertDisplay(false);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 fed3 	bl	8002724 <invertDisplay>
}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000090 	.word	0x20000090
 800198c:	2000008e 	.word	0x2000008e
 8001990:	00009486 	.word	0x00009486
 8001994:	20000080 	.word	0x20000080
 8001998:	00000403 	.word	0x00000403
 800199c:	080050ec 	.word	0x080050ec
 80019a0:	20000006 	.word	0x20000006
 80019a4:	20000004 	.word	0x20000004
 80019a8:	080006f5 	.word	0x080006f5
 80019ac:	20000084 	.word	0x20000084
 80019b0:	08005128 	.word	0x08005128
 80019b4:	08005134 	.word	0x08005134

080019b8 <readID>:

uint16_t readID(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
    uint16_t ret = readReg32(0xD3);
 80019be:	20d3      	movs	r0, #211	; 0xd3
 80019c0:	f7ff ff60 	bl	8001884 <readReg32>
 80019c4:	0002      	movs	r2, r0
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	801a      	strh	r2, [r3, #0]
    return ret;
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	881b      	ldrh	r3, [r3, #0]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <setRotation>:
        setAddrWindow(0, 0, width() - 1, height() - 1);
    return 0;
}

void setRotation(uint8_t r)
{
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	0002      	movs	r2, r0
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	701a      	strb	r2, [r3, #0]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80019e4:	2312      	movs	r3, #18
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	4aca      	ldr	r2, [pc, #808]	; (8001d14 <setRotation+0x33c>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	801a      	strh	r2, [r3, #0]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2203      	movs	r2, #3
 80019f4:	4013      	ands	r3, r2
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4bc7      	ldr	r3, [pc, #796]	; (8001d18 <setRotation+0x340>)
 80019fa:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80019fc:	4bc6      	ldr	r3, [pc, #792]	; (8001d18 <setRotation+0x340>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	001a      	movs	r2, r3
 8001a02:	2301      	movs	r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d002      	beq.n	8001a0e <setRotation+0x36>
 8001a08:	23f0      	movs	r3, #240	; 0xf0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	e001      	b.n	8001a12 <setRotation+0x3a>
 8001a0e:	23a0      	movs	r3, #160	; 0xa0
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4ac2      	ldr	r2, [pc, #776]	; (8001d1c <setRotation+0x344>)
 8001a14:	8013      	strh	r3, [r2, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8001a16:	4bc0      	ldr	r3, [pc, #768]	; (8001d18 <setRotation+0x340>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d002      	beq.n	8001a28 <setRotation+0x50>
 8001a22:	23a0      	movs	r3, #160	; 0xa0
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	e001      	b.n	8001a2c <setRotation+0x54>
 8001a28:	23f0      	movs	r3, #240	; 0xf0
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4abc      	ldr	r2, [pc, #752]	; (8001d20 <setRotation+0x348>)
 8001a2e:	8013      	strh	r3, [r2, #0]
   switch (rotation) {
 8001a30:	4bb9      	ldr	r3, [pc, #740]	; (8001d18 <setRotation+0x340>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00d      	beq.n	8001a54 <setRotation+0x7c>
 8001a38:	dc02      	bgt.n	8001a40 <setRotation+0x68>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <setRotation+0x72>
 8001a3e:	e018      	b.n	8001a72 <setRotation+0x9a>
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d00c      	beq.n	8001a5e <setRotation+0x86>
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d00f      	beq.n	8001a68 <setRotation+0x90>
 8001a48:	e013      	b.n	8001a72 <setRotation+0x9a>
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001a4a:	230b      	movs	r3, #11
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2248      	movs	r2, #72	; 0x48
 8001a50:	701a      	strb	r2, [r3, #0]
       break;
 8001a52:	e00e      	b.n	8001a72 <setRotation+0x9a>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8001a54:	230b      	movs	r3, #11
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2228      	movs	r2, #40	; 0x28
 8001a5a:	701a      	strb	r2, [r3, #0]
       break;
 8001a5c:	e009      	b.n	8001a72 <setRotation+0x9a>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001a5e:	230b      	movs	r3, #11
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2298      	movs	r2, #152	; 0x98
 8001a64:	701a      	strb	r2, [r3, #0]
       break;
 8001a66:	e004      	b.n	8001a72 <setRotation+0x9a>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001a68:	230b      	movs	r3, #11
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	22f8      	movs	r2, #248	; 0xf8
 8001a6e:	701a      	strb	r2, [r3, #0]
       break;
 8001a70:	46c0      	nop			; (mov r8, r8)
   }
   if (_lcd_capable & INVERT_GS)
 8001a72:	4bac      	ldr	r3, [pc, #688]	; (8001d24 <setRotation+0x34c>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	001a      	movs	r2, r3
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d008      	beq.n	8001a92 <setRotation+0xba>
       val ^= 0x80;
 8001a80:	210b      	movs	r1, #11
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	4252      	negs	r2, r2
 8001a8a:	4053      	eors	r3, r2
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_SS)
 8001a92:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <setRotation+0x34c>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	001a      	movs	r2, r3
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <setRotation+0xd8>
       val ^= 0x40;
 8001aa0:	210b      	movs	r1, #11
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	4053      	eors	r3, r2
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & INVERT_RGB)
 8001ab0:	4b9c      	ldr	r3, [pc, #624]	; (8001d24 <setRotation+0x34c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d007      	beq.n	8001ace <setRotation+0xf6>
       val ^= 0x08;
 8001abe:	210b      	movs	r1, #11
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4053      	eors	r3, r2
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	701a      	strb	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8001ace:	4b95      	ldr	r3, [pc, #596]	; (8001d24 <setRotation+0x34c>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d100      	bne.n	8001adc <setRotation+0x104>
 8001ada:	e14e      	b.n	8001d7a <setRotation+0x3a2>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <setRotation+0x350>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <setRotation+0x354>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d136      	bne.n	8001b54 <setRotation+0x17c>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	105b      	asrs	r3, r3, #1
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2410      	movs	r4, #16
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2140      	movs	r1, #64	; 0x40
 8001afa:	400a      	ands	r2, r1
 8001afc:	801a      	strh	r2, [r3, #0]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	105b      	asrs	r3, r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	250e      	movs	r5, #14
 8001b08:	197b      	adds	r3, r7, r5
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	801a      	strh	r2, [r3, #0]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2228      	movs	r2, #40	; 0x28
 8001b16:	4013      	ands	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	183b      	adds	r3, r7, r0
 8001b1c:	701a      	strb	r2, [r3, #0]
           d[0] = 0;
 8001b1e:	2108      	movs	r1, #8
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	197b      	adds	r3, r7, r5
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2202      	movs	r2, #2
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	705a      	strb	r2, [r3, #1]
           d[2] = 0x3B;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	223b      	movs	r2, #59	; 0x3b
 8001b44:	709a      	strb	r2, [r3, #2]
           WriteCmdParamN(0xB6, 3, d);
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	20b6      	movs	r0, #182	; 0xb6
 8001b4e:	f7ff f975 	bl	8000e3c <WriteCmdParamN>
           goto common_MC;
 8001b52:	e0c2      	b.n	8001cda <setRotation+0x302>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8001b54:	4b74      	ldr	r3, [pc, #464]	; (8001d28 <setRotation+0x350>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	4a75      	ldr	r2, [pc, #468]	; (8001d30 <setRotation+0x358>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <setRotation+0x19a>
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <setRotation+0x350>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	4a74      	ldr	r2, [pc, #464]	; (8001d34 <setRotation+0x35c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <setRotation+0x19a>
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <setRotation+0x350>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	4a72      	ldr	r2, [pc, #456]	; (8001d38 <setRotation+0x360>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d14d      	bne.n	8001c0e <setRotation+0x236>
           if (val & 0x80)
 8001b72:	230b      	movs	r3, #11
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da07      	bge.n	8001b8e <setRotation+0x1b6>
               val |= 0x01;    //GS
 8001b7e:	210b      	movs	r1, #11
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
           if ((val & 0x40))
 8001b8e:	230b      	movs	r3, #11
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	001a      	movs	r2, r3
 8001b96:	2340      	movs	r3, #64	; 0x40
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d007      	beq.n	8001bac <setRotation+0x1d4>
               val |= 0x02;    //SS
 8001b9c:	210b      	movs	r1, #11
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8001bac:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <setRotation+0x350>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	4a5f      	ldr	r2, [pc, #380]	; (8001d30 <setRotation+0x358>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d107      	bne.n	8001bc6 <setRotation+0x1ee>
 8001bb6:	210b      	movs	r1, #11
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <setRotation+0x350>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <setRotation+0x35c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d107      	bne.n	8001be0 <setRotation+0x208>
 8001bd0:	210b      	movs	r1, #11
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	222f      	movs	r2, #47	; 0x2f
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	701a      	strb	r2, [r3, #0]
           if (_lcd_ID == 0x1511) {
 8001be0:	4b51      	ldr	r3, [pc, #324]	; (8001d28 <setRotation+0x350>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	4a54      	ldr	r2, [pc, #336]	; (8001d38 <setRotation+0x360>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d000      	beq.n	8001bec <setRotation+0x214>
 8001bea:	e073      	b.n	8001cd4 <setRotation+0x2fc>
               val &= ~0x10;   //remove ML
 8001bec:	210b      	movs	r1, #11
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
               val |= 0xC0;    //force penguin 180 rotation
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	4252      	negs	r2, r2
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8001c0c:	e062      	b.n	8001cd4 <setRotation+0x2fc>
      }
       else if (is8347) {
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <setRotation+0x364>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d060      	beq.n	8001cd8 <setRotation+0x300>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <setRotation+0x368>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <setRotation+0x36c>)
 8001c1e:	2206      	movs	r2, #6
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <setRotation+0x370>)
 8001c24:	2222      	movs	r2, #34	; 0x22
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <setRotation+0x374>)
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <setRotation+0x378>)
 8001c30:	2204      	movs	r2, #4
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <setRotation+0x37c>)
 8001c36:	2206      	movs	r2, #6
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <setRotation+0x380>)
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <setRotation+0x350>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b65      	cmp	r3, #101	; 0x65
 8001c46:	d128      	bne.n	8001c9a <setRotation+0x2c2>
               val |= 0x01;    //GS=1
 8001c48:	210b      	movs	r1, #11
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	701a      	strb	r2, [r3, #0]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2310      	movs	r3, #16
 8001c60:	4013      	ands	r3, r2
 8001c62:	d008      	beq.n	8001c76 <setRotation+0x29e>
 8001c64:	210b      	movs	r1, #11
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	222d      	movs	r2, #45	; 0x2d
 8001c6c:	4252      	negs	r2, r2
 8001c6e:	4053      	eors	r3, r2
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	701a      	strb	r2, [r3, #0]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d006      	beq.n	8001c8e <setRotation+0x2b6>
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <setRotation+0x368>)
 8001c82:	2282      	movs	r2, #130	; 0x82
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <setRotation+0x36c>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	e005      	b.n	8001c9a <setRotation+0x2c2>
               else _MC = 0x80, _MP = 0x82;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <setRotation+0x368>)
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	801a      	strh	r2, [r3, #0]
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <setRotation+0x36c>)
 8001c96:	2282      	movs	r2, #130	; 0x82
 8001c98:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <setRotation+0x350>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4a2f      	ldr	r2, [pc, #188]	; (8001d5c <setRotation+0x384>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d130      	bne.n	8001d06 <setRotation+0x32e>
               val |= 0x02;   //VERT_SCROLLON
 8001ca4:	210b      	movs	r1, #11
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	001a      	movs	r2, r3
 8001cba:	2310      	movs	r3, #16
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <setRotation+0x32e>
 8001cc0:	210b      	movs	r1, #11
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	222c      	movs	r2, #44	; 0x2c
 8001cc8:	4252      	negs	r2, r2
 8001cca:	4053      	eors	r3, r2
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
           }
			goto common_BGR;
 8001cd2:	e018      	b.n	8001d06 <setRotation+0x32e>
           goto common_MC;
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	e000      	b.n	8001cda <setRotation+0x302>
       }
     common_MC:
 8001cd8:	46c0      	nop			; (mov r8, r8)
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <setRotation+0x368>)
 8001cdc:	222a      	movs	r2, #42	; 0x2a
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <setRotation+0x36c>)
 8001ce2:	222b      	movs	r2, #43	; 0x2b
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <setRotation+0x370>)
 8001ce8:	222c      	movs	r2, #44	; 0x2c
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <setRotation+0x374>)
 8001cee:	222a      	movs	r2, #42	; 0x2a
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <setRotation+0x378>)
 8001cf4:	222a      	movs	r2, #42	; 0x2a
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <setRotation+0x37c>)
 8001cfa:	222b      	movs	r2, #43	; 0x2b
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <setRotation+0x380>)
 8001d00:	222b      	movs	r2, #43	; 0x2b
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	e000      	b.n	8001d08 <setRotation+0x330>
			goto common_BGR;
 8001d06:	46c0      	nop			; (mov r8, r8)
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <setRotation+0x364>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d027      	beq.n	8001d60 <setRotation+0x388>
 8001d10:	2316      	movs	r3, #22
 8001d12:	e026      	b.n	8001d62 <setRotation+0x38a>
 8001d14:	20000084 	.word	0x20000084
 8001d18:	20000031 	.word	0x20000031
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	20000006 	.word	0x20000006
 8001d24:	20000080 	.word	0x20000080
 8001d28:	2000008e 	.word	0x2000008e
 8001d2c:	00006814 	.word	0x00006814
 8001d30:	00001963 	.word	0x00001963
 8001d34:	00009481 	.word	0x00009481
 8001d38:	00001511 	.word	0x00001511
 8001d3c:	2000002f 	.word	0x2000002f
 8001d40:	20000088 	.word	0x20000088
 8001d44:	20000086 	.word	0x20000086
 8001d48:	2000007e 	.word	0x2000007e
 8001d4c:	2000008a 	.word	0x2000008a
 8001d50:	20000092 	.word	0x20000092
 8001d54:	20000082 	.word	0x20000082
 8001d58:	2000008c 	.word	0x2000008c
 8001d5c:	00005252 	.word	0x00005252
 8001d60:	2336      	movs	r3, #54	; 0x36
 8001d62:	240b      	movs	r4, #11
 8001d64:	193a      	adds	r2, r7, r4
 8001d66:	2101      	movs	r1, #1
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff f867 	bl	8000e3c <WriteCmdParamN>
       _lcd_madctl = val;
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b83      	ldr	r3, [pc, #524]	; (8001f84 <setRotation+0x5ac>)
 8001d76:	801a      	strh	r2, [r3, #0]
 8001d78:	e0b6      	b.n	8001ee8 <setRotation+0x510>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <setRotation+0x5b0>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <setRotation+0x5b4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00c      	beq.n	8001d9e <setRotation+0x3c6>
 8001d84:	4a81      	ldr	r2, [pc, #516]	; (8001f8c <setRotation+0x5b4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	dc03      	bgt.n	8001d92 <setRotation+0x3ba>
 8001d8a:	4a81      	ldr	r2, [pc, #516]	; (8001f90 <setRotation+0x5b8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d006      	beq.n	8001d9e <setRotation+0x3c6>
 8001d90:	e04a      	b.n	8001e28 <setRotation+0x450>
 8001d92:	4a80      	ldr	r2, [pc, #512]	; (8001f94 <setRotation+0x5bc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d002      	beq.n	8001d9e <setRotation+0x3c6>
 8001d98:	4a7f      	ldr	r2, [pc, #508]	; (8001f98 <setRotation+0x5c0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d144      	bne.n	8001e28 <setRotation+0x450>
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <setRotation+0x5c4>)
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <setRotation+0x5c8>)
 8001da8:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <setRotation+0x5cc>)
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <setRotation+0x5d0>)
 8001dae:	4a7f      	ldr	r2, [pc, #508]	; (8001fac <setRotation+0x5d4>)
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <setRotation+0x5d8>)
 8001db4:	2284      	movs	r2, #132	; 0x84
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <setRotation+0x5dc>)
 8001dbc:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <setRotation+0x5e0>)
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <setRotation+0x5e4>)
 8001dc2:	4a7f      	ldr	r2, [pc, #508]	; (8001fc0 <setRotation+0x5e8>)
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	4b7f      	ldr	r3, [pc, #508]	; (8001fc4 <setRotation+0x5ec>)
 8001dc8:	4a7f      	ldr	r2, [pc, #508]	; (8001fc8 <setRotation+0x5f0>)
 8001dca:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8001dcc:	230b      	movs	r3, #11
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	0bd2      	lsrs	r2, r2, #15
 8001ddc:	03d2      	lsls	r2, r2, #15
 8001dde:	801a      	strh	r2, [r3, #0]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8001de0:	2314      	movs	r3, #20
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	22d4      	movs	r2, #212	; 0xd4
 8001de6:	01d2      	lsls	r2, r2, #7
 8001de8:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <setRotation+0x5b0>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <setRotation+0x5bc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <setRotation+0x426>
 8001df4:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <setRotation+0x5b0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	4a65      	ldr	r2, [pc, #404]	; (8001f90 <setRotation+0x5b8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d105      	bne.n	8001e0a <setRotation+0x432>
 8001dfe:	2214      	movs	r2, #20
 8001e00:	18bb      	adds	r3, r7, r2
 8001e02:	18ba      	adds	r2, r7, r2
 8001e04:	8812      	ldrh	r2, [r2, #0]
 8001e06:	0852      	lsrs	r2, r2, #1
 8001e08:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x400, GS | NL);
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	18fa      	adds	r2, r7, r3
 8001e0e:	2314      	movs	r3, #20
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe fcab 	bl	800077c <WriteCmdData>
           goto common_SS;
 8001e26:	e028      	b.n	8001e7a <setRotation+0x4a2>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8001e28:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <setRotation+0x5c4>)
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <setRotation+0x5c8>)
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <setRotation+0x5d0>)
 8001e36:	2222      	movs	r2, #34	; 0x22
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <setRotation+0x5d8>)
 8001e3c:	2250      	movs	r2, #80	; 0x50
 8001e3e:	801a      	strh	r2, [r3, #0]
 8001e40:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <setRotation+0x5dc>)
 8001e42:	2251      	movs	r2, #81	; 0x51
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <setRotation+0x5e4>)
 8001e48:	2252      	movs	r2, #82	; 0x52
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <setRotation+0x5ec>)
 8001e4e:	2253      	movs	r2, #83	; 0x53
 8001e50:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8001e52:	230b      	movs	r3, #11
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	0bd2      	lsrs	r2, r2, #15
 8001e62:	03d2      	lsls	r2, r2, #15
 8001e64:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	229c      	movs	r2, #156	; 0x9c
 8001e6c:	0192      	lsls	r2, r2, #6
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	0019      	movs	r1, r3
 8001e74:	2060      	movs	r0, #96	; 0x60
 8001e76:	f7fe fc81 	bl	800077c <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8001e7a:	240b      	movs	r4, #11
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	b299      	uxth	r1, r3
 8001e84:	200e      	movs	r0, #14
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	0019      	movs	r1, r3
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe fc70 	bl	800077c <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	109b      	asrs	r3, r3, #2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2316      	movs	r3, #22
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	400a      	ands	r2, r1
 8001eac:	801a      	strh	r2, [r3, #0]
           if (val & 0x08)
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d007      	beq.n	8001eca <setRotation+0x4f2>
               ORG |= 0x1000;  //BGR
 8001eba:	2216      	movs	r2, #22
 8001ebc:	18bb      	adds	r3, r7, r2
 8001ebe:	18ba      	adds	r2, r7, r2
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0149      	lsls	r1, r1, #5
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	801a      	strh	r2, [r3, #0]
           _lcd_madctl = ORG | 0x0030;
 8001eca:	2316      	movs	r3, #22
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	2230      	movs	r2, #48	; 0x30
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <setRotation+0x5ac>)
 8001ed8:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <setRotation+0x5ac>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f7fe fc4b 	bl	800077c <WriteCmdData>
           break;
 8001ee6:	46c0      	nop			; (mov r8, r8)
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <setRotation+0x5f4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	001a      	movs	r2, r3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d02b      	beq.n	8001f4c <setRotation+0x574>
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <setRotation+0x5f8>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4013      	ands	r3, r2
 8001f00:	d124      	bne.n	8001f4c <setRotation+0x574>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8001f02:	210c      	movs	r1, #12
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <setRotation+0x5c4>)
 8001f08:	8812      	ldrh	r2, [r2, #0]
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <setRotation+0x5c8>)
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <setRotation+0x5c4>)
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <setRotation+0x5c8>)
 8001f16:	187a      	adds	r2, r7, r1
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	801a      	strh	r2, [r3, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <setRotation+0x5d8>)
 8001f20:	8812      	ldrh	r2, [r2, #0]
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <setRotation+0x5e4>)
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <setRotation+0x5d8>)
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <setRotation+0x5e4>)
 8001f2e:	187a      	adds	r2, r7, r1
 8001f30:	8812      	ldrh	r2, [r2, #0]
 8001f32:	801a      	strh	r2, [r3, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <setRotation+0x5dc>)
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <setRotation+0x5ec>)
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <setRotation+0x5dc>)
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <setRotation+0x5ec>)
 8001f46:	187a      	adds	r2, r7, r1
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	801a      	strh	r2, [r3, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8001f4c:	f7fe fbd2 	bl	80006f4 <width>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21c      	sxth	r4, r3
 8001f58:	f7fe fbd6 	bl	8000708 <height>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	0022      	movs	r2, r4
 8001f66:	2100      	movs	r1, #0
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f961 	bl	8002230 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001f6e:	23f0      	movs	r3, #240	; 0xf0
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2200      	movs	r2, #0
 8001f74:	0019      	movs	r1, r3
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 fa5c 	bl	8002434 <vertScroll>
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b006      	add	sp, #24
 8001f82:	bdb0      	pop	{r4, r5, r7, pc}
 8001f84:	20000094 	.word	0x20000094
 8001f88:	2000008e 	.word	0x2000008e
 8001f8c:	00007793 	.word	0x00007793
 8001f90:	00005420 	.word	0x00005420
 8001f94:	00009326 	.word	0x00009326
 8001f98:	0000b509 	.word	0x0000b509
 8001f9c:	20000088 	.word	0x20000088
 8001fa0:	20000086 	.word	0x20000086
 8001fa4:	00000201 	.word	0x00000201
 8001fa8:	2000007e 	.word	0x2000007e
 8001fac:	00000202 	.word	0x00000202
 8001fb0:	2000008a 	.word	0x2000008a
 8001fb4:	20000092 	.word	0x20000092
 8001fb8:	00000211 	.word	0x00000211
 8001fbc:	20000082 	.word	0x20000082
 8001fc0:	00000212 	.word	0x00000212
 8001fc4:	2000008c 	.word	0x2000008c
 8001fc8:	00000213 	.word	0x00000213
 8001fcc:	20000031 	.word	0x20000031
 8001fd0:	20000080 	.word	0x20000080

08001fd4 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0004      	movs	r4, r0
 8001fdc:	0008      	movs	r0, r1
 8001fde:	0011      	movs	r1, r2
 8001fe0:	1dbb      	adds	r3, r7, #6
 8001fe2:	1c22      	adds	r2, r4, #0
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	1c02      	adds	r2, r0, #0
 8001fea:	801a      	strh	r2, [r3, #0]
 8001fec:	1cbb      	adds	r3, r7, #2
 8001fee:	1c0a      	adds	r2, r1, #0
 8001ff0:	801a      	strh	r2, [r3, #0]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da00      	bge.n	8001ffe <drawPixel+0x2a>
 8001ffc:	e10c      	b.n	8002218 <drawPixel+0x244>
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	5e9b      	ldrsh	r3, [r3, r2]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da00      	bge.n	800200a <drawPixel+0x36>
 8002008:	e106      	b.n	8002218 <drawPixel+0x244>
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	2400      	movs	r4, #0
 800200e:	5f1c      	ldrsh	r4, [r3, r4]
 8002010:	f7fe fb70 	bl	80006f4 <width>
 8002014:	0003      	movs	r3, r0
 8002016:	429c      	cmp	r4, r3
 8002018:	db00      	blt.n	800201c <drawPixel+0x48>
 800201a:	e0fd      	b.n	8002218 <drawPixel+0x244>
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2400      	movs	r4, #0
 8002020:	5f1c      	ldrsh	r4, [r3, r4]
 8002022:	f7fe fb71 	bl	8000708 <height>
 8002026:	0003      	movs	r3, r0
 8002028:	429c      	cmp	r4, r3
 800202a:	db00      	blt.n	800202e <drawPixel+0x5a>
 800202c:	e0f4      	b.n	8002218 <drawPixel+0x244>
       return;
   setAddrWindow(x, y, x, y);
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2400      	movs	r4, #0
 8002032:	5f1c      	ldrsh	r4, [r3, r4]
 8002034:	1dbb      	adds	r3, r7, #6
 8002036:	2200      	movs	r2, #0
 8002038:	5e9a      	ldrsh	r2, [r3, r2]
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2100      	movs	r1, #0
 800203e:	5e59      	ldrsh	r1, [r3, r1]
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	2000      	movs	r0, #0
 8002044:	5e18      	ldrsh	r0, [r3, r0]
 8002046:	0023      	movs	r3, r4
 8002048:	f000 f8f2 	bl	8002230 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800204c:	4b74      	ldr	r3, [pc, #464]	; (8002220 <drawPixel+0x24c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d100      	bne.n	8002056 <drawPixel+0x82>
 8002054:	e0d7      	b.n	8002206 <drawPixel+0x232>
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <drawPixel+0x250>)
 8002058:	2101      	movs	r1, #1
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe faea 	bl	8000634 <PIN_LOW>
 8002060:	2390      	movs	r3, #144	; 0x90
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	2110      	movs	r1, #16
 8002066:	0018      	movs	r0, r3
 8002068:	f7fe fae4 	bl	8000634 <PIN_LOW>
 800206c:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <drawPixel+0x254>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29a      	uxth	r2, r3
 8002074:	210f      	movs	r1, #15
 8002076:	187b      	adds	r3, r7, r1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b6b      	ldr	r3, [pc, #428]	; (8002228 <drawPixel+0x254>)
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	240e      	movs	r4, #14
 8002080:	193b      	adds	r3, r7, r4
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	2390      	movs	r3, #144	; 0x90
 8002086:	05db      	lsls	r3, r3, #23
 8002088:	22e0      	movs	r2, #224	; 0xe0
 800208a:	04d2      	lsls	r2, r2, #19
 800208c:	619a      	str	r2, [r3, #24]
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <drawPixel+0x250>)
 8002090:	2287      	movs	r2, #135	; 0x87
 8002092:	04d2      	lsls	r2, r2, #19
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	4b65      	ldr	r3, [pc, #404]	; (800222c <drawPixel+0x258>)
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0412      	lsls	r2, r2, #16
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	0008      	movs	r0, r1
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	025a      	lsls	r2, r3, #9
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	401a      	ands	r2, r3
 80020ac:	183b      	adds	r3, r7, r0
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	0219      	lsls	r1, r3, #8
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	400b      	ands	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	0059      	lsls	r1, r3, #1
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	400b      	ands	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	2390      	movs	r3, #144	; 0x90
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	183b      	adds	r3, r7, r0
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2208      	movs	r2, #8
 80020d4:	401a      	ands	r2, r3
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2120      	movs	r1, #32
 80020de:	400b      	ands	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	105b      	asrs	r3, r3, #1
 80020e8:	2110      	movs	r1, #16
 80020ea:	400b      	ands	r3, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	0119      	lsls	r1, r3, #4
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	400b      	ands	r3, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <drawPixel+0x250>)
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	183b      	adds	r3, r7, r0
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	0019      	movs	r1, r3
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <drawPixel+0x258>)
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	400a      	ands	r2, r1
 800210e:	619a      	str	r2, [r3, #24]
 8002110:	2390      	movs	r3, #144	; 0x90
 8002112:	05db      	lsls	r3, r3, #23
 8002114:	2102      	movs	r1, #2
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe fa8c 	bl	8000634 <PIN_LOW>
 800211c:	2390      	movs	r3, #144	; 0x90
 800211e:	05db      	lsls	r3, r3, #23
 8002120:	2102      	movs	r1, #2
 8002122:	0018      	movs	r0, r3
 8002124:	f7fe fa98 	bl	8000658 <PIN_HIGH>
 8002128:	2390      	movs	r3, #144	; 0x90
 800212a:	05db      	lsls	r3, r3, #23
 800212c:	2102      	movs	r1, #2
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe fa92 	bl	8000658 <PIN_HIGH>
 8002134:	2390      	movs	r3, #144	; 0x90
 8002136:	05db      	lsls	r3, r3, #23
 8002138:	22e0      	movs	r2, #224	; 0xe0
 800213a:	04d2      	lsls	r2, r2, #19
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <drawPixel+0x250>)
 8002140:	2287      	movs	r2, #135	; 0x87
 8002142:	04d2      	lsls	r2, r2, #19
 8002144:	619a      	str	r2, [r3, #24]
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <drawPixel+0x258>)
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	0412      	lsls	r2, r2, #16
 800214c:	619a      	str	r2, [r3, #24]
 800214e:	193b      	adds	r3, r7, r4
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	025a      	lsls	r2, r3, #9
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	401a      	ands	r2, r3
 800215a:	193b      	adds	r3, r7, r4
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	0219      	lsls	r1, r3, #8
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	400b      	ands	r3, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	193b      	adds	r3, r7, r4
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	0059      	lsls	r1, r3, #1
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	2390      	movs	r3, #144	; 0x90
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	619a      	str	r2, [r3, #24]
 800217c:	0020      	movs	r0, r4
 800217e:	183b      	adds	r3, r7, r0
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	401a      	ands	r2, r3
 8002186:	183b      	adds	r3, r7, r0
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2120      	movs	r1, #32
 800218e:	400b      	ands	r3, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	183b      	adds	r3, r7, r0
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	105b      	asrs	r3, r3, #1
 8002198:	2110      	movs	r1, #16
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	0119      	lsls	r1, r3, #4
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	400b      	ands	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <drawPixel+0x250>)
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <drawPixel+0x258>)
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	400a      	ands	r2, r1
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	2390      	movs	r3, #144	; 0x90
 80021c2:	05db      	lsls	r3, r3, #23
 80021c4:	2102      	movs	r1, #2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7fe fa34 	bl	8000634 <PIN_LOW>
 80021cc:	2390      	movs	r3, #144	; 0x90
 80021ce:	05db      	lsls	r3, r3, #23
 80021d0:	2102      	movs	r1, #2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fe fa40 	bl	8000658 <PIN_HIGH>
 80021d8:	2390      	movs	r3, #144	; 0x90
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	2102      	movs	r1, #2
 80021de:	0018      	movs	r0, r3
 80021e0:	f7fe fa3a 	bl	8000658 <PIN_HIGH>
 80021e4:	2390      	movs	r3, #144	; 0x90
 80021e6:	05db      	lsls	r3, r3, #23
 80021e8:	2110      	movs	r1, #16
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fa34 	bl	8000658 <PIN_HIGH>
 80021f0:	1cbb      	adds	r3, r7, #2
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe fb4f 	bl	8000898 <write24>
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <drawPixel+0x250>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe fa2a 	bl	8000658 <PIN_HIGH>
 8002204:	e009      	b.n	800221a <drawPixel+0x246>
   WriteCmdData(_MW, color);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <drawPixel+0x254>)
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7fe fab3 	bl	800077c <WriteCmdData>
 8002216:	e000      	b.n	800221a <drawPixel+0x246>
       return;
 8002218:	46c0      	nop			; (mov r8, r8)
}
 800221a:	46bd      	mov	sp, r7
 800221c:	b005      	add	sp, #20
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	20000030 	.word	0x20000030
 8002224:	48000400 	.word	0x48000400
 8002228:	2000007e 	.word	0x2000007e
 800222c:	48000800 	.word	0x48000800

08002230 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	0005      	movs	r5, r0
 8002238:	000c      	movs	r4, r1
 800223a:	0010      	movs	r0, r2
 800223c:	0019      	movs	r1, r3
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	1c2a      	adds	r2, r5, #0
 8002242:	801a      	strh	r2, [r3, #0]
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	1c22      	adds	r2, r4, #0
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	1cbb      	adds	r3, r7, #2
 800224c:	1c02      	adds	r2, r0, #0
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	003b      	movs	r3, r7
 8002252:	1c0a      	adds	r2, r1, #0
 8002254:	801a      	strh	r2, [r3, #0]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <setAddrWindow+0x1dc>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	2301      	movs	r3, #1
 800225e:	4013      	ands	r3, r2
 8002260:	d067      	beq.n	8002332 <setAddrWindow+0x102>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8002262:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <setAddrWindow+0x1e0>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	1dbb      	adds	r3, r7, #6
 800226a:	2200      	movs	r2, #0
 800226c:	5e9b      	ldrsh	r3, [r3, r2]
 800226e:	121b      	asrs	r3, r3, #8
 8002270:	b21b      	sxth	r3, r3
 8002272:	b2d9      	uxtb	r1, r3
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	1cbb      	adds	r3, r7, #2
 800227c:	2400      	movs	r4, #0
 800227e:	5f1b      	ldrsh	r3, [r3, r4]
 8002280:	121b      	asrs	r3, r3, #8
 8002282:	b21b      	sxth	r3, r3
 8002284:	b2dc      	uxtb	r4, r3
 8002286:	1cbb      	adds	r3, r7, #2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	0023      	movs	r3, r4
 8002290:	f7ff f80a 	bl	80012a8 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8002294:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <setAddrWindow+0x1e4>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b2d8      	uxtb	r0, r3
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	5e9b      	ldrsh	r3, [r3, r2]
 80022a0:	121b      	asrs	r3, r3, #8
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	b2d9      	uxtb	r1, r3
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	003b      	movs	r3, r7
 80022ae:	2400      	movs	r4, #0
 80022b0:	5f1b      	ldrsh	r3, [r3, r4]
 80022b2:	121b      	asrs	r3, r3, #8
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	b2dc      	uxtb	r4, r3
 80022b8:	003b      	movs	r3, r7
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	0023      	movs	r3, r4
 80022c2:	f7fe fff1 	bl	80012a8 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <setAddrWindow+0x1e8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <setAddrWindow+0xa0>
 80022ce:	e099      	b.n	8002404 <setAddrWindow+0x1d4>
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <setAddrWindow+0x1ec>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b65      	cmp	r3, #101	; 0x65
 80022d6:	d000      	beq.n	80022da <setAddrWindow+0xaa>
 80022d8:	e094      	b.n	8002404 <setAddrWindow+0x1d4>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80022da:	1dbb      	adds	r3, r7, #6
 80022dc:	2200      	movs	r2, #0
 80022de:	5e9b      	ldrsh	r3, [r3, r2]
 80022e0:	121b      	asrs	r3, r3, #8
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	210c      	movs	r1, #12
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	705a      	strb	r2, [r3, #1]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <setAddrWindow+0x1f0>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	000c      	movs	r4, r1
 80022fc:	187a      	adds	r2, r7, r1
 80022fe:	2102      	movs	r1, #2
 8002300:	0018      	movs	r0, r3
 8002302:	f7fe fd9b 	bl	8000e3c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2200      	movs	r2, #0
 800230a:	5e9b      	ldrsh	r3, [r3, r2]
 800230c:	121b      	asrs	r3, r3, #8
 800230e:	b21b      	sxth	r3, r3
 8002310:	b2da      	uxtb	r2, r3
 8002312:	0021      	movs	r1, r4
 8002314:	187b      	adds	r3, r7, r1
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	187b      	adds	r3, r7, r1
 8002320:	705a      	strb	r2, [r3, #1]
           WriteCmdParamN(_MP, 2, d);
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <setAddrWindow+0x1f4>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	187a      	adds	r2, r7, r1
 8002328:	2102      	movs	r1, #2
 800232a:	0018      	movs	r0, r3
 800232c:	f7fe fd86 	bl	8000e3c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8002330:	e068      	b.n	8002404 <setAddrWindow+0x1d4>
       WriteCmdData(_MC, x);
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <setAddrWindow+0x1f0>)
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f7fe fa1d 	bl	800077c <WriteCmdData>
       WriteCmdData(_MP, y);
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <setAddrWindow+0x1f4>)
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	0019      	movs	r1, r3
 800234c:	0010      	movs	r0, r2
 800234e:	f7fe fa15 	bl	800077c <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8002352:	1dba      	adds	r2, r7, #6
 8002354:	1cbb      	adds	r3, r7, #2
 8002356:	2100      	movs	r1, #0
 8002358:	5e52      	ldrsh	r2, [r2, r1]
 800235a:	2100      	movs	r1, #0
 800235c:	5e5b      	ldrsh	r3, [r3, r1]
 800235e:	429a      	cmp	r2, r3
 8002360:	d107      	bne.n	8002372 <setAddrWindow+0x142>
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	003b      	movs	r3, r7
 8002366:	2100      	movs	r1, #0
 8002368:	5e52      	ldrsh	r2, [r2, r1]
 800236a:	2100      	movs	r1, #0
 800236c:	5e5b      	ldrsh	r3, [r3, r1]
 800236e:	429a      	cmp	r2, r3
 8002370:	d048      	beq.n	8002404 <setAddrWindow+0x1d4>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <setAddrWindow+0x1dc>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	001a      	movs	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	4013      	ands	r3, r2
 800237c:	d022      	beq.n	80023c4 <setAddrWindow+0x194>
               if (rotation & 1)
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <setAddrWindow+0x1f8>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	001a      	movs	r2, r3
 8002384:	2301      	movs	r3, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d00e      	beq.n	80023a8 <setAddrWindow+0x178>
                   y1 = y = (y1 << 8) | y;
 800238a:	003b      	movs	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	5e9b      	ldrsh	r3, [r3, r2]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	b219      	sxth	r1, r3
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	1d3a      	adds	r2, r7, #4
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	003b      	movs	r3, r7
 80023a0:	1d3a      	adds	r2, r7, #4
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e00d      	b.n	80023c4 <setAddrWindow+0x194>
                   x1 = x = (x1 << 8) | x;
 80023a8:	1cbb      	adds	r3, r7, #2
 80023aa:	2200      	movs	r2, #0
 80023ac:	5e9b      	ldrsh	r3, [r3, r2]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b219      	sxth	r1, r3
 80023b2:	1dbb      	adds	r3, r7, #6
 80023b4:	1dba      	adds	r2, r7, #6
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	1cbb      	adds	r3, r7, #2
 80023be:	1dba      	adds	r2, r7, #6
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	801a      	strh	r2, [r3, #0]
           WriteCmdData(_SC, x);
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <setAddrWindow+0x1e0>)
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	1dbb      	adds	r3, r7, #6
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	0019      	movs	r1, r3
 80023ce:	0010      	movs	r0, r2
 80023d0:	f7fe f9d4 	bl	800077c <WriteCmdData>
           WriteCmdData(_SP, y);
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <setAddrWindow+0x1e4>)
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	0019      	movs	r1, r3
 80023de:	0010      	movs	r0, r2
 80023e0:	f7fe f9cc 	bl	800077c <WriteCmdData>
           WriteCmdData(_EC, x1);
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <setAddrWindow+0x1fc>)
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	1cbb      	adds	r3, r7, #2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	0019      	movs	r1, r3
 80023ee:	0010      	movs	r0, r2
 80023f0:	f7fe f9c4 	bl	800077c <WriteCmdData>
           WriteCmdData(_EP, y1);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <setAddrWindow+0x200>)
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	003b      	movs	r3, r7
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	0019      	movs	r1, r3
 80023fe:	0010      	movs	r0, r2
 8002400:	f7fe f9bc 	bl	800077c <WriteCmdData>
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	20000080 	.word	0x20000080
 8002410:	2000008a 	.word	0x2000008a
 8002414:	20000082 	.word	0x20000082
 8002418:	2000002f 	.word	0x2000002f
 800241c:	2000008e 	.word	0x2000008e
 8002420:	20000088 	.word	0x20000088
 8002424:	20000086 	.word	0x20000086
 8002428:	20000031 	.word	0x20000031
 800242c:	20000092 	.word	0x20000092
 8002430:	2000008c 	.word	0x2000008c

08002434 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	0004      	movs	r4, r0
 800243c:	0008      	movs	r0, r1
 800243e:	0011      	movs	r1, r2
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	1c22      	adds	r2, r4, #0
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	1cbb      	adds	r3, r7, #2
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	801a      	strh	r2, [r3, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	425b      	negs	r3, r3
 8002458:	b29a      	uxth	r2, r3
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	33e1      	adds	r3, #225	; 0xe1
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	b29a      	uxth	r2, r3
 8002468:	2316      	movs	r3, #22
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	801a      	strh	r2, [r3, #0]
    int16_t vsp;
    int16_t sea = top;
 800246e:	2312      	movs	r3, #18
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	1dba      	adds	r2, r7, #6
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	801a      	strh	r2, [r3, #0]
	if (_lcd_ID == 0x9327) bfa += 32;
 8002478:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <vertScroll+0x284>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	4a8f      	ldr	r2, [pc, #572]	; (80026bc <vertScroll+0x288>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d106      	bne.n	8002490 <vertScroll+0x5c>
 8002482:	2116      	movs	r1, #22
 8002484:	187b      	adds	r3, r7, r1
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	3320      	adds	r3, #32
 800248a:	b29a      	uxth	r2, r3
 800248c:	187b      	adds	r3, r7, r1
 800248e:	801a      	strh	r2, [r3, #0]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8002490:	1cbb      	adds	r3, r7, #2
 8002492:	2200      	movs	r2, #0
 8002494:	5e9a      	ldrsh	r2, [r3, r2]
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2100      	movs	r1, #0
 800249a:	5e5b      	ldrsh	r3, [r3, r1]
 800249c:	425b      	negs	r3, r3
 800249e:	429a      	cmp	r2, r3
 80024a0:	dd07      	ble.n	80024b2 <vertScroll+0x7e>
 80024a2:	1cba      	adds	r2, r7, #2
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2100      	movs	r1, #0
 80024a8:	5e52      	ldrsh	r2, [r2, r1]
 80024aa:	2100      	movs	r1, #0
 80024ac:	5e5b      	ldrsh	r3, [r3, r1]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	db02      	blt.n	80024b8 <vertScroll+0x84>
 80024b2:	1cbb      	adds	r3, r7, #2
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
	vsp = top + offset; // vertical start position
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	1cbb      	adds	r3, r7, #2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	18d3      	adds	r3, r2, r3
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	2314      	movs	r3, #20
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	801a      	strh	r2, [r3, #0]
    if (offset < 0)
 80024ca:	1cbb      	adds	r3, r7, #2
 80024cc:	2200      	movs	r2, #0
 80024ce:	5e9b      	ldrsh	r3, [r3, r2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da08      	bge.n	80024e6 <vertScroll+0xb2>
        vsp += scrollines;          //keep in unsigned range
 80024d4:	2114      	movs	r1, #20
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	18d3      	adds	r3, r2, r3
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	801a      	strh	r2, [r3, #0]
    sea = top + scrollines - 1;
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	18d3      	adds	r3, r2, r3
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	2312      	movs	r3, #18
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80024fc:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <vertScroll+0x28c>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d100      	bne.n	800250a <vertScroll+0xd6>
 8002508:	e089      	b.n	800261e <vertScroll+0x1ea>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	2200      	movs	r2, #0
 800250e:	5e9b      	ldrsh	r3, [r3, r2]
 8002510:	121b      	asrs	r3, r3, #8
 8002512:	b21b      	sxth	r3, r3
 8002514:	b2da      	uxtb	r2, r3
 8002516:	210c      	movs	r1, #12
 8002518:	187b      	adds	r3, r7, r1
 800251a:	701a      	strb	r2, [r3, #0]
        d[1] = top;
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	187b      	adds	r3, r7, r1
 8002524:	705a      	strb	r2, [r3, #1]
        d[2] = scrollines >> 8; //VSA
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2200      	movs	r2, #0
 800252a:	5e9b      	ldrsh	r3, [r3, r2]
 800252c:	121b      	asrs	r3, r3, #8
 800252e:	b21b      	sxth	r3, r3
 8002530:	b2da      	uxtb	r2, r3
 8002532:	187b      	adds	r3, r7, r1
 8002534:	709a      	strb	r2, [r3, #2]
        d[3] = scrollines;
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	187b      	adds	r3, r7, r1
 800253e:	70da      	strb	r2, [r3, #3]
        d[4] = bfa >> 8;        //BFA
 8002540:	2016      	movs	r0, #22
 8002542:	183b      	adds	r3, r7, r0
 8002544:	2200      	movs	r2, #0
 8002546:	5e9b      	ldrsh	r3, [r3, r2]
 8002548:	121b      	asrs	r3, r3, #8
 800254a:	b21b      	sxth	r3, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	187b      	adds	r3, r7, r1
 8002550:	711a      	strb	r2, [r3, #4]
        d[5] = bfa;
 8002552:	183b      	adds	r3, r7, r0
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	187b      	adds	r3, r7, r1
 800255a:	715a      	strb	r2, [r3, #5]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <vertScroll+0x290>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <vertScroll+0x134>
 8002564:	230e      	movs	r3, #14
 8002566:	e000      	b.n	800256a <vertScroll+0x136>
 8002568:	2333      	movs	r3, #51	; 0x33
 800256a:	210c      	movs	r1, #12
 800256c:	000c      	movs	r4, r1
 800256e:	187a      	adds	r2, r7, r1
 8002570:	2106      	movs	r1, #6
 8002572:	0018      	movs	r0, r3
 8002574:	f7fe fc62 	bl	8000e3c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8002578:	2014      	movs	r0, #20
 800257a:	183b      	adds	r3, r7, r0
 800257c:	2200      	movs	r2, #0
 800257e:	5e9b      	ldrsh	r3, [r3, r2]
 8002580:	121b      	asrs	r3, r3, #8
 8002582:	b21b      	sxth	r3, r3
 8002584:	b2da      	uxtb	r2, r3
 8002586:	0021      	movs	r1, r4
 8002588:	187b      	adds	r3, r7, r1
 800258a:	701a      	strb	r2, [r3, #0]
        d[1] = vsp;
 800258c:	183b      	adds	r3, r7, r0
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	187b      	adds	r3, r7, r1
 8002594:	705a      	strb	r2, [r3, #1]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <vertScroll+0x290>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <vertScroll+0x16e>
 800259e:	2314      	movs	r3, #20
 80025a0:	e000      	b.n	80025a4 <vertScroll+0x170>
 80025a2:	2337      	movs	r3, #55	; 0x37
 80025a4:	220c      	movs	r2, #12
 80025a6:	18ba      	adds	r2, r7, r2
 80025a8:	2102      	movs	r1, #2
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7fe fc46 	bl	8000e3c <WriteCmdParamN>
		if (is8347) {
 80025b0:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <vertScroll+0x290>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <vertScroll+0x1c6>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 80025b8:	1cbb      	adds	r3, r7, #2
 80025ba:	2200      	movs	r2, #0
 80025bc:	5e9b      	ldrsh	r3, [r3, r2]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <vertScroll+0x1a0>
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <vertScroll+0x284>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <vertScroll+0x294>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <vertScroll+0x19c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e002      	b.n	80025d6 <vertScroll+0x1a2>
 80025d0:	2308      	movs	r3, #8
 80025d2:	e000      	b.n	80025d6 <vertScroll+0x1a2>
 80025d4:	2300      	movs	r3, #0
 80025d6:	220c      	movs	r2, #12
 80025d8:	18ba      	adds	r2, r7, r2
 80025da:	7013      	strb	r3, [r2, #0]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <vertScroll+0x284>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	4a39      	ldr	r2, [pc, #228]	; (80026c8 <vertScroll+0x294>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <vertScroll+0x1b6>
 80025e6:	2318      	movs	r3, #24
 80025e8:	e000      	b.n	80025ec <vertScroll+0x1b8>
 80025ea:	2301      	movs	r3, #1
 80025ec:	220c      	movs	r2, #12
 80025ee:	18ba      	adds	r2, r7, r2
 80025f0:	2101      	movs	r1, #1
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fe fc22 	bl	8000e3c <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 80025f8:	e05a      	b.n	80026b0 <vertScroll+0x27c>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	2200      	movs	r2, #0
 80025fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d155      	bne.n	80026b0 <vertScroll+0x27c>
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <vertScroll+0x28c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	001a      	movs	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d04f      	beq.n	80026b0 <vertScroll+0x27c>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2013      	movs	r0, #19
 8002616:	f7fe fc11 	bl	8000e3c <WriteCmdParamN>
		return;
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	e048      	b.n	80026b0 <vertScroll+0x27c>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <vertScroll+0x284>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	4a2a      	ldr	r2, [pc, #168]	; (80026cc <vertScroll+0x298>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01e      	beq.n	8002666 <vertScroll+0x232>
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <vertScroll+0x298>)
 800262a:	4293      	cmp	r3, r2
 800262c:	dc06      	bgt.n	800263c <vertScroll+0x208>
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <vertScroll+0x29c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <vertScroll+0x232>
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <vertScroll+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <vertScroll+0x216>
 800263a:	e027      	b.n	800268c <vertScroll+0x258>
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <vertScroll+0x2a4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d011      	beq.n	8002666 <vertScroll+0x232>
 8002642:	4a26      	ldr	r2, [pc, #152]	; (80026dc <vertScroll+0x2a8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <vertScroll+0x232>
 8002648:	e020      	b.n	800268c <vertScroll+0x258>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <vertScroll+0x2ac>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	0019      	movs	r1, r3
 8002650:	2061      	movs	r0, #97	; 0x61
 8002652:	f7fe f893 	bl	800077c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8002656:	2314      	movs	r3, #20
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	0019      	movs	r1, r3
 800265e:	206a      	movs	r0, #106	; 0x6a
 8002660:	f7fe f88c 	bl	800077c <WriteCmdData>
        break;
 8002664:	e025      	b.n	80026b2 <vertScroll+0x27e>
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <vertScroll+0x2ac>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2202      	movs	r2, #2
 800266c:	4313      	orrs	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <vertScroll+0x2b0>)
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f7fe f881 	bl	800077c <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 800267a:	2314      	movs	r3, #20
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <vertScroll+0x2b4>)
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f7fe f879 	bl	800077c <WriteCmdData>
        break;
 800268a:	e012      	b.n	80026b2 <vertScroll+0x27e>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <vertScroll+0x2ac>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2202      	movs	r2, #2
 8002692:	4313      	orrs	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	0019      	movs	r1, r3
 8002698:	2061      	movs	r0, #97	; 0x61
 800269a:	f7fe f86f 	bl	800077c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800269e:	2314      	movs	r3, #20
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	0019      	movs	r1, r3
 80026a6:	206a      	movs	r0, #106	; 0x6a
 80026a8:	f7fe f868 	bl	800077c <WriteCmdData>
        break;
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	e000      	b.n	80026b2 <vertScroll+0x27e>
		return;
 80026b0:	46c0      	nop			; (mov r8, r8)
    }
}
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b007      	add	sp, #28
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	2000008e 	.word	0x2000008e
 80026bc:	00009327 	.word	0x00009327
 80026c0:	20000080 	.word	0x20000080
 80026c4:	2000002f 	.word	0x2000002f
 80026c8:	00008347 	.word	0x00008347
 80026cc:	00007793 	.word	0x00007793
 80026d0:	00005420 	.word	0x00005420
 80026d4:	00007783 	.word	0x00007783
 80026d8:	00009326 	.word	0x00009326
 80026dc:	0000b509 	.word	0x0000b509
 80026e0:	20000084 	.word	0x20000084
 80026e4:	00000401 	.word	0x00000401
 80026e8:	00000404 	.word	0x00000404

080026ec <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	0002      	movs	r2, r0
 80026f4:	1dbb      	adds	r3, r7, #6
 80026f6:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <fillScreen+0x30>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <fillScreen+0x34>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b219      	sxth	r1, r3
 8002704:	1dbb      	adds	r3, r7, #6
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	000b      	movs	r3, r1
 800270c:	2100      	movs	r1, #0
 800270e:	2000      	movs	r0, #0
 8002710:	f000 fd72 	bl	80031f8 <fillRect>
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000004 	.word	0x20000004
 8002720:	20000006 	.word	0x20000006

08002724 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	0002      	movs	r2, r0
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8002730:	4b45      	ldr	r3, [pc, #276]	; (8002848 <invertDisplay+0x124>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	001a      	movs	r2, r3
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	015b      	lsls	r3, r3, #5
 800273a:	4013      	ands	r3, r2
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	4193      	sbcs	r3, r2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b21b      	sxth	r3, r3
 800274a:	4053      	eors	r3, r2
 800274c:	b21b      	sxth	r3, r3
 800274e:	b29a      	uxth	r2, r3
 8002750:	4b3e      	ldr	r3, [pc, #248]	; (800284c <invertDisplay+0x128>)
 8002752:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8002754:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <invertDisplay+0x124>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	001a      	movs	r2, r3
 800275a:	2301      	movs	r3, #1
 800275c:	4013      	ands	r3, r2
 800275e:	d037      	beq.n	80027d0 <invertDisplay+0xac>
        if (is8347) {
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <invertDisplay+0x12c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d026      	beq.n	80027b6 <invertDisplay+0x92>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <invertDisplay+0x130>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <invertDisplay+0x134>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <invertDisplay+0x58>
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <invertDisplay+0x130>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <invertDisplay+0x138>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10a      	bne.n	8002792 <invertDisplay+0x6e>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <invertDisplay+0x128>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <invertDisplay+0x64>
 8002784:	2206      	movs	r2, #6
 8002786:	e000      	b.n	800278a <invertDisplay+0x66>
 8002788:	2202      	movs	r2, #2
 800278a:	230f      	movs	r3, #15
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e009      	b.n	80027a6 <invertDisplay+0x82>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <invertDisplay+0x128>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <invertDisplay+0x7a>
 800279a:	2208      	movs	r2, #8
 800279c:	e000      	b.n	80027a0 <invertDisplay+0x7c>
 800279e:	220a      	movs	r2, #10
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	701a      	strb	r2, [r3, #0]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80027a6:	230f      	movs	r3, #15
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	001a      	movs	r2, r3
 80027ac:	2101      	movs	r1, #1
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7fe fb44 	bl	8000e3c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80027b4:	e044      	b.n	8002840 <invertDisplay+0x11c>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <invertDisplay+0x128>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <invertDisplay+0x9e>
 80027be:	2321      	movs	r3, #33	; 0x21
 80027c0:	e000      	b.n	80027c4 <invertDisplay+0xa0>
 80027c2:	2320      	movs	r3, #32
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7fe fb37 	bl	8000e3c <WriteCmdParamN>
 80027ce:	e037      	b.n	8002840 <invertDisplay+0x11c>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <invertDisplay+0x130>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <invertDisplay+0x13c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d020      	beq.n	800281c <invertDisplay+0xf8>
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <invertDisplay+0x13c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	dc07      	bgt.n	80027f0 <invertDisplay+0xcc>
 80027e0:	22aa      	movs	r2, #170	; 0xaa
 80027e2:	0052      	lsls	r2, r2, #1
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00c      	beq.n	8002802 <invertDisplay+0xde>
 80027e8:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <invertDisplay+0x140>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d016      	beq.n	800281c <invertDisplay+0xf8>
 80027ee:	e020      	b.n	8002832 <invertDisplay+0x10e>
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <invertDisplay+0x144>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d012      	beq.n	800281c <invertDisplay+0xf8>
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <invertDisplay+0x148>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00f      	beq.n	800281c <invertDisplay+0xf8>
 80027fc:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <invertDisplay+0x14c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d117      	bne.n	8002832 <invertDisplay+0x10e>
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <invertDisplay+0x128>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	b21b      	sxth	r3, r3
 800280a:	2213      	movs	r2, #19
 800280c:	4313      	orrs	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	b29b      	uxth	r3, r3
 8002812:	0019      	movs	r1, r3
 8002814:	2007      	movs	r0, #7
 8002816:	f7fd ffb1 	bl	800077c <WriteCmdData>
        break;
 800281a:	e011      	b.n	8002840 <invertDisplay+0x11c>
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <invertDisplay+0x128>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2202      	movs	r2, #2
 8002822:	4313      	orrs	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <invertDisplay+0x150>)
 8002828:	0019      	movs	r1, r3
 800282a:	0010      	movs	r0, r2
 800282c:	f7fd ffa6 	bl	800077c <WriteCmdData>
        break;
 8002830:	e006      	b.n	8002840 <invertDisplay+0x11c>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <invertDisplay+0x128>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	0019      	movs	r1, r3
 8002838:	2061      	movs	r0, #97	; 0x61
 800283a:	f7fd ff9f 	bl	800077c <WriteCmdData>
        break;
 800283e:	46c0      	nop			; (mov r8, r8)
    }
}
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000080 	.word	0x20000080
 800284c:	20000084 	.word	0x20000084
 8002850:	2000002f 	.word	0x2000002f
 8002854:	2000008e 	.word	0x2000008e
 8002858:	00008347 	.word	0x00008347
 800285c:	00005252 	.word	0x00005252
 8002860:	00007793 	.word	0x00007793
 8002864:	00005420 	.word	0x00005420
 8002868:	00009326 	.word	0x00009326
 800286c:	0000b509 	.word	0x0000b509
 8002870:	00009225 	.word	0x00009225
 8002874:	00000401 	.word	0x00000401

08002878 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af02      	add	r7, sp, #8
 800287e:	0005      	movs	r5, r0
 8002880:	000c      	movs	r4, r1
 8002882:	0010      	movs	r0, r2
 8002884:	0019      	movs	r1, r3
 8002886:	1dbb      	adds	r3, r7, #6
 8002888:	1c2a      	adds	r2, r5, #0
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	1c22      	adds	r2, r4, #0
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	1cbb      	adds	r3, r7, #2
 8002894:	1c02      	adds	r2, r0, #0
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	003b      	movs	r3, r7
 800289a:	1c0a      	adds	r2, r1, #0
 800289c:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, 1, h, color);
 800289e:	1cbb      	adds	r3, r7, #2
 80028a0:	2200      	movs	r2, #0
 80028a2:	5e9a      	ldrsh	r2, [r3, r2]
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2100      	movs	r1, #0
 80028a8:	5e59      	ldrsh	r1, [r3, r1]
 80028aa:	1dbb      	adds	r3, r7, #6
 80028ac:	2000      	movs	r0, #0
 80028ae:	5e18      	ldrsh	r0, [r3, r0]
 80028b0:	003b      	movs	r3, r7
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	0013      	movs	r3, r2
 80028b8:	2201      	movs	r2, #1
 80028ba:	f000 fc9d 	bl	80031f8 <fillRect>
}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bdb0      	pop	{r4, r5, r7, pc}

080028c6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80028c6:	b5b0      	push	{r4, r5, r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af02      	add	r7, sp, #8
 80028cc:	0005      	movs	r5, r0
 80028ce:	000c      	movs	r4, r1
 80028d0:	0010      	movs	r0, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	1c2a      	adds	r2, r5, #0
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	1c22      	adds	r2, r4, #0
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	1cbb      	adds	r3, r7, #2
 80028e2:	1c02      	adds	r2, r0, #0
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	003b      	movs	r3, r7
 80028e8:	1c0a      	adds	r2, r1, #0
 80028ea:	801a      	strh	r2, [r3, #0]
	fillRect(x, y, w, 1, color);
 80028ec:	1cbb      	adds	r3, r7, #2
 80028ee:	2200      	movs	r2, #0
 80028f0:	5e9a      	ldrsh	r2, [r3, r2]
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	5e59      	ldrsh	r1, [r3, r1]
 80028f8:	1dbb      	adds	r3, r7, #6
 80028fa:	2000      	movs	r0, #0
 80028fc:	5e18      	ldrsh	r0, [r3, r0]
 80028fe:	003b      	movs	r3, r7
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2301      	movs	r3, #1
 8002906:	f000 fc77 	bl	80031f8 <fillRect>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bdb0      	pop	{r4, r5, r7, pc}

08002912 <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002912:	b590      	push	{r4, r7, lr}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	0004      	movs	r4, r0
 800291a:	0008      	movs	r0, r1
 800291c:	0011      	movs	r1, r2
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	1c22      	adds	r2, r4, #0
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	1c02      	adds	r2, r0, #0
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	1cbb      	adds	r3, r7, #2
 800292c:	1c0a      	adds	r2, r1, #0
 800292e:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002930:	1cbb      	adds	r3, r7, #2
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2100      	movs	r1, #0
 8002938:	5e59      	ldrsh	r1, [r3, r1]
 800293a:	1dbb      	adds	r3, r7, #6
 800293c:	2000      	movs	r0, #0
 800293e:	5e1b      	ldrsh	r3, [r3, r0]
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff fb47 	bl	8001fd4 <drawPixel>
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b003      	add	sp, #12
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 800294e:	b5b0      	push	{r4, r5, r7, lr}
 8002950:	b088      	sub	sp, #32
 8002952:	af00      	add	r7, sp, #0
 8002954:	0005      	movs	r5, r0
 8002956:	000c      	movs	r4, r1
 8002958:	0010      	movs	r0, r2
 800295a:	0019      	movs	r1, r3
 800295c:	1dbb      	adds	r3, r7, #6
 800295e:	1c2a      	adds	r2, r5, #0
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	1c22      	adds	r2, r4, #0
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	1cbb      	adds	r3, r7, #2
 800296a:	1c02      	adds	r2, r0, #0
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	003b      	movs	r3, r7
 8002970:	1c0a      	adds	r2, r1, #0
 8002972:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002974:	003b      	movs	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	5e9a      	ldrsh	r2, [r3, r2]
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2100      	movs	r1, #0
 800297e:	5e5b      	ldrsh	r3, [r3, r1]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	17d9      	asrs	r1, r3, #31
 8002984:	185a      	adds	r2, r3, r1
 8002986:	404a      	eors	r2, r1
 8002988:	1cbb      	adds	r3, r7, #2
 800298a:	2100      	movs	r1, #0
 800298c:	5e59      	ldrsh	r1, [r3, r1]
 800298e:	1dbb      	adds	r3, r7, #6
 8002990:	2000      	movs	r0, #0
 8002992:	5e1b      	ldrsh	r3, [r3, r0]
 8002994:	1acb      	subs	r3, r1, r3
 8002996:	17d9      	asrs	r1, r3, #31
 8002998:	185b      	adds	r3, r3, r1
 800299a:	404b      	eors	r3, r1
 800299c:	2101      	movs	r1, #1
 800299e:	429a      	cmp	r2, r3
 80029a0:	dc01      	bgt.n	80029a6 <writeLine+0x58>
 80029a2:	2300      	movs	r3, #0
 80029a4:	1c19      	adds	r1, r3, #0
 80029a6:	b2ca      	uxtb	r2, r1
 80029a8:	211a      	movs	r1, #26
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	801a      	strh	r2, [r3, #0]
    if (steep) {
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2200      	movs	r2, #0
 80029b2:	5e9b      	ldrsh	r3, [r3, r2]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d019      	beq.n	80029ec <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 80029b8:	2118      	movs	r1, #24
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	1dba      	adds	r2, r7, #6
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	1dbb      	adds	r3, r7, #6
 80029c4:	1d3a      	adds	r2, r7, #4
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	187a      	adds	r2, r7, r1
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 80029d2:	2116      	movs	r1, #22
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	1cba      	adds	r2, r7, #2
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	1cbb      	adds	r3, r7, #2
 80029de:	003a      	movs	r2, r7
 80029e0:	8812      	ldrh	r2, [r2, #0]
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	003b      	movs	r3, r7
 80029e6:	187a      	adds	r2, r7, r1
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80029ec:	1dba      	adds	r2, r7, #6
 80029ee:	1cbb      	adds	r3, r7, #2
 80029f0:	2100      	movs	r1, #0
 80029f2:	5e52      	ldrsh	r2, [r2, r1]
 80029f4:	2100      	movs	r1, #0
 80029f6:	5e5b      	ldrsh	r3, [r3, r1]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dd19      	ble.n	8002a30 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80029fc:	2114      	movs	r1, #20
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	1dba      	adds	r2, r7, #6
 8002a02:	8812      	ldrh	r2, [r2, #0]
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	1dbb      	adds	r3, r7, #6
 8002a08:	1cba      	adds	r2, r7, #2
 8002a0a:	8812      	ldrh	r2, [r2, #0]
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	187a      	adds	r2, r7, r1
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002a16:	2112      	movs	r1, #18
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	1d3a      	adds	r2, r7, #4
 8002a1c:	8812      	ldrh	r2, [r2, #0]
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	003a      	movs	r2, r7
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	003b      	movs	r3, r7
 8002a2a:	187a      	adds	r2, r7, r1
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002a30:	1cbb      	adds	r3, r7, #2
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002a42:	003b      	movs	r3, r7
 8002a44:	2200      	movs	r2, #0
 8002a46:	5e9a      	ldrsh	r2, [r3, r2]
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	5e1b      	ldrsh	r3, [r3, r0]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	17d8      	asrs	r0, r3, #31
 8002a52:	181a      	adds	r2, r3, r0
 8002a54:	4042      	eors	r2, r0
 8002a56:	230e      	movs	r3, #14
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002a5c:	231e      	movs	r3, #30
 8002a5e:	18fa      	adds	r2, r7, r3
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2100      	movs	r1, #0
 8002a64:	5e5b      	ldrsh	r3, [r3, r1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da00      	bge.n	8002a6c <writeLine+0x11e>
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	105b      	asrs	r3, r3, #1
 8002a6e:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002a70:	1d3a      	adds	r2, r7, #4
 8002a72:	003b      	movs	r3, r7
 8002a74:	2100      	movs	r1, #0
 8002a76:	5e52      	ldrsh	r2, [r2, r1]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5e5b      	ldrsh	r3, [r3, r1]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	da04      	bge.n	8002a8a <writeLine+0x13c>
        ystep = 1;
 8002a80:	231c      	movs	r3, #28
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2201      	movs	r2, #1
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	e04e      	b.n	8002b28 <writeLine+0x1da>
    } else {
        ystep = -1;
 8002a8a:	231c      	movs	r3, #28
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4252      	negs	r2, r2
 8002a92:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002a94:	e048      	b.n	8002b28 <writeLine+0x1da>
        if (steep) {
 8002a96:	231a      	movs	r3, #26
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002aa2:	2330      	movs	r3, #48	; 0x30
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5e59      	ldrsh	r1, [r3, r1]
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	5e1b      	ldrsh	r3, [r3, r0]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff ff2c 	bl	8002912 <writePixel>
 8002aba:	e00b      	b.n	8002ad4 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8002abc:	2330      	movs	r3, #48	; 0x30
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5e59      	ldrsh	r1, [r3, r1]
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	2000      	movs	r0, #0
 8002acc:	5e1b      	ldrsh	r3, [r3, r0]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff1f 	bl	8002912 <writePixel>
        }
        err -= dy;
 8002ad4:	211e      	movs	r1, #30
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	230e      	movs	r3, #14
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	5e9b      	ldrsh	r3, [r3, r2]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da12      	bge.n	8002b18 <writeLine+0x1ca>
            y0 += ystep;
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	881a      	ldrh	r2, [r3, #0]
 8002af6:	231c      	movs	r3, #28
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	18d3      	adds	r3, r2, r3
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002b04:	211e      	movs	r1, #30
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8002b18:	1dbb      	adds	r3, r7, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	1dba      	adds	r2, r7, #6
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5e52      	ldrsh	r2, [r2, r1]
 8002b30:	2100      	movs	r1, #0
 8002b32:	5e5b      	ldrsh	r3, [r3, r1]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	ddae      	ble.n	8002a96 <writeLine+0x148>
        }
    }
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b008      	add	sp, #32
 8002b3e:	bdb0      	pop	{r4, r5, r7, pc}

08002b40 <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	0005      	movs	r5, r0
 8002b48:	000c      	movs	r4, r1
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	1c2a      	adds	r2, r5, #0
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	1c22      	adds	r2, r4, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	1cbb      	adds	r3, r7, #2
 8002b5c:	1c02      	adds	r2, r0, #0
 8002b5e:	801a      	strh	r2, [r3, #0]
 8002b60:	003b      	movs	r3, r7
 8002b62:	1c0a      	adds	r2, r1, #0
 8002b64:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8002b66:	1dba      	adds	r2, r7, #6
 8002b68:	1cbb      	adds	r3, r7, #2
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5e52      	ldrsh	r2, [r2, r1]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5e5b      	ldrsh	r3, [r3, r1]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d12a      	bne.n	8002bcc <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8002b76:	1d3a      	adds	r2, r7, #4
 8002b78:	003b      	movs	r3, r7
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5e52      	ldrsh	r2, [r2, r1]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5e5b      	ldrsh	r3, [r3, r1]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	dd0c      	ble.n	8002ba0 <drawLine+0x60>
 8002b86:	210c      	movs	r1, #12
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	1d3a      	adds	r2, r7, #4
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	003a      	movs	r2, r7
 8002b94:	8812      	ldrh	r2, [r2, #0]
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	003b      	movs	r3, r7
 8002b9a:	187a      	adds	r2, r7, r1
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8002ba0:	003b      	movs	r3, r7
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	881c      	ldrh	r4, [r3, #0]
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5e59      	ldrsh	r1, [r3, r1]
 8002bbe:	1dbb      	adds	r3, r7, #6
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	5e18      	ldrsh	r0, [r3, r0]
 8002bc4:	0023      	movs	r3, r4
 8002bc6:	f7ff fe57 	bl	8002878 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002bca:	e045      	b.n	8002c58 <drawLine+0x118>
    } else if(y0 == y1){
 8002bcc:	1d3a      	adds	r2, r7, #4
 8002bce:	003b      	movs	r3, r7
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5e52      	ldrsh	r2, [r2, r1]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5e5b      	ldrsh	r3, [r3, r1]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d12a      	bne.n	8002c32 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8002bdc:	1dba      	adds	r2, r7, #6
 8002bde:	1cbb      	adds	r3, r7, #2
 8002be0:	2100      	movs	r1, #0
 8002be2:	5e52      	ldrsh	r2, [r2, r1]
 8002be4:	2100      	movs	r1, #0
 8002be6:	5e5b      	ldrsh	r3, [r3, r1]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dd0c      	ble.n	8002c06 <drawLine+0xc6>
 8002bec:	210e      	movs	r1, #14
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	1dba      	adds	r2, r7, #6
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	1dbb      	adds	r3, r7, #6
 8002bf8:	1cba      	adds	r2, r7, #2
 8002bfa:	8812      	ldrh	r2, [r2, #0]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	187a      	adds	r2, r7, r1
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002c06:	1cbb      	adds	r3, r7, #2
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	2320      	movs	r3, #32
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	881c      	ldrh	r4, [r3, #0]
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2100      	movs	r1, #0
 8002c22:	5e59      	ldrsh	r1, [r3, r1]
 8002c24:	1dbb      	adds	r3, r7, #6
 8002c26:	2000      	movs	r0, #0
 8002c28:	5e18      	ldrsh	r0, [r3, r0]
 8002c2a:	0023      	movs	r3, r4
 8002c2c:	f7ff fe4b 	bl	80028c6 <drawFastHLine>
}
 8002c30:	e012      	b.n	8002c58 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8002c32:	003b      	movs	r3, r7
 8002c34:	2400      	movs	r4, #0
 8002c36:	5f1c      	ldrsh	r4, [r3, r4]
 8002c38:	1cbb      	adds	r3, r7, #2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	5e9a      	ldrsh	r2, [r3, r2]
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	2100      	movs	r1, #0
 8002c42:	5e59      	ldrsh	r1, [r3, r1]
 8002c44:	1dbb      	adds	r3, r7, #6
 8002c46:	2000      	movs	r0, #0
 8002c48:	5e18      	ldrsh	r0, [r3, r0]
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	0023      	movs	r3, r4
 8002c54:	f7ff fe7b 	bl	800294e <writeLine>
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bdb0      	pop	{r4, r5, r7, pc}

08002c60 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	0005      	movs	r5, r0
 8002c68:	000c      	movs	r4, r1
 8002c6a:	0010      	movs	r0, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	1c2a      	adds	r2, r5, #0
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	1c22      	adds	r2, r4, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	1cbb      	adds	r3, r7, #2
 8002c7c:	1c02      	adds	r2, r0, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	003b      	movs	r3, r7
 8002c82:	1c0a      	adds	r2, r1, #0
 8002c84:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8002c86:	1cbb      	adds	r3, r7, #2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	2316      	movs	r3, #22
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002c96:	2314      	movs	r3, #20
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002c9e:	1cbb      	adds	r3, r7, #2
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	1c1a      	adds	r2, r3, #0
 8002ca4:	03d2      	lsls	r2, r2, #15
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	18db      	adds	r3, r3, r3
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	2312      	movs	r3, #18
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 8002cba:	230e      	movs	r3, #14
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	1cba      	adds	r2, r7, #2
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	1cbb      	adds	r3, r7, #2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	18d3      	adds	r3, r2, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b219      	sxth	r1, r3
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	881a      	ldrh	r2, [r3, #0]
 8002cd6:	1dbb      	adds	r3, r7, #6
 8002cd8:	2000      	movs	r0, #0
 8002cda:	5e1b      	ldrsh	r3, [r3, r0]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fe18 	bl	8002912 <writePixel>
    writePixel(x0  , y0-r, color);
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b219      	sxth	r1, r3
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	5e1b      	ldrsh	r3, [r3, r0]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fe09 	bl	8002912 <writePixel>
    writePixel(x0+r, y0  , color);
 8002d00:	1dbb      	adds	r3, r7, #6
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	1cbb      	adds	r3, r7, #2
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	18d3      	adds	r3, r2, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b218      	sxth	r0, r3
 8002d0e:	003b      	movs	r3, r7
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2100      	movs	r1, #0
 8002d16:	5e5b      	ldrsh	r3, [r3, r1]
 8002d18:	0019      	movs	r1, r3
 8002d1a:	f7ff fdfa 	bl	8002912 <writePixel>
    writePixel(x0-r, y0  , color);
 8002d1e:	1dbb      	adds	r3, r7, #6
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	1cbb      	adds	r3, r7, #2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	b218      	sxth	r0, r3
 8002d2c:	003b      	movs	r3, r7
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	2100      	movs	r1, #0
 8002d34:	5e5b      	ldrsh	r3, [r3, r1]
 8002d36:	0019      	movs	r1, r3
 8002d38:	f7ff fdeb 	bl	8002912 <writePixel>

    while (x<y) {
 8002d3c:	e0d1      	b.n	8002ee2 <drawCircle+0x282>
        if (f >= 0) {
 8002d3e:	2316      	movs	r3, #22
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2200      	movs	r2, #0
 8002d44:	5e9b      	ldrsh	r3, [r3, r2]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db18      	blt.n	8002d7c <drawCircle+0x11c>
            y--;
 8002d4a:	210e      	movs	r1, #14
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	2200      	movs	r2, #0
 8002d50:	5e9b      	ldrsh	r3, [r3, r2]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002d5c:	2112      	movs	r1, #18
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	3302      	adds	r3, #2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 8002d6a:	2016      	movs	r0, #22
 8002d6c:	183b      	adds	r3, r7, r0
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	5e9b      	ldrsh	r3, [r3, r2]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002d8e:	2014      	movs	r0, #20
 8002d90:	183b      	adds	r3, r7, r0
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	3302      	adds	r3, #2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 8002d9c:	2416      	movs	r4, #22
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	18d3      	adds	r3, r2, r3
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 8002dae:	1dbb      	adds	r3, r7, #6
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	000c      	movs	r4, r1
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	18d3      	adds	r3, r2, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b218      	sxth	r0, r3
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	250e      	movs	r5, #14
 8002dc4:	197b      	adds	r3, r7, r5
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b219      	sxth	r1, r3
 8002dce:	003b      	movs	r3, r7
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	f7ff fd9d 	bl	8002912 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b218      	sxth	r0, r3
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b219      	sxth	r1, r3
 8002df4:	003b      	movs	r3, r7
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	001a      	movs	r2, r3
 8002dfa:	f7ff fd8a 	bl	8002912 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8002dfe:	1dbb      	adds	r3, r7, #6
 8002e00:	881a      	ldrh	r2, [r3, #0]
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	18d3      	adds	r3, r2, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b218      	sxth	r0, r3
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	197b      	adds	r3, r7, r5
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b219      	sxth	r1, r3
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	f7ff fd77 	bl	8002912 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	193b      	adds	r3, r7, r4
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b218      	sxth	r0, r3
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	197b      	adds	r3, r7, r5
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b219      	sxth	r1, r3
 8002e40:	003b      	movs	r3, r7
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	f7ff fd64 	bl	8002912 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8002e4a:	1dbb      	adds	r3, r7, #6
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	197b      	adds	r3, r7, r5
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	18d3      	adds	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b218      	sxth	r0, r3
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	18d3      	adds	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	b219      	sxth	r1, r3
 8002e66:	003b      	movs	r3, r7
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	f7ff fd51 	bl	8002912 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	197b      	adds	r3, r7, r5
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b218      	sxth	r0, r3
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b219      	sxth	r1, r3
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	001a      	movs	r2, r3
 8002e92:	f7ff fd3e 	bl	8002912 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8002e96:	1dbb      	adds	r3, r7, #6
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	197b      	adds	r3, r7, r5
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	18d3      	adds	r3, r2, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b218      	sxth	r0, r3
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	b219      	sxth	r1, r3
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	f7ff fd2b 	bl	8002912 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8002ebc:	1dbb      	adds	r3, r7, #6
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	197b      	adds	r3, r7, r5
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	b218      	sxth	r0, r3
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b219      	sxth	r1, r3
 8002ed8:	003b      	movs	r3, r7
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	001a      	movs	r2, r3
 8002ede:	f7ff fd18 	bl	8002912 <writePixel>
    while (x<y) {
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	18fa      	adds	r2, r7, r3
 8002ee6:	230e      	movs	r3, #14
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	5e52      	ldrsh	r2, [r2, r1]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	da00      	bge.n	8002ef8 <drawCircle+0x298>
 8002ef6:	e722      	b.n	8002d3e <drawCircle+0xde>
    }
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b006      	add	sp, #24
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}

08002f00 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	0005      	movs	r5, r0
 8002f08:	000c      	movs	r4, r1
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	1dbb      	adds	r3, r7, #6
 8002f10:	1c2a      	adds	r2, r5, #0
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	1c22      	adds	r2, r4, #0
 8002f18:	801a      	strh	r2, [r3, #0]
 8002f1a:	1cbb      	adds	r3, r7, #2
 8002f1c:	1c02      	adds	r2, r0, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	003b      	movs	r3, r7
 8002f22:	1c0a      	adds	r2, r1, #0
 8002f24:	801a      	strh	r2, [r3, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b219      	sxth	r1, r3
 8002f34:	1cbb      	adds	r3, r7, #2
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	18db      	adds	r3, r3, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	003b      	movs	r3, r7
 8002f44:	881c      	ldrh	r4, [r3, #0]
 8002f46:	1dbb      	adds	r3, r7, #6
 8002f48:	2000      	movs	r0, #0
 8002f4a:	5e18      	ldrsh	r0, [r3, r0]
 8002f4c:	0023      	movs	r3, r4
 8002f4e:	f7ff fc93 	bl	8002878 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8002f52:	1cbb      	adds	r3, r7, #2
 8002f54:	2200      	movs	r2, #0
 8002f56:	5e9a      	ldrsh	r2, [r3, r2]
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5e59      	ldrsh	r1, [r3, r1]
 8002f5e:	1dbb      	adds	r3, r7, #6
 8002f60:	2000      	movs	r0, #0
 8002f62:	5e18      	ldrsh	r0, [r3, r0]
 8002f64:	003b      	movs	r3, r7
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f000 f804 	bl	8002f7c <fillCircleHelper>
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bdb0      	pop	{r4, r5, r7, pc}

08002f7c <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	0005      	movs	r5, r0
 8002f84:	000c      	movs	r4, r1
 8002f86:	0010      	movs	r0, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	1dbb      	adds	r3, r7, #6
 8002f8c:	1c2a      	adds	r2, r5, #0
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	1c22      	adds	r2, r4, #0
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	1cbb      	adds	r3, r7, #2
 8002f98:	1c02      	adds	r2, r0, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	1c7b      	adds	r3, r7, #1
 8002f9e:	1c0a      	adds	r2, r1, #0
 8002fa0:	701a      	strb	r2, [r3, #0]

    int16_t f     = 1 - r;
 8002fa2:	1cbb      	adds	r3, r7, #2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	2316      	movs	r3, #22
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002fba:	1cbb      	adds	r3, r7, #2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	1c1a      	adds	r2, r3, #0
 8002fc0:	03d2      	lsls	r2, r2, #15
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	18db      	adds	r3, r3, r3
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	2312      	movs	r3, #18
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 8002fce:	2110      	movs	r1, #16
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8002fd6:	200e      	movs	r0, #14
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	1cba      	adds	r2, r7, #2
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	187a      	adds	r2, r7, r1
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 8002fea:	230a      	movs	r3, #10
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	183a      	adds	r2, r7, r0
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 8002ff4:	2128      	movs	r1, #40	; 0x28
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	187b      	adds	r3, r7, r1
 8003004:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 8003006:	e0e7      	b.n	80031d8 <fillCircleHelper+0x25c>
        if (f >= 0) {
 8003008:	2316      	movs	r3, #22
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2200      	movs	r2, #0
 800300e:	5e9b      	ldrsh	r3, [r3, r2]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db18      	blt.n	8003046 <fillCircleHelper+0xca>
            y--;
 8003014:	210e      	movs	r1, #14
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	5e9b      	ldrsh	r3, [r3, r2]
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	187b      	adds	r3, r7, r1
 8003024:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8003026:	2112      	movs	r1, #18
 8003028:	187b      	adds	r3, r7, r1
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	3302      	adds	r3, #2
 800302e:	b29a      	uxth	r2, r3
 8003030:	187b      	adds	r3, r7, r1
 8003032:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8003034:	2016      	movs	r0, #22
 8003036:	183b      	adds	r3, r7, r0
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	187b      	adds	r3, r7, r1
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	18d3      	adds	r3, r2, r3
 8003040:	b29a      	uxth	r2, r3
 8003042:	183b      	adds	r3, r7, r0
 8003044:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8003046:	2110      	movs	r1, #16
 8003048:	187b      	adds	r3, r7, r1
 800304a:	2200      	movs	r2, #0
 800304c:	5e9b      	ldrsh	r3, [r3, r2]
 800304e:	b29b      	uxth	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	187b      	adds	r3, r7, r1
 8003056:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8003058:	2014      	movs	r0, #20
 800305a:	183b      	adds	r3, r7, r0
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	3302      	adds	r3, #2
 8003060:	b29a      	uxth	r2, r3
 8003062:	183b      	adds	r3, r7, r0
 8003064:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8003066:	2416      	movs	r4, #22
 8003068:	193b      	adds	r3, r7, r4
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	183b      	adds	r3, r7, r0
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	18d3      	adds	r3, r2, r3
 8003072:	b29a      	uxth	r2, r3
 8003074:	193b      	adds	r3, r7, r4
 8003076:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2200      	movs	r2, #0
 800307c:	5e9a      	ldrsh	r2, [r3, r2]
 800307e:	230e      	movs	r3, #14
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2100      	movs	r1, #0
 8003084:	5e5b      	ldrsh	r3, [r3, r1]
 8003086:	3301      	adds	r3, #1
 8003088:	429a      	cmp	r2, r3
 800308a:	da47      	bge.n	800311c <fillCircleHelper+0x1a0>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800308c:	1c7b      	adds	r3, r7, #1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	d01e      	beq.n	80030d4 <fillCircleHelper+0x158>
 8003096:	1dbb      	adds	r3, r7, #6
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	2310      	movs	r3, #16
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	18d3      	adds	r3, r2, r3
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b218      	sxth	r0, r3
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	881a      	ldrh	r2, [r3, #0]
 80030aa:	240e      	movs	r4, #14
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b219      	sxth	r1, r3
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	18db      	adds	r3, r3, r3
 80030bc:	b29a      	uxth	r2, r3
 80030be:	2328      	movs	r3, #40	; 0x28
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21a      	sxth	r2, r3
 80030ca:	232c      	movs	r3, #44	; 0x2c
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f7ff fbd2 	bl	8002878 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80030d4:	1c7b      	adds	r3, r7, #1
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d01e      	beq.n	800311c <fillCircleHelper+0x1a0>
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	2310      	movs	r3, #16
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b218      	sxth	r0, r3
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	240e      	movs	r4, #14
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b219      	sxth	r1, r3
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	18db      	adds	r3, r3, r3
 8003104:	b29a      	uxth	r2, r3
 8003106:	2328      	movs	r3, #40	; 0x28
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	b21a      	sxth	r2, r3
 8003112:	232c      	movs	r3, #44	; 0x2c
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f7ff fbae 	bl	8002878 <drawFastVLine>
        }
        if(y != py) {
 800311c:	230e      	movs	r3, #14
 800311e:	18fa      	adds	r2, r7, r3
 8003120:	230a      	movs	r3, #10
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2100      	movs	r1, #0
 8003126:	5e52      	ldrsh	r2, [r2, r1]
 8003128:	2100      	movs	r1, #0
 800312a:	5e5b      	ldrsh	r3, [r3, r1]
 800312c:	429a      	cmp	r2, r3
 800312e:	d04d      	beq.n	80031cc <fillCircleHelper+0x250>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003130:	1c7b      	adds	r3, r7, #1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d01e      	beq.n	8003178 <fillCircleHelper+0x1fc>
 800313a:	1dbb      	adds	r3, r7, #6
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	230a      	movs	r3, #10
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	b218      	sxth	r0, r3
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	240c      	movs	r4, #12
 8003150:	193b      	adds	r3, r7, r4
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b29b      	uxth	r3, r3
 8003158:	b219      	sxth	r1, r3
 800315a:	193b      	adds	r3, r7, r4
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	18db      	adds	r3, r3, r3
 8003160:	b29a      	uxth	r2, r3
 8003162:	2328      	movs	r3, #40	; 0x28
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	b29b      	uxth	r3, r3
 800316c:	b21a      	sxth	r2, r3
 800316e:	232c      	movs	r3, #44	; 0x2c
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f7ff fb80 	bl	8002878 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8003178:	1c7b      	adds	r3, r7, #1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d01e      	beq.n	80031c0 <fillCircleHelper+0x244>
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	230a      	movs	r3, #10
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	b218      	sxth	r0, r3
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	240c      	movs	r4, #12
 8003198:	193b      	adds	r3, r7, r4
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b219      	sxth	r1, r3
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	18db      	adds	r3, r3, r3
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	2328      	movs	r3, #40	; 0x28
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	232c      	movs	r3, #44	; 0x2c
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f7ff fb5c 	bl	8002878 <drawFastVLine>
            py = y;
 80031c0:	230a      	movs	r3, #10
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	220e      	movs	r2, #14
 80031c6:	18ba      	adds	r2, r7, r2
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 80031cc:	230c      	movs	r3, #12
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2210      	movs	r2, #16
 80031d2:	18ba      	adds	r2, r7, r2
 80031d4:	8812      	ldrh	r2, [r2, #0]
 80031d6:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 80031d8:	2310      	movs	r3, #16
 80031da:	18fa      	adds	r2, r7, r3
 80031dc:	230e      	movs	r3, #14
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2100      	movs	r1, #0
 80031e2:	5e52      	ldrsh	r2, [r2, r1]
 80031e4:	2100      	movs	r1, #0
 80031e6:	5e5b      	ldrsh	r3, [r3, r1]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	da00      	bge.n	80031ee <fillCircleHelper+0x272>
 80031ec:	e70c      	b.n	8003008 <fillCircleHelper+0x8c>
    }
}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b006      	add	sp, #24
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080031f8 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	0005      	movs	r5, r0
 8003200:	000c      	movs	r4, r1
 8003202:	0010      	movs	r0, r2
 8003204:	0019      	movs	r1, r3
 8003206:	1dbb      	adds	r3, r7, #6
 8003208:	1c2a      	adds	r2, r5, #0
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	1c22      	adds	r2, r4, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	1cbb      	adds	r3, r7, #2
 8003214:	1c02      	adds	r2, r0, #0
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	003b      	movs	r3, r7
 800321a:	1c0a      	adds	r2, r1, #0
 800321c:	801a      	strh	r2, [r3, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
#endif
    if (w < 0) {
 800321e:	1cbb      	adds	r3, r7, #2
 8003220:	2200      	movs	r2, #0
 8003222:	5e9b      	ldrsh	r3, [r3, r2]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0d      	bge.n	8003244 <fillRect+0x4c>
        w = -w;
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	425b      	negs	r3, r3
 800322e:	b29a      	uxth	r2, r3
 8003230:	1cbb      	adds	r3, r7, #2
 8003232:	801a      	strh	r2, [r3, #0]
        x -= w;
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	1cbb      	adds	r3, r7, #2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	b29a      	uxth	r2, r3
 8003240:	1dbb      	adds	r3, r7, #6
 8003242:	801a      	strh	r2, [r3, #0]
    }                           //+ve w
    end = x + w;
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	1cbb      	adds	r3, r7, #2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	18d3      	adds	r3, r2, r3
 800324e:	b29a      	uxth	r2, r3
 8003250:	230e      	movs	r3, #14
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	801a      	strh	r2, [r3, #0]
    if (x < 0)
 8003256:	1dbb      	adds	r3, r7, #6
 8003258:	2200      	movs	r2, #0
 800325a:	5e9b      	ldrsh	r3, [r3, r2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da02      	bge.n	8003266 <fillRect+0x6e>
        x = 0;
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	2200      	movs	r2, #0
 8003264:	801a      	strh	r2, [r3, #0]
    if (end > width())
 8003266:	230e      	movs	r3, #14
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2400      	movs	r4, #0
 800326c:	5f1c      	ldrsh	r4, [r3, r4]
 800326e:	f7fd fa41 	bl	80006f4 <width>
 8003272:	0003      	movs	r3, r0
 8003274:	429c      	cmp	r4, r3
 8003276:	dd06      	ble.n	8003286 <fillRect+0x8e>
        end = width();
 8003278:	f7fd fa3c 	bl	80006f4 <width>
 800327c:	0003      	movs	r3, r0
 800327e:	001a      	movs	r2, r3
 8003280:	230e      	movs	r3, #14
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	801a      	strh	r2, [r3, #0]
    w = end - x;
 8003286:	230e      	movs	r3, #14
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	1dbb      	adds	r3, r7, #6
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b29a      	uxth	r2, r3
 8003294:	1cbb      	adds	r3, r7, #2
 8003296:	801a      	strh	r2, [r3, #0]
    if (h < 0) {
 8003298:	003b      	movs	r3, r7
 800329a:	2200      	movs	r2, #0
 800329c:	5e9b      	ldrsh	r3, [r3, r2]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0d      	bge.n	80032be <fillRect+0xc6>
        h = -h;
 80032a2:	003b      	movs	r3, r7
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	425b      	negs	r3, r3
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	003b      	movs	r3, r7
 80032ac:	801a      	strh	r2, [r3, #0]
        y -= h;
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	003b      	movs	r3, r7
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	801a      	strh	r2, [r3, #0]
    }                           //+ve h
    end = y + h;
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	003b      	movs	r3, r7
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	18d3      	adds	r3, r2, r3
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	230e      	movs	r3, #14
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	801a      	strh	r2, [r3, #0]
    if (y < 0)
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	5e9b      	ldrsh	r3, [r3, r2]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da02      	bge.n	80032e0 <fillRect+0xe8>
        y = 0;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2200      	movs	r2, #0
 80032de:	801a      	strh	r2, [r3, #0]
    if (end > height())
 80032e0:	230e      	movs	r3, #14
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2400      	movs	r4, #0
 80032e6:	5f1c      	ldrsh	r4, [r3, r4]
 80032e8:	f7fd fa0e 	bl	8000708 <height>
 80032ec:	0003      	movs	r3, r0
 80032ee:	429c      	cmp	r4, r3
 80032f0:	dd06      	ble.n	8003300 <fillRect+0x108>
        end = height();
 80032f2:	f7fd fa09 	bl	8000708 <height>
 80032f6:	0003      	movs	r3, r0
 80032f8:	001a      	movs	r2, r3
 80032fa:	230e      	movs	r3, #14
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	801a      	strh	r2, [r3, #0]
    h = end - y;
 8003300:	230e      	movs	r3, #14
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	b29a      	uxth	r2, r3
 800330e:	003b      	movs	r3, r7
 8003310:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	b21c      	sxth	r4, r3
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	881a      	ldrh	r2, [r3, #0]
 8003328:	003b      	movs	r3, r7
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	b21a      	sxth	r2, r3
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	2100      	movs	r1, #0
 800333a:	5e59      	ldrsh	r1, [r3, r1]
 800333c:	1dbb      	adds	r3, r7, #6
 800333e:	2000      	movs	r0, #0
 8003340:	5e18      	ldrsh	r0, [r3, r0]
 8003342:	0013      	movs	r3, r2
 8003344:	0022      	movs	r2, r4
 8003346:	f7fe ff73 	bl	8002230 <setAddrWindow>
    CS_ACTIVE;
 800334a:	4b78      	ldr	r3, [pc, #480]	; (800352c <fillRect+0x334>)
 800334c:	2101      	movs	r1, #1
 800334e:	0018      	movs	r0, r3
 8003350:	f7fd f970 	bl	8000634 <PIN_LOW>
    WriteCmd(_MW);
 8003354:	2390      	movs	r3, #144	; 0x90
 8003356:	05db      	lsls	r3, r3, #23
 8003358:	2110      	movs	r1, #16
 800335a:	0018      	movs	r0, r3
 800335c:	f7fd f96a 	bl	8000634 <PIN_LOW>
 8003360:	4b73      	ldr	r3, [pc, #460]	; (8003530 <fillRect+0x338>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	b29a      	uxth	r2, r3
 8003368:	210d      	movs	r1, #13
 800336a:	187b      	adds	r3, r7, r1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <fillRect+0x338>)
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	240c      	movs	r4, #12
 8003374:	193b      	adds	r3, r7, r4
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	2390      	movs	r3, #144	; 0x90
 800337a:	05db      	lsls	r3, r3, #23
 800337c:	22e0      	movs	r2, #224	; 0xe0
 800337e:	04d2      	lsls	r2, r2, #19
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <fillRect+0x334>)
 8003384:	2287      	movs	r2, #135	; 0x87
 8003386:	04d2      	lsls	r2, r2, #19
 8003388:	619a      	str	r2, [r3, #24]
 800338a:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <fillRect+0x33c>)
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	0412      	lsls	r2, r2, #16
 8003390:	619a      	str	r2, [r3, #24]
 8003392:	0008      	movs	r0, r1
 8003394:	183b      	adds	r3, r7, r0
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	025a      	lsls	r2, r3, #9
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	401a      	ands	r2, r3
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	0219      	lsls	r1, r3, #8
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	400b      	ands	r3, r1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	0059      	lsls	r1, r3, #1
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	400b      	ands	r3, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	2390      	movs	r3, #144	; 0x90
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	619a      	str	r2, [r3, #24]
 80033c2:	183b      	adds	r3, r7, r0
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2208      	movs	r2, #8
 80033c8:	401a      	ands	r2, r3
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2120      	movs	r1, #32
 80033d2:	400b      	ands	r3, r1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	183b      	adds	r3, r7, r0
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	105b      	asrs	r3, r3, #1
 80033dc:	2110      	movs	r1, #16
 80033de:	400b      	ands	r3, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	0119      	lsls	r1, r3, #4
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	400b      	ands	r3, r1
 80033ee:	431a      	orrs	r2, r3
 80033f0:	4b4e      	ldr	r3, [pc, #312]	; (800352c <fillRect+0x334>)
 80033f2:	619a      	str	r2, [r3, #24]
 80033f4:	183b      	adds	r3, r7, r0
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	0019      	movs	r1, r3
 80033fc:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <fillRect+0x33c>)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	400a      	ands	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
 8003404:	2390      	movs	r3, #144	; 0x90
 8003406:	05db      	lsls	r3, r3, #23
 8003408:	2102      	movs	r1, #2
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd f912 	bl	8000634 <PIN_LOW>
 8003410:	2390      	movs	r3, #144	; 0x90
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	2102      	movs	r1, #2
 8003416:	0018      	movs	r0, r3
 8003418:	f7fd f91e 	bl	8000658 <PIN_HIGH>
 800341c:	2390      	movs	r3, #144	; 0x90
 800341e:	05db      	lsls	r3, r3, #23
 8003420:	2102      	movs	r1, #2
 8003422:	0018      	movs	r0, r3
 8003424:	f7fd f918 	bl	8000658 <PIN_HIGH>
 8003428:	2390      	movs	r3, #144	; 0x90
 800342a:	05db      	lsls	r3, r3, #23
 800342c:	22e0      	movs	r2, #224	; 0xe0
 800342e:	04d2      	lsls	r2, r2, #19
 8003430:	619a      	str	r2, [r3, #24]
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <fillRect+0x334>)
 8003434:	2287      	movs	r2, #135	; 0x87
 8003436:	04d2      	lsls	r2, r2, #19
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <fillRect+0x33c>)
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	0412      	lsls	r2, r2, #16
 8003440:	619a      	str	r2, [r3, #24]
 8003442:	193b      	adds	r3, r7, r4
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	025a      	lsls	r2, r3, #9
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	401a      	ands	r2, r3
 800344e:	193b      	adds	r3, r7, r4
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0219      	lsls	r1, r3, #8
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	400b      	ands	r3, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	193b      	adds	r3, r7, r4
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	0059      	lsls	r1, r3, #1
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	400b      	ands	r3, r1
 8003468:	431a      	orrs	r2, r3
 800346a:	2390      	movs	r3, #144	; 0x90
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	619a      	str	r2, [r3, #24]
 8003470:	0020      	movs	r0, r4
 8003472:	183b      	adds	r3, r7, r0
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	401a      	ands	r2, r3
 800347a:	183b      	adds	r3, r7, r0
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2120      	movs	r1, #32
 8003482:	400b      	ands	r3, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	183b      	adds	r3, r7, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	105b      	asrs	r3, r3, #1
 800348c:	2110      	movs	r1, #16
 800348e:	400b      	ands	r3, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	183b      	adds	r3, r7, r0
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	0119      	lsls	r1, r3, #4
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	400b      	ands	r3, r1
 800349e:	431a      	orrs	r2, r3
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <fillRect+0x334>)
 80034a2:	619a      	str	r2, [r3, #24]
 80034a4:	183b      	adds	r3, r7, r0
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	0019      	movs	r1, r3
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <fillRect+0x33c>)
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	400a      	ands	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	2390      	movs	r3, #144	; 0x90
 80034b6:	05db      	lsls	r3, r3, #23
 80034b8:	2102      	movs	r1, #2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7fd f8ba 	bl	8000634 <PIN_LOW>
 80034c0:	2390      	movs	r3, #144	; 0x90
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	2102      	movs	r1, #2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7fd f8c6 	bl	8000658 <PIN_HIGH>
 80034cc:	2390      	movs	r3, #144	; 0x90
 80034ce:	05db      	lsls	r3, r3, #23
 80034d0:	2102      	movs	r1, #2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fd f8c0 	bl	8000658 <PIN_HIGH>
 80034d8:	2390      	movs	r3, #144	; 0x90
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	2110      	movs	r1, #16
 80034de:	0018      	movs	r0, r3
 80034e0:	f7fd f8ba 	bl	8000658 <PIN_HIGH>
    if (h > w) {
 80034e4:	003a      	movs	r2, r7
 80034e6:	1cbb      	adds	r3, r7, #2
 80034e8:	2100      	movs	r1, #0
 80034ea:	5e52      	ldrsh	r2, [r2, r1]
 80034ec:	2100      	movs	r1, #0
 80034ee:	5e5b      	ldrsh	r3, [r3, r1]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	dd0c      	ble.n	800350e <fillRect+0x316>
        end = h;
 80034f4:	210e      	movs	r1, #14
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	003a      	movs	r2, r7
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	801a      	strh	r2, [r3, #0]
        h = w;
 80034fe:	003b      	movs	r3, r7
 8003500:	1cba      	adds	r2, r7, #2
 8003502:	8812      	ldrh	r2, [r2, #0]
 8003504:	801a      	strh	r2, [r3, #0]
        w = end;
 8003506:	1cbb      	adds	r3, r7, #2
 8003508:	187a      	adds	r2, r7, r1
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	801a      	strh	r2, [r3, #0]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 800350e:	2120      	movs	r1, #32
 8003510:	187b      	adds	r3, r7, r1
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	b29a      	uxth	r2, r3
 8003518:	230b      	movs	r3, #11
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	230a      	movs	r3, #10
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	187a      	adds	r2, r7, r1
 8003524:	8812      	ldrh	r2, [r2, #0]
 8003526:	701a      	strb	r2, [r3, #0]
    while (h-- > 0) {
 8003528:	e0c8      	b.n	80036bc <fillRect+0x4c4>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	48000400 	.word	0x48000400
 8003530:	2000007e 	.word	0x2000007e
 8003534:	48000800 	.word	0x48000800
        end = w;
 8003538:	230e      	movs	r3, #14
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	1cba      	adds	r2, r7, #2
 800353e:	8812      	ldrh	r2, [r2, #0]
 8003540:	801a      	strh	r2, [r3, #0]

        do {
            write8(hi);
 8003542:	2390      	movs	r3, #144	; 0x90
 8003544:	05db      	lsls	r3, r3, #23
 8003546:	22e0      	movs	r2, #224	; 0xe0
 8003548:	04d2      	lsls	r2, r2, #19
 800354a:	619a      	str	r2, [r3, #24]
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <fillRect+0x530>)
 800354e:	2287      	movs	r2, #135	; 0x87
 8003550:	04d2      	lsls	r2, r2, #19
 8003552:	619a      	str	r2, [r3, #24]
 8003554:	4b75      	ldr	r3, [pc, #468]	; (800372c <fillRect+0x534>)
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0412      	lsls	r2, r2, #16
 800355a:	619a      	str	r2, [r3, #24]
 800355c:	200b      	movs	r0, #11
 800355e:	183b      	adds	r3, r7, r0
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	025a      	lsls	r2, r3, #9
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	401a      	ands	r2, r3
 800356a:	183b      	adds	r3, r7, r0
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	0219      	lsls	r1, r3, #8
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	400b      	ands	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	183b      	adds	r3, r7, r0
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	0059      	lsls	r1, r3, #1
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	400b      	ands	r3, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	2390      	movs	r3, #144	; 0x90
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	619a      	str	r2, [r3, #24]
 800358c:	183b      	adds	r3, r7, r0
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	401a      	ands	r2, r3
 8003594:	183b      	adds	r3, r7, r0
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2120      	movs	r1, #32
 800359c:	400b      	ands	r3, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	183b      	adds	r3, r7, r0
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	105b      	asrs	r3, r3, #1
 80035a6:	2110      	movs	r1, #16
 80035a8:	400b      	ands	r3, r1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	183b      	adds	r3, r7, r0
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	0119      	lsls	r1, r3, #4
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	400b      	ands	r3, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <fillRect+0x530>)
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	183b      	adds	r3, r7, r0
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	0019      	movs	r1, r3
 80035c6:	4b59      	ldr	r3, [pc, #356]	; (800372c <fillRect+0x534>)
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	400a      	ands	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
 80035ce:	2390      	movs	r3, #144	; 0x90
 80035d0:	05db      	lsls	r3, r3, #23
 80035d2:	2102      	movs	r1, #2
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fd f82d 	bl	8000634 <PIN_LOW>
 80035da:	2390      	movs	r3, #144	; 0x90
 80035dc:	05db      	lsls	r3, r3, #23
 80035de:	2102      	movs	r1, #2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fd f839 	bl	8000658 <PIN_HIGH>
 80035e6:	2390      	movs	r3, #144	; 0x90
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	2102      	movs	r1, #2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7fd f833 	bl	8000658 <PIN_HIGH>
            write8(lo);
 80035f2:	2390      	movs	r3, #144	; 0x90
 80035f4:	05db      	lsls	r3, r3, #23
 80035f6:	22e0      	movs	r2, #224	; 0xe0
 80035f8:	04d2      	lsls	r2, r2, #19
 80035fa:	619a      	str	r2, [r3, #24]
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <fillRect+0x530>)
 80035fe:	2287      	movs	r2, #135	; 0x87
 8003600:	04d2      	lsls	r2, r2, #19
 8003602:	619a      	str	r2, [r3, #24]
 8003604:	4b49      	ldr	r3, [pc, #292]	; (800372c <fillRect+0x534>)
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	0412      	lsls	r2, r2, #16
 800360a:	619a      	str	r2, [r3, #24]
 800360c:	200a      	movs	r0, #10
 800360e:	183b      	adds	r3, r7, r0
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	025a      	lsls	r2, r3, #9
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	401a      	ands	r2, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	0219      	lsls	r1, r3, #8
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	400b      	ands	r3, r1
 8003626:	431a      	orrs	r2, r3
 8003628:	183b      	adds	r3, r7, r0
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	0059      	lsls	r1, r3, #1
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	400b      	ands	r3, r1
 8003634:	431a      	orrs	r2, r3
 8003636:	2390      	movs	r3, #144	; 0x90
 8003638:	05db      	lsls	r3, r3, #23
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	183b      	adds	r3, r7, r0
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2208      	movs	r2, #8
 8003642:	401a      	ands	r2, r3
 8003644:	183b      	adds	r3, r7, r0
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2120      	movs	r1, #32
 800364c:	400b      	ands	r3, r1
 800364e:	431a      	orrs	r2, r3
 8003650:	183b      	adds	r3, r7, r0
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	105b      	asrs	r3, r3, #1
 8003656:	2110      	movs	r1, #16
 8003658:	400b      	ands	r3, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	183b      	adds	r3, r7, r0
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	0119      	lsls	r1, r3, #4
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	400b      	ands	r3, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <fillRect+0x530>)
 800366c:	619a      	str	r2, [r3, #24]
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	019b      	lsls	r3, r3, #6
 8003674:	0019      	movs	r1, r3
 8003676:	4b2d      	ldr	r3, [pc, #180]	; (800372c <fillRect+0x534>)
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	400a      	ands	r2, r1
 800367c:	619a      	str	r2, [r3, #24]
 800367e:	2390      	movs	r3, #144	; 0x90
 8003680:	05db      	lsls	r3, r3, #23
 8003682:	2102      	movs	r1, #2
 8003684:	0018      	movs	r0, r3
 8003686:	f7fc ffd5 	bl	8000634 <PIN_LOW>
 800368a:	2390      	movs	r3, #144	; 0x90
 800368c:	05db      	lsls	r3, r3, #23
 800368e:	2102      	movs	r1, #2
 8003690:	0018      	movs	r0, r3
 8003692:	f7fc ffe1 	bl	8000658 <PIN_HIGH>
 8003696:	2390      	movs	r3, #144	; 0x90
 8003698:	05db      	lsls	r3, r3, #23
 800369a:	2102      	movs	r1, #2
 800369c:	0018      	movs	r0, r3
 800369e:	f7fc ffdb 	bl	8000658 <PIN_HIGH>
        } while (--end != 0);
 80036a2:	210e      	movs	r1, #14
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	2200      	movs	r2, #0
 80036b4:	5e9b      	ldrsh	r3, [r3, r2]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d000      	beq.n	80036bc <fillRect+0x4c4>
 80036ba:	e742      	b.n	8003542 <fillRect+0x34a>
    while (h-- > 0) {
 80036bc:	003b      	movs	r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	5e9b      	ldrsh	r3, [r3, r2]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	3a01      	subs	r2, #1
 80036c6:	b291      	uxth	r1, r2
 80036c8:	003a      	movs	r2, r7
 80036ca:	8011      	strh	r1, [r2, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dd00      	ble.n	80036d2 <fillRect+0x4da>
 80036d0:	e732      	b.n	8003538 <fillRect+0x340>
    }
    CS_IDLE;
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <fillRect+0x530>)
 80036d4:	2101      	movs	r1, #1
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fc ffbe 	bl	8000658 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <fillRect+0x538>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	001a      	movs	r2, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00a      	beq.n	80036fe <fillRect+0x506>
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <fillRect+0x53c>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <fillRect+0x540>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d116      	bne.n	8003720 <fillRect+0x528>
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <fillRect+0x544>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	001a      	movs	r2, r3
 80036f8:	2301      	movs	r3, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d010      	beq.n	8003720 <fillRect+0x528>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80036fe:	f7fc fff9 	bl	80006f4 <width>
 8003702:	0003      	movs	r3, r0
 8003704:	3b01      	subs	r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	b21c      	sxth	r4, r3
 800370a:	f7fc fffd 	bl	8000708 <height>
 800370e:	0003      	movs	r3, r0
 8003710:	3b01      	subs	r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	b21b      	sxth	r3, r3
 8003716:	0022      	movs	r2, r4
 8003718:	2100      	movs	r1, #0
 800371a:	2000      	movs	r0, #0
 800371c:	f7fe fd88 	bl	8002230 <setAddrWindow>
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bdb0      	pop	{r4, r5, r7, pc}
 8003728:	48000400 	.word	0x48000400
 800372c:	48000800 	.word	0x48000800
 8003730:	20000080 	.word	0x20000080
 8003734:	2000008e 	.word	0x2000008e
 8003738:	00001526 	.word	0x00001526
 800373c:	20000031 	.word	0x20000031

08003740 <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fe ffd1 	bl	80026ec <fillScreen>
    fillScreen(RED);
 800374a:	23f8      	movs	r3, #248	; 0xf8
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	0018      	movs	r0, r3
 8003750:	f7fe ffcc 	bl	80026ec <fillScreen>
    fillScreen(GREEN);
 8003754:	23fc      	movs	r3, #252	; 0xfc
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	0018      	movs	r0, r3
 800375a:	f7fe ffc7 	bl	80026ec <fillScreen>
    fillScreen(BLUE);
 800375e:	201f      	movs	r0, #31
 8003760:	f7fe ffc4 	bl	80026ec <fillScreen>
    fillScreen(BLACK);
 8003764:	2000      	movs	r0, #0
 8003766:	f7fe ffc1 	bl	80026ec <fillScreen>
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <testLines>:

void testLines(uint16_t color)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b08b      	sub	sp, #44	; 0x2c
 8003774:	af02      	add	r7, sp, #8
 8003776:	0002      	movs	r2, r0
 8003778:	1dbb      	adds	r3, r7, #6
 800377a:	801a      	strh	r2, [r3, #0]
    int           x1, y1, x2, y2,
                  w = width(),
 800377c:	f7fc ffba 	bl	80006f4 <width>
 8003780:	0003      	movs	r3, r0
 8003782:	617b      	str	r3, [r7, #20]
                  h = height();
 8003784:	f7fc ffc0 	bl	8000708 <height>
 8003788:	0003      	movs	r3, r0
 800378a:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fe ffad 	bl	80026ec <fillScreen>

    x1 = y1 = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e010      	b.n	80037c8 <testLines+0x58>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	b218      	sxth	r0, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	b219      	sxth	r1, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	b21a      	sxth	r2, r3
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	b21c      	sxth	r4, r3
 80037b6:	1dbb      	adds	r3, r7, #6
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	0023      	movs	r3, r4
 80037be:	f7ff f9bf 	bl	8002b40 <drawLine>
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3306      	adds	r3, #6
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dbea      	blt.n	80037a6 <testLines+0x36>
    x2    = w - 1;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e010      	b.n	80037fe <testLines+0x8e>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	b218      	sxth	r0, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	b219      	sxth	r1, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	b21c      	sxth	r4, r3
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	0023      	movs	r3, r4
 80037f4:	f7ff f9a4 	bl	8002b40 <drawLine>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3306      	adds	r3, #6
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbea      	blt.n	80037dc <testLines+0x6c>

    fillScreen(BLACK);
 8003806:	2000      	movs	r0, #0
 8003808:	f7fe ff70 	bl	80026ec <fillScreen>

    x1    = w - 1;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3b01      	subs	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3b01      	subs	r3, #1
 800381a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	e010      	b.n	8003844 <testLines+0xd4>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	b218      	sxth	r0, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	b219      	sxth	r1, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	b21a      	sxth	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	b21c      	sxth	r4, r3
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	0023      	movs	r3, r4
 800383a:	f7ff f981 	bl	8002b40 <drawLine>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3306      	adds	r3, #6
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	dbea      	blt.n	8003822 <testLines+0xb2>
    x2    = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e010      	b.n	8003878 <testLines+0x108>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	b218      	sxth	r0, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	b219      	sxth	r1, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	b21a      	sxth	r2, r3
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	b21c      	sxth	r4, r3
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	0023      	movs	r3, r4
 800386e:	f7ff f967 	bl	8002b40 <drawLine>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3306      	adds	r3, #6
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	429a      	cmp	r2, r3
 800387e:	dbea      	blt.n	8003856 <testLines+0xe6>

    fillScreen(BLACK);
 8003880:	2000      	movs	r0, #0
 8003882:	f7fe ff33 	bl	80026ec <fillScreen>

    x1    = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e010      	b.n	80038bc <testLines+0x14c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	b218      	sxth	r0, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	b219      	sxth	r1, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	b21c      	sxth	r4, r3
 80038aa:	1dbb      	adds	r3, r7, #6
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	0023      	movs	r3, r4
 80038b2:	f7ff f945 	bl	8002b40 <drawLine>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3306      	adds	r3, #6
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dbea      	blt.n	800389a <testLines+0x12a>
    x2    = w - 1;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e010      	b.n	80038f2 <testLines+0x182>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	b218      	sxth	r0, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	b219      	sxth	r1, r3
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	b21a      	sxth	r2, r3
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	b21c      	sxth	r4, r3
 80038e0:	1dbb      	adds	r3, r7, #6
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	0023      	movs	r3, r4
 80038e8:	f7ff f92a 	bl	8002b40 <drawLine>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	3306      	adds	r3, #6
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dbea      	blt.n	80038d0 <testLines+0x160>

    fillScreen(BLACK);
 80038fa:	2000      	movs	r0, #0
 80038fc:	f7fe fef6 	bl	80026ec <fillScreen>

    x1    = w - 1;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3b01      	subs	r3, #1
 8003904:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3b01      	subs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e010      	b.n	8003938 <testLines+0x1c8>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	b218      	sxth	r0, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	b219      	sxth	r1, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	b21a      	sxth	r2, r3
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	b21c      	sxth	r4, r3
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	0023      	movs	r3, r4
 800392e:	f7ff f907 	bl	8002b40 <drawLine>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3306      	adds	r3, #6
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	dbea      	blt.n	8003916 <testLines+0x1a6>
    x2    = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e010      	b.n	800396c <testLines+0x1fc>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	b218      	sxth	r0, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	b219      	sxth	r1, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	b21a      	sxth	r2, r3
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	b21c      	sxth	r4, r3
 800395a:	1dbb      	adds	r3, r7, #6
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	0023      	movs	r3, r4
 8003962:	f7ff f8ed 	bl	8002b40 <drawLine>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	3306      	adds	r3, #6
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	dbea      	blt.n	800394a <testLines+0x1da>

}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b009      	add	sp, #36	; 0x24
 800397a:	bd90      	pop	{r4, r7, pc}

0800397c <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	0002      	movs	r2, r0
 8003984:	1dbb      	adds	r3, r7, #6
 8003986:	801a      	strh	r2, [r3, #0]
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	1c0a      	adds	r2, r1, #0
 800398c:	801a      	strh	r2, [r3, #0]
    int           x, y, w = width(), h = height();
 800398e:	f7fc feb1 	bl	80006f4 <width>
 8003992:	0003      	movs	r3, r0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	f7fc feb7 	bl	8000708 <height>
 800399a:	0003      	movs	r3, r0
 800399c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800399e:	2000      	movs	r0, #0
 80039a0:	f7fe fea4 	bl	80026ec <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e00b      	b.n	80039c2 <testFastLines+0x46>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	b219      	sxth	r1, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	1dbb      	adds	r3, r7, #6
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7fe ff85 	bl	80028c6 <drawFastHLine>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3305      	adds	r3, #5
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dbef      	blt.n	80039aa <testFastLines+0x2e>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e00b      	b.n	80039e8 <testFastLines+0x6c>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	b218      	sxth	r0, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	b21a      	sxth	r2, r3
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	2100      	movs	r1, #0
 80039de:	f7fe ff4b 	bl	8002878 <drawFastVLine>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	3305      	adds	r3, #5
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	dbef      	blt.n	80039d0 <testFastLines+0x54>
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	1dfb      	adds	r3, r7, #7
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	1c0a      	adds	r2, r1, #0
 8003a08:	801a      	strh	r2, [r3, #0]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8003a0a:	f7fc fe73 	bl	80006f4 <width>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	f7fc fe79 	bl	8000708 <height>
 8003a16:	0003      	movs	r3, r0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fe fe62 	bl	80026ec <fillScreen>
    for (x = radius; x < w; x += r2) {
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e01a      	b.n	8003a66 <testFilledCircles+0x6e>
        for (y = radius; y < h; y += r2) {
 8003a30:	1dfb      	adds	r3, r7, #7
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e00e      	b.n	8003a56 <testFilledCircles+0x5e>
            fillCircle(x, y, radius, color);
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	b218      	sxth	r0, r3
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	b219      	sxth	r1, r3
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	f7ff fa59 	bl	8002f00 <fillCircle>
        for (y = radius; y < h; y += r2) {
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dbec      	blt.n	8003a38 <testFilledCircles+0x40>
    for (x = radius; x < w; x += r2) {
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	18d3      	adds	r3, r2, r3
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	dbe0      	blt.n	8003a30 <testFilledCircles+0x38>
        }
    }

}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b008      	add	sp, #32
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	1c0a      	adds	r2, r1, #0
 8003a86:	801a      	strh	r2, [r3, #0]
    int           x, y, r2 = radius * 2,
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8003a90:	f7fc fe30 	bl	80006f4 <width>
 8003a94:	0003      	movs	r3, r0
 8003a96:	001a      	movs	r2, r3
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	18d3      	adds	r3, r2, r3
 8003a9e:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8003aa0:	f7fc fe32 	bl	8000708 <height>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e019      	b.n	8003aea <testCircles+0x74>
        for (y = 0; y < h; y += r2) {
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e00e      	b.n	8003ada <testCircles+0x64>
            drawCircle(x, y, radius, color);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	b218      	sxth	r0, r3
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	b219      	sxth	r1, r3
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b21a      	sxth	r2, r3
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	f7ff f8c7 	bl	8002c60 <drawCircle>
        for (y = 0; y < h; y += r2) {
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	dbec      	blt.n	8003abc <testCircles+0x46>
    for (x = 0; x < w; x += r2) {
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	18d3      	adds	r3, r2, r3
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	dbe1      	blt.n	8003ab6 <testCircles+0x40>
        }
    }

}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b008      	add	sp, #32
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003afe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b02:	490e      	ldr	r1, [pc, #56]	; (8003b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b04:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <LoopForever+0xe>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b08:	e002      	b.n	8003b10 <LoopCopyDataInit>

08003b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0e:	3304      	adds	r3, #4

08003b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b14:	d3f9      	bcc.n	8003b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b18:	4c0b      	ldr	r4, [pc, #44]	; (8003b48 <LoopForever+0x16>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b1c:	e001      	b.n	8003b22 <LoopFillZerobss>

08003b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b20:	3204      	adds	r2, #4

08003b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b24:	d3fb      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b26:	f7fc fd6a 	bl	80005fe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003b2a:	f001 fa8f 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b2e:	f7fc fb77 	bl	8000220 <main>

08003b32 <LoopForever>:

LoopForever:
    b LoopForever
 8003b32:	e7fe      	b.n	8003b32 <LoopForever>
  ldr   r0, =_estack
 8003b34:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003b40:	08005144 	.word	0x08005144
  ldr r2, =_sbss
 8003b44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003b48:	2000009c 	.word	0x2000009c

08003b4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC1_COMP_IRQHandler>
	...

08003b50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <HAL_Init+0x24>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_Init+0x24>)
 8003b5a:	2110      	movs	r1, #16
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003b60:	2000      	movs	r0, #0
 8003b62:	f000 f809 	bl	8003b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b66:	f7fc fced 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40022000 	.word	0x40022000

08003b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_InitTick+0x5c>)
 8003b82:	681c      	ldr	r4, [r3, #0]
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <HAL_InitTick+0x60>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	0019      	movs	r1, r3
 8003b8a:	23fa      	movs	r3, #250	; 0xfa
 8003b8c:	0098      	lsls	r0, r3, #2
 8003b8e:	f7fc fabb 	bl	8000108 <__udivsi3>
 8003b92:	0003      	movs	r3, r0
 8003b94:	0019      	movs	r1, r3
 8003b96:	0020      	movs	r0, r4
 8003b98:	f7fc fab6 	bl	8000108 <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f903 	bl	8003daa <HAL_SYSTICK_Config>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00f      	b.n	8003bcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d80b      	bhi.n	8003bca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	425b      	negs	r3, r3
 8003bb8:	2200      	movs	r2, #0
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 f8e0 	bl	8003d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_InitTick+0x64>)
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b003      	add	sp, #12
 8003bd2:	bd90      	pop	{r4, r7, pc}
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	20000008 	.word	0x20000008

08003be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_IncTick+0x1c>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	001a      	movs	r2, r3
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_IncTick+0x20>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	18d2      	adds	r2, r2, r3
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_IncTick+0x20>)
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	2000000c 	.word	0x2000000c
 8003c00:	20000098 	.word	0x20000098

08003c04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <HAL_GetTick+0x10>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000098 	.word	0x20000098

08003c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff fff0 	bl	8003c04 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	d005      	beq.n	8003c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_Delay+0x40>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	001a      	movs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	f7ff ffe0 	bl	8003c04 <HAL_GetTick>
 8003c44:	0002      	movs	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d8f7      	bhi.n	8003c40 <HAL_Delay+0x28>
  {
  }
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c70:	d828      	bhi.n	8003cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <__NVIC_SetPriority+0xd4>)
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	33c0      	adds	r3, #192	; 0xc0
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	589b      	ldr	r3, [r3, r2]
 8003c82:	1dfa      	adds	r2, r7, #7
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	0011      	movs	r1, r2
 8003c88:	2203      	movs	r2, #3
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	00d2      	lsls	r2, r2, #3
 8003c8e:	21ff      	movs	r1, #255	; 0xff
 8003c90:	4091      	lsls	r1, r2
 8003c92:	000a      	movs	r2, r1
 8003c94:	43d2      	mvns	r2, r2
 8003c96:	401a      	ands	r2, r3
 8003c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	2303      	movs	r3, #3
 8003caa:	4003      	ands	r3, r0
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cb0:	481f      	ldr	r0, [pc, #124]	; (8003d30 <__NVIC_SetPriority+0xd4>)
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	33c0      	adds	r3, #192	; 0xc0
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cc2:	e031      	b.n	8003d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <__NVIC_SetPriority+0xd8>)
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0019      	movs	r1, r3
 8003ccc:	230f      	movs	r3, #15
 8003cce:	400b      	ands	r3, r1
 8003cd0:	3b08      	subs	r3, #8
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	3304      	adds	r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	1dfa      	adds	r2, r7, #7
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	00d2      	lsls	r2, r2, #3
 8003cea:	21ff      	movs	r1, #255	; 0xff
 8003cec:	4091      	lsls	r1, r2
 8003cee:	000a      	movs	r2, r1
 8003cf0:	43d2      	mvns	r2, r2
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	22ff      	movs	r2, #255	; 0xff
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	2303      	movs	r3, #3
 8003d06:	4003      	ands	r3, r0
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d0c:	4809      	ldr	r0, [pc, #36]	; (8003d34 <__NVIC_SetPriority+0xd8>)
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	001c      	movs	r4, r3
 8003d14:	230f      	movs	r3, #15
 8003d16:	4023      	ands	r3, r4
 8003d18:	3b08      	subs	r3, #8
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	3306      	adds	r3, #6
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	18c3      	adds	r3, r0, r3
 8003d24:	3304      	adds	r3, #4
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b003      	add	sp, #12
 8003d2e:	bd90      	pop	{r4, r7, pc}
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <SysTick_Config+0x40>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e010      	b.n	8003d70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <SysTick_Config+0x44>)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	3a01      	subs	r2, #1
 8003d54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	2301      	movs	r3, #1
 8003d58:	425b      	negs	r3, r3
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff ff7d 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <SysTick_Config+0x44>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <SysTick_Config+0x44>)
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	00ffffff 	.word	0x00ffffff
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	1c02      	adds	r2, r0, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7ff ffbf 	bl	8003d38 <SysTick_Config>
 8003dba:	0003      	movs	r3, r0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd2:	e155      	b.n	8004080 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4091      	lsls	r1, r2
 8003dde:	000a      	movs	r2, r1
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d100      	bne.n	8003dec <HAL_GPIO_Init+0x28>
 8003dea:	e146      	b.n	800407a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d00b      	beq.n	8003e0c <HAL_GPIO_Init+0x48>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d007      	beq.n	8003e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e00:	2b11      	cmp	r3, #17
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b12      	cmp	r3, #18
 8003e0a:	d130      	bne.n	8003e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	0013      	movs	r3, r2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e42:	2201      	movs	r2, #1
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
 8003e48:	0013      	movs	r3, r2
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	2201      	movs	r2, #1
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	0013      	movs	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0xea>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b12      	cmp	r3, #18
 8003eac:	d123      	bne.n	8003ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	08da      	lsrs	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	58d3      	ldr	r3, [r2, r3]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	0013      	movs	r3, r2
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2107      	movs	r1, #7
 8003eda:	400b      	ands	r3, r1
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	08da      	lsrs	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3208      	adds	r2, #8
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	409a      	lsls	r2, r3
 8003f04:	0013      	movs	r3, r2
 8003f06:	43da      	mvns	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2203      	movs	r2, #3
 8003f14:	401a      	ands	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	055b      	lsls	r3, r3, #21
 8003f32:	4013      	ands	r3, r2
 8003f34:	d100      	bne.n	8003f38 <HAL_GPIO_Init+0x174>
 8003f36:	e0a0      	b.n	800407a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f38:	4b57      	ldr	r3, [pc, #348]	; (8004098 <HAL_GPIO_Init+0x2d4>)
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	4b56      	ldr	r3, [pc, #344]	; (8004098 <HAL_GPIO_Init+0x2d4>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
 8003f44:	4b54      	ldr	r3, [pc, #336]	; (8004098 <HAL_GPIO_Init+0x2d4>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f50:	4a52      	ldr	r2, [pc, #328]	; (800409c <HAL_GPIO_Init+0x2d8>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	589b      	ldr	r3, [r3, r2]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4013      	ands	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	2390      	movs	r3, #144	; 0x90
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d019      	beq.n	8003fb2 <HAL_GPIO_Init+0x1ee>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a47      	ldr	r2, [pc, #284]	; (80040a0 <HAL_GPIO_Init+0x2dc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_GPIO_Init+0x1ea>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00d      	beq.n	8003faa <HAL_GPIO_Init+0x1e6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a45      	ldr	r2, [pc, #276]	; (80040a8 <HAL_GPIO_Init+0x2e4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <HAL_GPIO_Init+0x1e2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a44      	ldr	r2, [pc, #272]	; (80040ac <HAL_GPIO_Init+0x2e8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_GPIO_Init+0x1de>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	e008      	b.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e006      	b.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e004      	b.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e002      	b.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	400a      	ands	r2, r1
 8003fba:	0092      	lsls	r2, r2, #2
 8003fbc:	4093      	lsls	r3, r2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc4:	4935      	ldr	r1, [pc, #212]	; (800409c <HAL_GPIO_Init+0x2d8>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd2:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	4013      	ands	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43da      	mvns	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	029b      	lsls	r3, r3, #10
 8004014:	4013      	ands	r3, r2
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004020:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43da      	mvns	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	035b      	lsls	r3, r3, #13
 800403e:	4013      	ands	r3, r2
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43da      	mvns	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	039b      	lsls	r3, r3, #14
 8004068:	4013      	ands	r3, r2
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004074:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <HAL_GPIO_Init+0x2ec>)
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	3301      	adds	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	40da      	lsrs	r2, r3
 8004088:	1e13      	subs	r3, r2, #0
 800408a:	d000      	beq.n	800408e <HAL_GPIO_Init+0x2ca>
 800408c:	e6a2      	b.n	8003dd4 <HAL_GPIO_Init+0x10>
  } 
}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	46bd      	mov	sp, r7
 8004092:	b006      	add	sp, #24
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	40021000 	.word	0x40021000
 800409c:	40010000 	.word	0x40010000
 80040a0:	48000400 	.word	0x48000400
 80040a4:	48000800 	.word	0x48000800
 80040a8:	48000c00 	.word	0x48000c00
 80040ac:	48001000 	.word	0x48001000
 80040b0:	40010400 	.word	0x40010400

080040b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	0008      	movs	r0, r1
 80040be:	0011      	movs	r1, r2
 80040c0:	1cbb      	adds	r3, r7, #2
 80040c2:	1c02      	adds	r2, r0, #0
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	1c7b      	adds	r3, r7, #1
 80040c8:	1c0a      	adds	r2, r1, #0
 80040ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040cc:	1c7b      	adds	r3, r7, #1
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040d4:	1cbb      	adds	r3, r7, #2
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040dc:	e003      	b.n	80040e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040de:	1cbb      	adds	r3, r7, #2
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f000 fb76 	bl	80047f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d100      	bne.n	8004110 <HAL_RCC_OscConfig+0x20>
 800410e:	e08e      	b.n	800422e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004110:	4bc5      	ldr	r3, [pc, #788]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	220c      	movs	r2, #12
 8004116:	4013      	ands	r3, r2
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00e      	beq.n	800413a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800411c:	4bc2      	ldr	r3, [pc, #776]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	220c      	movs	r2, #12
 8004122:	4013      	ands	r3, r2
 8004124:	2b08      	cmp	r3, #8
 8004126:	d117      	bne.n	8004158 <HAL_RCC_OscConfig+0x68>
 8004128:	4bbf      	ldr	r3, [pc, #764]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	23c0      	movs	r3, #192	; 0xc0
 800412e:	025b      	lsls	r3, r3, #9
 8004130:	401a      	ands	r2, r3
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	429a      	cmp	r2, r3
 8004138:	d10e      	bne.n	8004158 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413a:	4bbb      	ldr	r3, [pc, #748]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	029b      	lsls	r3, r3, #10
 8004142:	4013      	ands	r3, r2
 8004144:	d100      	bne.n	8004148 <HAL_RCC_OscConfig+0x58>
 8004146:	e071      	b.n	800422c <HAL_RCC_OscConfig+0x13c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d000      	beq.n	8004152 <HAL_RCC_OscConfig+0x62>
 8004150:	e06c      	b.n	800422c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f000 fb4c 	bl	80047f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x80>
 8004160:	4bb1      	ldr	r3, [pc, #708]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4bb0      	ldr	r3, [pc, #704]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	0249      	lsls	r1, r1, #9
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e02f      	b.n	80041d0 <HAL_RCC_OscConfig+0xe0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0xa2>
 8004178:	4bab      	ldr	r3, [pc, #684]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4baa      	ldr	r3, [pc, #680]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800417e:	49ab      	ldr	r1, [pc, #684]	; (800442c <HAL_RCC_OscConfig+0x33c>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	4ba8      	ldr	r3, [pc, #672]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4ba7      	ldr	r3, [pc, #668]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800418a:	49a9      	ldr	r1, [pc, #676]	; (8004430 <HAL_RCC_OscConfig+0x340>)
 800418c:	400a      	ands	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e01e      	b.n	80041d0 <HAL_RCC_OscConfig+0xe0>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d10e      	bne.n	80041b8 <HAL_RCC_OscConfig+0xc8>
 800419a:	4ba3      	ldr	r3, [pc, #652]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4ba2      	ldr	r3, [pc, #648]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	02c9      	lsls	r1, r1, #11
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	0249      	lsls	r1, r1, #9
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xe0>
 80041b8:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b9a      	ldr	r3, [pc, #616]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041be:	499b      	ldr	r1, [pc, #620]	; (800442c <HAL_RCC_OscConfig+0x33c>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	4b98      	ldr	r3, [pc, #608]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b97      	ldr	r3, [pc, #604]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041ca:	4999      	ldr	r1, [pc, #612]	; (8004430 <HAL_RCC_OscConfig+0x340>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d014      	beq.n	8004202 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7ff fd14 	bl	8003c04 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e2:	f7ff fd0f 	bl	8003c04 <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b64      	cmp	r3, #100	; 0x64
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e2fd      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f4:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	4013      	ands	r3, r2
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0xf2>
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7ff fcff 	bl	8003c04 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7ff fcfa 	bl	8003c04 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e2e8      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	4013      	ands	r3, r2
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x11c>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d100      	bne.n	800423a <HAL_RCC_OscConfig+0x14a>
 8004238:	e06c      	b.n	8004314 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800423a:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	220c      	movs	r2, #12
 8004240:	4013      	ands	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	220c      	movs	r2, #12
 800424a:	4013      	ands	r3, r2
 800424c:	2b08      	cmp	r3, #8
 800424e:	d11f      	bne.n	8004290 <HAL_RCC_OscConfig+0x1a0>
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	23c0      	movs	r3, #192	; 0xc0
 8004256:	025b      	lsls	r3, r3, #9
 8004258:	401a      	ands	r2, r3
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	429a      	cmp	r2, r3
 8004260:	d116      	bne.n	8004290 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004262:	4b71      	ldr	r3, [pc, #452]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d005      	beq.n	8004278 <HAL_RCC_OscConfig+0x188>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e2bb      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b6b      	ldr	r3, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	22f8      	movs	r2, #248	; 0xf8
 800427e:	4393      	bics	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00da      	lsls	r2, r3, #3
 8004288:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428e:	e041      	b.n	8004314 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d024      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004298:	4b63      	ldr	r3, [pc, #396]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800429e:	2101      	movs	r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7ff fcae 	bl	8003c04 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ae:	f7ff fca9 	bl	8003c04 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e297      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2202      	movs	r2, #2
 80042c6:	4013      	ands	r3, r2
 80042c8:	d0f1      	beq.n	80042ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22f8      	movs	r2, #248	; 0xf8
 80042d0:	4393      	bics	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	00da      	lsls	r2, r3, #3
 80042da:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e018      	b.n	8004314 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	438a      	bics	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7ff fc89 	bl	8003c04 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f8:	f7ff fc84 	bl	8003c04 <HAL_GetTick>
 80042fc:	0002      	movs	r2, r0
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e272      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d1f1      	bne.n	80042f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2208      	movs	r2, #8
 800431a:	4013      	ands	r3, r2
 800431c:	d036      	beq.n	800438c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004326:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800432c:	2101      	movs	r1, #1
 800432e:	430a      	orrs	r2, r1
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004332:	f7ff fc67 	bl	8003c04 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7ff fc62 	bl	8003c04 <HAL_GetTick>
 8004340:	0002      	movs	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e250      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d0f1      	beq.n	800433c <HAL_RCC_OscConfig+0x24c>
 8004358:	e018      	b.n	800438c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800435c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004360:	2101      	movs	r1, #1
 8004362:	438a      	bics	r2, r1
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004366:	f7ff fc4d 	bl	8003c04 <HAL_GetTick>
 800436a:	0003      	movs	r3, r0
 800436c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004370:	f7ff fc48 	bl	8003c04 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e236      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2202      	movs	r2, #2
 8004388:	4013      	ands	r3, r2
 800438a:	d1f1      	bne.n	8004370 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2204      	movs	r2, #4
 8004392:	4013      	ands	r3, r2
 8004394:	d100      	bne.n	8004398 <HAL_RCC_OscConfig+0x2a8>
 8004396:	e0b5      	b.n	8004504 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004398:	231f      	movs	r3, #31
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	055b      	lsls	r3, r3, #21
 80043a8:	4013      	ands	r3, r2
 80043aa:	d111      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	0549      	lsls	r1, r1, #21
 80043b6:	430a      	orrs	r2, r1
 80043b8:	61da      	str	r2, [r3, #28]
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	055b      	lsls	r3, r3, #21
 80043c2:	4013      	ands	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043c8:	231f      	movs	r3, #31
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d11a      	bne.n	8004412 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	0049      	lsls	r1, r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7ff fc0b 	bl	8003c04 <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7ff fc06 	bl	8003c04 <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1f4      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <HAL_RCC_OscConfig+0x348>
 800441a:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 800441c:	6a1a      	ldr	r2, [r3, #32]
 800441e:	4b02      	ldr	r3, [pc, #8]	; (8004428 <HAL_RCC_OscConfig+0x338>)
 8004420:	2101      	movs	r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	621a      	str	r2, [r3, #32]
 8004426:	e035      	b.n	8004494 <HAL_RCC_OscConfig+0x3a4>
 8004428:	40021000 	.word	0x40021000
 800442c:	fffeffff 	.word	0xfffeffff
 8004430:	fffbffff 	.word	0xfffbffff
 8004434:	40007000 	.word	0x40007000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x36a>
 8004440:	4bca      	ldr	r3, [pc, #808]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	4bc9      	ldr	r3, [pc, #804]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004446:	2101      	movs	r1, #1
 8004448:	438a      	bics	r2, r1
 800444a:	621a      	str	r2, [r3, #32]
 800444c:	4bc7      	ldr	r3, [pc, #796]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	4bc6      	ldr	r3, [pc, #792]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004452:	2104      	movs	r1, #4
 8004454:	438a      	bics	r2, r1
 8004456:	621a      	str	r2, [r3, #32]
 8004458:	e01c      	b.n	8004494 <HAL_RCC_OscConfig+0x3a4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b05      	cmp	r3, #5
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x38c>
 8004462:	4bc2      	ldr	r3, [pc, #776]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	4bc1      	ldr	r3, [pc, #772]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004468:	2104      	movs	r1, #4
 800446a:	430a      	orrs	r2, r1
 800446c:	621a      	str	r2, [r3, #32]
 800446e:	4bbf      	ldr	r3, [pc, #764]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	4bbe      	ldr	r3, [pc, #760]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	621a      	str	r2, [r3, #32]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0x3a4>
 800447c:	4bbb      	ldr	r3, [pc, #748]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	4bba      	ldr	r3, [pc, #744]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004482:	2101      	movs	r1, #1
 8004484:	438a      	bics	r2, r1
 8004486:	621a      	str	r2, [r3, #32]
 8004488:	4bb8      	ldr	r3, [pc, #736]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	4bb7      	ldr	r3, [pc, #732]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800448e:	2104      	movs	r1, #4
 8004490:	438a      	bics	r2, r1
 8004492:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d014      	beq.n	80044c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449c:	f7ff fbb2 	bl	8003c04 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	e009      	b.n	80044ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7ff fbad 	bl	8003c04 <HAL_GetTick>
 80044aa:	0002      	movs	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	4aaf      	ldr	r2, [pc, #700]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e19a      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	4bac      	ldr	r3, [pc, #688]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	2202      	movs	r2, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x3b6>
 80044c4:	e013      	b.n	80044ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7ff fb9d 	bl	8003c04 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	e009      	b.n	80044e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7ff fb98 	bl	8003c04 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	4aa5      	ldr	r2, [pc, #660]	; (8004770 <HAL_RCC_OscConfig+0x680>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e185      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e4:	4ba1      	ldr	r3, [pc, #644]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	2202      	movs	r2, #2
 80044ea:	4013      	ands	r3, r2
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044ee:	231f      	movs	r3, #31
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	4b9b      	ldr	r3, [pc, #620]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80044fe:	499d      	ldr	r1, [pc, #628]	; (8004774 <HAL_RCC_OscConfig+0x684>)
 8004500:	400a      	ands	r2, r1
 8004502:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2210      	movs	r2, #16
 800450a:	4013      	ands	r3, r2
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d12a      	bne.n	800456c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004516:	4b95      	ldr	r3, [pc, #596]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451a:	4b94      	ldr	r3, [pc, #592]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800451c:	2104      	movs	r1, #4
 800451e:	430a      	orrs	r2, r1
 8004520:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004522:	4b92      	ldr	r3, [pc, #584]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	4b91      	ldr	r3, [pc, #580]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004528:	2101      	movs	r1, #1
 800452a:	430a      	orrs	r2, r1
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7ff fb69 	bl	8003c04 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004538:	f7ff fb64 	bl	8003c04 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e152      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d0f1      	beq.n	8004538 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	22f8      	movs	r2, #248	; 0xf8
 800455a:	4393      	bics	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	00da      	lsls	r2, r3, #3
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004566:	430a      	orrs	r2, r1
 8004568:	635a      	str	r2, [r3, #52]	; 0x34
 800456a:	e034      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	3305      	adds	r3, #5
 8004572:	d111      	bne.n	8004598 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004574:	4b7d      	ldr	r3, [pc, #500]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004578:	4b7c      	ldr	r3, [pc, #496]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800457a:	2104      	movs	r1, #4
 800457c:	438a      	bics	r2, r1
 800457e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004580:	4b7a      	ldr	r3, [pc, #488]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	22f8      	movs	r2, #248	; 0xf8
 8004586:	4393      	bics	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004592:	430a      	orrs	r2, r1
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
 8004596:	e01e      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004598:	4b74      	ldr	r3, [pc, #464]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	4b73      	ldr	r3, [pc, #460]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800459e:	2104      	movs	r1, #4
 80045a0:	430a      	orrs	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80045a4:	4b71      	ldr	r3, [pc, #452]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	4b70      	ldr	r3, [pc, #448]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045aa:	2101      	movs	r1, #1
 80045ac:	438a      	bics	r2, r1
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b0:	f7ff fb28 	bl	8003c04 <HAL_GetTick>
 80045b4:	0003      	movs	r3, r0
 80045b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045ba:	f7ff fb23 	bl	8003c04 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e111      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045cc:	4b67      	ldr	r3, [pc, #412]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	2202      	movs	r2, #2
 80045d2:	4013      	ands	r3, r2
 80045d4:	d1f1      	bne.n	80045ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	4013      	ands	r3, r2
 80045de:	d05c      	beq.n	800469a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045e0:	4b62      	ldr	r3, [pc, #392]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	220c      	movs	r2, #12
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d00e      	beq.n	800460a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045ec:	4b5f      	ldr	r3, [pc, #380]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	220c      	movs	r2, #12
 80045f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d114      	bne.n	8004622 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045f8:	4b5c      	ldr	r3, [pc, #368]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	23c0      	movs	r3, #192	; 0xc0
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	401a      	ands	r2, r3
 8004602:	23c0      	movs	r3, #192	; 0xc0
 8004604:	025b      	lsls	r3, r3, #9
 8004606:	429a      	cmp	r2, r3
 8004608:	d10b      	bne.n	8004622 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800460a:	4b58      	ldr	r3, [pc, #352]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800460c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	4013      	ands	r3, r2
 8004614:	d040      	beq.n	8004698 <HAL_RCC_OscConfig+0x5a8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d03c      	beq.n	8004698 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0e6      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01b      	beq.n	8004662 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800462a:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800462c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	0249      	lsls	r1, r1, #9
 8004634:	430a      	orrs	r2, r1
 8004636:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7ff fae4 	bl	8003c04 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004642:	f7ff fadf 	bl	8003c04 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0cd      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004654:	4b45      	ldr	r3, [pc, #276]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	025b      	lsls	r3, r3, #9
 800465c:	4013      	ands	r3, r2
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x552>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004662:	4b42      	ldr	r3, [pc, #264]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004666:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004668:	4943      	ldr	r1, [pc, #268]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 800466a:	400a      	ands	r2, r1
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7ff fac9 	bl	8003c04 <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004678:	f7ff fac4 	bl	8003c04 <HAL_GetTick>
 800467c:	0002      	movs	r2, r0
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0b2      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800468c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	025b      	lsls	r3, r3, #9
 8004692:	4013      	ands	r3, r2
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x588>
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004698:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5b4>
 80046a2:	e0a4      	b.n	80047ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a4:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	220c      	movs	r2, #12
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d100      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5c2>
 80046b0:	e078      	b.n	80047a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d14c      	bne.n	8004754 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046c0:	492e      	ldr	r1, [pc, #184]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 80046c2:	400a      	ands	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7ff fa9d 	bl	8003c04 <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7ff fa98 	bl	8003c04 <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e086      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	049b      	lsls	r3, r3, #18
 80046ea:	4013      	ands	r3, r2
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	220f      	movs	r2, #15
 80046f4:	4393      	bics	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 80046fe:	430a      	orrs	r2, r1
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_RCC_OscConfig+0x690>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	431a      	orrs	r2, r3
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	0449      	lsls	r1, r1, #17
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472a:	f7ff fa6b 	bl	8003c04 <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7ff fa66 	bl	8003c04 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e054      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	049b      	lsls	r3, r3, #18
 800474e:	4013      	ands	r3, r2
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x644>
 8004752:	e04c      	b.n	80047ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <HAL_RCC_OscConfig+0x67c>)
 800475a:	4908      	ldr	r1, [pc, #32]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 800475c:	400a      	ands	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7ff fa50 	bl	8003c04 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x6a6>
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	40021000 	.word	0x40021000
 8004770:	00001388 	.word	0x00001388
 8004774:	efffffff 	.word	0xefffffff
 8004778:	fffeffff 	.word	0xfffeffff
 800477c:	feffffff 	.word	0xfeffffff
 8004780:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7ff fa3e 	bl	8003c04 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e02c      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <HAL_RCC_OscConfig+0x708>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	049b      	lsls	r3, r3, #18
 800479e:	4013      	ands	r3, r2
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x694>
 80047a2:	e024      	b.n	80047ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01f      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <HAL_RCC_OscConfig+0x708>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_OscConfig+0x708>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	23c0      	movs	r3, #192	; 0xc0
 80047c0:	025b      	lsls	r3, r3, #9
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d10e      	bne.n	80047ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	220f      	movs	r2, #15
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	23f0      	movs	r3, #240	; 0xf0
 80047de:	039b      	lsls	r3, r3, #14
 80047e0:	401a      	ands	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b008      	add	sp, #32
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0bf      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d911      	bls.n	8004842 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	4393      	bics	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	4013      	ands	r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0a6      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	d015      	beq.n	8004878 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2204      	movs	r2, #4
 8004852:	4013      	ands	r3, r2
 8004854:	d006      	beq.n	8004864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004856:	4b51      	ldr	r3, [pc, #324]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4b50      	ldr	r3, [pc, #320]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 800485c:	21e0      	movs	r1, #224	; 0xe0
 800485e:	00c9      	lsls	r1, r1, #3
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	22f0      	movs	r2, #240	; 0xf0
 800486a:	4393      	bics	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	4b4a      	ldr	r3, [pc, #296]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2201      	movs	r2, #1
 800487e:	4013      	ands	r3, r2
 8004880:	d04c      	beq.n	800491c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488a:	4b44      	ldr	r3, [pc, #272]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	4013      	ands	r3, r2
 8004894:	d120      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07a      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	049b      	lsls	r3, r3, #18
 80048aa:	4013      	ands	r3, r2
 80048ac:	d114      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06e      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048ba:	4b38      	ldr	r3, [pc, #224]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 80048bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	4013      	ands	r3, r2
 80048c4:	d108      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e062      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2202      	movs	r2, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e05b      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2203      	movs	r2, #3
 80048de:	4393      	bics	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7ff f98a 	bl	8003c04 <HAL_GetTick>
 80048f0:	0003      	movs	r3, r0
 80048f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f4:	e009      	b.n	800490a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f6:	f7ff f985 	bl	8003c04 <HAL_GetTick>
 80048fa:	0002      	movs	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <HAL_RCC_ClockConfig+0x1a4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e042      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	220c      	movs	r2, #12
 8004910:	401a      	ands	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1ec      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	4013      	ands	r3, r2
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d211      	bcs.n	800494e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	4393      	bics	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_RCC_ClockConfig+0x19c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e020      	b.n	8004990 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2204      	movs	r2, #4
 8004954:	4013      	ands	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HAL_RCC_ClockConfig+0x1a8>)
 800495e:	4013      	ands	r3, r2
 8004960:	0019      	movs	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800496c:	f000 f820 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004970:	0001      	movs	r1, r0
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x1a0>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	220f      	movs	r2, #15
 800497a:	4013      	ands	r3, r2
 800497c:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <HAL_RCC_ClockConfig+0x1ac>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	000a      	movs	r2, r1
 8004982:	40da      	lsrs	r2, r3
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004986:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004988:	2000      	movs	r0, #0
 800498a:	f7ff f8f5 	bl	8003b78 <HAL_InitTick>
  
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40022000 	.word	0x40022000
 800499c:	40021000 	.word	0x40021000
 80049a0:	00001388 	.word	0x00001388
 80049a4:	fffff8ff 	.word	0xfffff8ff
 80049a8:	080050dc 	.word	0x080050dc
 80049ac:	20000000 	.word	0x20000000

080049b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b08f      	sub	sp, #60	; 0x3c
 80049b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80049b6:	2314      	movs	r3, #20
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	4a37      	ldr	r2, [pc, #220]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xe8>)
 80049bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049be:	c313      	stmia	r3!, {r0, r1, r4}
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xec>)
 80049c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049ca:	c313      	stmia	r3!, {r0, r1, r4}
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	2300      	movs	r3, #0
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d8:	2300      	movs	r3, #0
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049e4:	4b2e      	ldr	r3, [pc, #184]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	220c      	movs	r2, #12
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d006      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x52>
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d043      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0xd0>
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d144      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049fc:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a00:	e044      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	0c9b      	lsrs	r3, r3, #18
 8004a06:	220f      	movs	r2, #15
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2214      	movs	r2, #20
 8004a0c:	18ba      	adds	r2, r7, r2
 8004a0e:	5cd3      	ldrb	r3, [r2, r3]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a12:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	220f      	movs	r2, #15
 8004a18:	4013      	ands	r3, r2
 8004a1a:	1d3a      	adds	r2, r7, #4
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a22:	23c0      	movs	r3, #192	; 0xc0
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	401a      	ands	r2, r3
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	481c      	ldr	r0, [pc, #112]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a34:	f7fb fb68 	bl	8000108 <__udivsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	4353      	muls	r3, r2
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
 8004a42:	e01a      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	025b      	lsls	r3, r3, #9
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	23c0      	movs	r3, #192	; 0xc0
 8004a4e:	025b      	lsls	r3, r3, #9
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d109      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a56:	4814      	ldr	r0, [pc, #80]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a58:	f7fb fb56 	bl	8000108 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	001a      	movs	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	4353      	muls	r3, r2
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6a:	480e      	ldr	r0, [pc, #56]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a6c:	f7fb fb4c 	bl	8000108 <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	4353      	muls	r3, r2
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a7e:	e005      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a84:	e002      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b00f      	add	sp, #60	; 0x3c
 8004a94:	bd90      	pop	{r4, r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	080050bc 	.word	0x080050bc
 8004a9c:	080050cc 	.word	0x080050cc
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	007a1200 	.word	0x007a1200
 8004aa8:	02dc6c00 	.word	0x02dc6c00

08004aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e042      	b.n	8004b44 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	223d      	movs	r2, #61	; 0x3d
 8004ac2:	5c9b      	ldrb	r3, [r3, r2]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	223c      	movs	r2, #60	; 0x3c
 8004ace:	2100      	movs	r1, #0
 8004ad0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fb fd59 	bl	800058c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223d      	movs	r2, #61	; 0x3d
 8004ade:	2102      	movs	r1, #2
 8004ae0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f000 f935 	bl	8004d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2246      	movs	r2, #70	; 0x46
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	223e      	movs	r2, #62	; 0x3e
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	223f      	movs	r2, #63	; 0x3f
 8004b06:	2101      	movs	r1, #1
 8004b08:	5499      	strb	r1, [r3, r2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2240      	movs	r2, #64	; 0x40
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2241      	movs	r2, #65	; 0x41
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2242      	movs	r2, #66	; 0x42
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2243      	movs	r2, #67	; 0x43
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2244      	movs	r2, #68	; 0x44
 8004b2e:	2101      	movs	r1, #1
 8004b30:	5499      	strb	r1, [r3, r2]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2245      	movs	r2, #69	; 0x45
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	223d      	movs	r2, #61	; 0x3d
 8004b3e:	2101      	movs	r1, #1
 8004b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	223d      	movs	r2, #61	; 0x3d
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e033      	b.n	8004bcc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	223d      	movs	r2, #61	; 0x3d
 8004b68:	2102      	movs	r1, #2
 8004b6a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_TIM_Base_Start+0x88>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <HAL_TIM_Base_Start+0x4a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	05db      	lsls	r3, r3, #23
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_Base_Start+0x4a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <HAL_TIM_Base_Start+0x8c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_Base_Start+0x4a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <HAL_TIM_Base_Start+0x90>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d111      	bne.n	8004bba <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d010      	beq.n	8004bca <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	e007      	b.n	8004bca <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b004      	add	sp, #16
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40014000 	.word	0x40014000

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	223c      	movs	r2, #60	; 0x3c
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0ab      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x170>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223c      	movs	r2, #60	; 0x3c
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223d      	movs	r2, #61	; 0x3d
 8004c04:	2102      	movs	r1, #2
 8004c06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2277      	movs	r2, #119	; 0x77
 8004c14:	4393      	bics	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <HAL_TIM_ConfigClockSource+0x178>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d100      	bne.n	8004c32 <HAL_TIM_ConfigClockSource+0x52>
 8004c30:	e06b      	b.n	8004d0a <HAL_TIM_ConfigClockSource+0x12a>
 8004c32:	d80e      	bhi.n	8004c52 <HAL_TIM_ConfigClockSource+0x72>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d100      	bne.n	8004c3a <HAL_TIM_ConfigClockSource+0x5a>
 8004c38:	e077      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x14a>
 8004c3a:	d803      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x64>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d100      	bne.n	8004c42 <HAL_TIM_ConfigClockSource+0x62>
 8004c40:	e073      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c42:	e07c      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d100      	bne.n	8004c4a <HAL_TIM_ConfigClockSource+0x6a>
 8004c48:	e06f      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x14a>
 8004c4a:	2b30      	cmp	r3, #48	; 0x30
 8004c4c:	d100      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x70>
 8004c4e:	e06c      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004c50:	e075      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004c52:	2b70      	cmp	r3, #112	; 0x70
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x94>
 8004c56:	d804      	bhi.n	8004c62 <HAL_TIM_ConfigClockSource+0x82>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d036      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xea>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d044      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004c60:	e06d      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	0152      	lsls	r2, r2, #5
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d068      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0x15c>
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	0192      	lsls	r2, r2, #6
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004c72:	e064      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f000 f964 	bl	8004f50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2277      	movs	r2, #119	; 0x77
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e04d      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f000 f94d 	bl	8004f50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	01c9      	lsls	r1, r1, #7
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
      break;
 8004cc8:	e039      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	f000 f8c0 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2150      	movs	r1, #80	; 0x50
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 f91a 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e029      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	f000 f8de 	bl	8004eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2160      	movs	r1, #96	; 0x60
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f90a 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 8004d08:	e019      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	001a      	movs	r2, r3
 8004d18:	f000 f8a0 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2140      	movs	r1, #64	; 0x40
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 f8fa 	bl	8004f1c <TIM_ITRx_SetConfig>
      break;
 8004d28:	e009      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	0019      	movs	r1, r3
 8004d34:	0010      	movs	r0, r2
 8004d36:	f000 f8f1 	bl	8004f1c <TIM_ITRx_SetConfig>
        break;
 8004d3a:	e000      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004d3c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223d      	movs	r2, #61	; 0x3d
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	223c      	movs	r2, #60	; 0x3c
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	ffff00ff 	.word	0xffff00ff

08004d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <TIM_Base_SetConfig+0xe4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d008      	beq.n	8004d86 <TIM_Base_SetConfig+0x2a>
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	05db      	lsls	r3, r3, #23
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d003      	beq.n	8004d86 <TIM_Base_SetConfig+0x2a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a30      	ldr	r2, [pc, #192]	; (8004e44 <TIM_Base_SetConfig+0xe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d108      	bne.n	8004d98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2270      	movs	r2, #112	; 0x70
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <TIM_Base_SetConfig+0xe4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	05db      	lsls	r3, r3, #23
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <TIM_Base_SetConfig+0xe8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <TIM_Base_SetConfig+0xec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <TIM_Base_SetConfig+0xf0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <TIM_Base_SetConfig+0xf4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <TIM_Base_SetConfig+0xf8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_Base_SetConfig+0xfc>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	4393      	bics	r3, r2
 8004dea:	001a      	movs	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <TIM_Base_SetConfig+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0xce>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <TIM_Base_SetConfig+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0xce>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <TIM_Base_SetConfig+0xf4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0xce>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <TIM_Base_SetConfig+0xf8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d103      	bne.n	8004e32 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	615a      	str	r2, [r3, #20]
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40002000 	.word	0x40002000
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	fffffcff 	.word	0xfffffcff

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2201      	movs	r2, #1
 8004e74:	4393      	bics	r3, r2
 8004e76:	001a      	movs	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	22f0      	movs	r2, #240	; 0xf0
 8004e86:	4393      	bics	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	220a      	movs	r2, #10
 8004e98:	4393      	bics	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	4393      	bics	r3, r2
 8004ecc:	001a      	movs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4a0d      	ldr	r2, [pc, #52]	; (8004f18 <TIM_TI2_ConfigInputStage+0x60>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	22a0      	movs	r2, #160	; 0xa0
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b006      	add	sp, #24
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	ffff0fff 	.word	0xffff0fff

08004f1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2270      	movs	r2, #112	; 0x70
 8004f30:	4393      	bics	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <TIM_ETR_SetConfig+0x3c>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	609a      	str	r2, [r3, #8]
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b006      	add	sp, #24
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	ffff00ff 	.word	0xffff00ff

08004f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223c      	movs	r2, #60	; 0x3c
 8004f9e:	5c9b      	ldrb	r3, [r3, r2]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e047      	b.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223c      	movs	r2, #60	; 0x3c
 8004fac:	2101      	movs	r1, #1
 8004fae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	223d      	movs	r2, #61	; 0x3d
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2270      	movs	r2, #112	; 0x70
 8004fcc:	4393      	bics	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	05db      	lsls	r3, r3, #23
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d009      	beq.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10c      	bne.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2280      	movs	r2, #128	; 0x80
 8005010:	4393      	bics	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	223d      	movs	r2, #61	; 0x3d
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	223c      	movs	r2, #60	; 0x3c
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400
 8005048:	40014000 	.word	0x40014000

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	2600      	movs	r6, #0
 8005050:	4d0c      	ldr	r5, [pc, #48]	; (8005084 <__libc_init_array+0x38>)
 8005052:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005054:	1b64      	subs	r4, r4, r5
 8005056:	10a4      	asrs	r4, r4, #2
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	2600      	movs	r6, #0
 800505e:	f000 f821 	bl	80050a4 <_init>
 8005062:	4d0a      	ldr	r5, [pc, #40]	; (800508c <__libc_init_array+0x40>)
 8005064:	4c0a      	ldr	r4, [pc, #40]	; (8005090 <__libc_init_array+0x44>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	00b3      	lsls	r3, r6, #2
 8005072:	58eb      	ldr	r3, [r5, r3]
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	00b3      	lsls	r3, r6, #2
 800507c:	58eb      	ldr	r3, [r5, r3]
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	0800513c 	.word	0x0800513c
 8005088:	0800513c 	.word	0x0800513c
 800508c:	0800513c 	.word	0x0800513c
 8005090:	08005140 	.word	0x08005140

08005094 <memset>:
 8005094:	0003      	movs	r3, r0
 8005096:	1812      	adds	r2, r2, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	7019      	strb	r1, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
